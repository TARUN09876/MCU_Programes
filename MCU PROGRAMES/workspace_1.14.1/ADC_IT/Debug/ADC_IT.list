
ADC_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004a90  08004a90  00014a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ae8  08004ae8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004af0  08004af0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af0  08004af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000005c  08004b54  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004b54  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aec9  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001df1  00000000  00000000  0002af98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  0002cd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006d5  00000000  00000000  0002d678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008da3  00000000  00000000  0002dd4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002f83  00000000  00000000  00036af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000029c4  00000000  00000000  00039a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000062  00000000  00000000  0003c438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004a78 	.word	0x08004a78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004a78 	.word	0x08004a78

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b970 	b.w	8000df4 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	460d      	mov	r5, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	460f      	mov	r7, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4694      	mov	ip, r2
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0xe2>
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	b143      	cbz	r3, 8000b5a <__udivmoddi4+0x2e>
 8000b48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b4c:	f1c3 0220 	rsb	r2, r3, #32
 8000b50:	409f      	lsls	r7, r3
 8000b52:	fa20 f202 	lsr.w	r2, r0, r2
 8000b56:	4317      	orrs	r7, r2
 8000b58:	409c      	lsls	r4, r3
 8000b5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b5e:	fa1f f58c 	uxth.w	r5, ip
 8000b62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b66:	0c22      	lsrs	r2, r4, #16
 8000b68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b70:	fb01 f005 	mul.w	r0, r1, r5
 8000b74:	4290      	cmp	r0, r2
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b78:	eb1c 0202 	adds.w	r2, ip, r2
 8000b7c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b80:	f080 811c 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000b84:	4290      	cmp	r0, r2
 8000b86:	f240 8119 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	4462      	add	r2, ip
 8000b8e:	1a12      	subs	r2, r2, r0
 8000b90:	b2a4      	uxth	r4, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	d90a      	bls.n	8000bbc <__udivmoddi4+0x90>
 8000ba6:	eb1c 0404 	adds.w	r4, ip, r4
 8000baa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x294>
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x294>
 8000bb8:	4464      	add	r4, ip
 8000bba:	3802      	subs	r0, #2
 8000bbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc0:	1b64      	subs	r4, r4, r5
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11e      	cbz	r6, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40dc      	lsrs	r4, r3
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e9c6 4300 	strd	r4, r3, [r6]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0xbc>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80ed 	beq.w	8000db6 <__udivmoddi4+0x28a>
 8000bdc:	2100      	movs	r1, #0
 8000bde:	e9c6 0500 	strd	r0, r5, [r6]
 8000be2:	4608      	mov	r0, r1
 8000be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be8:	fab3 f183 	clz	r1, r3
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d149      	bne.n	8000c84 <__udivmoddi4+0x158>
 8000bf0:	42ab      	cmp	r3, r5
 8000bf2:	d302      	bcc.n	8000bfa <__udivmoddi4+0xce>
 8000bf4:	4282      	cmp	r2, r0
 8000bf6:	f200 80f8 	bhi.w	8000dea <__udivmoddi4+0x2be>
 8000bfa:	1a84      	subs	r4, r0, r2
 8000bfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000c00:	2001      	movs	r0, #1
 8000c02:	4617      	mov	r7, r2
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d0e2      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	e9c6 4700 	strd	r4, r7, [r6]
 8000c0c:	e7df      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c0e:	b902      	cbnz	r2, 8000c12 <__udivmoddi4+0xe6>
 8000c10:	deff      	udf	#255	; 0xff
 8000c12:	fab2 f382 	clz	r3, r2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8090 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1c:	1a8a      	subs	r2, r1, r2
 8000c1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c22:	fa1f fe8c 	uxth.w	lr, ip
 8000c26:	2101      	movs	r1, #1
 8000c28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c30:	0c22      	lsrs	r2, r4, #16
 8000c32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c36:	fb0e f005 	mul.w	r0, lr, r5
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4290      	cmp	r0, r2
 8000c4a:	f200 80cb 	bhi.w	8000de4 <__udivmoddi4+0x2b8>
 8000c4e:	4645      	mov	r5, r8
 8000c50:	1a12      	subs	r2, r2, r0
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c58:	fb07 2210 	mls	r2, r7, r0, r2
 8000c5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c60:	fb0e fe00 	mul.w	lr, lr, r0
 8000c64:	45a6      	cmp	lr, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x14e>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c70:	d202      	bcs.n	8000c78 <__udivmoddi4+0x14c>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f200 80bb 	bhi.w	8000dee <__udivmoddi4+0x2c2>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	eba4 040e 	sub.w	r4, r4, lr
 8000c7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c82:	e79f      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c84:	f1c1 0720 	rsb	r7, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c92:	fa05 f401 	lsl.w	r4, r5, r1
 8000c96:	fa20 f307 	lsr.w	r3, r0, r7
 8000c9a:	40fd      	lsrs	r5, r7
 8000c9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	fb09 5518 	mls	r5, r9, r8, r5
 8000cae:	0c1c      	lsrs	r4, r3, #16
 8000cb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cb4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cb8:	42a5      	cmp	r5, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ccc:	f080 8088 	bcs.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd0:	42a5      	cmp	r5, r4
 8000cd2:	f240 8085 	bls.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	4464      	add	r4, ip
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	b29d      	uxth	r5, r3
 8000ce0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cfc:	d26c      	bcs.n	8000dd8 <__udivmoddi4+0x2ac>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	d96a      	bls.n	8000dd8 <__udivmoddi4+0x2ac>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	4464      	add	r4, ip
 8000d06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	42ac      	cmp	r4, r5
 8000d14:	46c8      	mov	r8, r9
 8000d16:	46ae      	mov	lr, r5
 8000d18:	d356      	bcc.n	8000dc8 <__udivmoddi4+0x29c>
 8000d1a:	d053      	beq.n	8000dc4 <__udivmoddi4+0x298>
 8000d1c:	b156      	cbz	r6, 8000d34 <__udivmoddi4+0x208>
 8000d1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d22:	eb64 040e 	sbc.w	r4, r4, lr
 8000d26:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2a:	40ca      	lsrs	r2, r1
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	4317      	orrs	r7, r2
 8000d30:	e9c6 7400 	strd	r7, r4, [r6]
 8000d34:	4618      	mov	r0, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3c:	f1c3 0120 	rsb	r1, r3, #32
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	fa20 f201 	lsr.w	r2, r0, r1
 8000d48:	fa25 f101 	lsr.w	r1, r5, r1
 8000d4c:	409d      	lsls	r5, r3
 8000d4e:	432a      	orrs	r2, r5
 8000d50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d60:	0c11      	lsrs	r1, r2, #16
 8000d62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d66:	fb00 f50e 	mul.w	r5, r0, lr
 8000d6a:	428d      	cmp	r5, r1
 8000d6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x258>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d7a:	d22f      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000d7c:	428d      	cmp	r5, r1
 8000d7e:	d92d      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4461      	add	r1, ip
 8000d84:	1b49      	subs	r1, r1, r5
 8000d86:	b292      	uxth	r2, r2
 8000d88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d94:	fb05 f10e 	mul.w	r1, r5, lr
 8000d98:	4291      	cmp	r1, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x282>
 8000d9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000da0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da4:	d216      	bcs.n	8000dd4 <__udivmoddi4+0x2a8>
 8000da6:	4291      	cmp	r1, r2
 8000da8:	d914      	bls.n	8000dd4 <__udivmoddi4+0x2a8>
 8000daa:	3d02      	subs	r5, #2
 8000dac:	4462      	add	r2, ip
 8000dae:	1a52      	subs	r2, r2, r1
 8000db0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000db4:	e738      	b.n	8000c28 <__udivmoddi4+0xfc>
 8000db6:	4631      	mov	r1, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xa2>
 8000dbc:	4639      	mov	r1, r7
 8000dbe:	e6e6      	b.n	8000b8e <__udivmoddi4+0x62>
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x90>
 8000dc4:	4548      	cmp	r0, r9
 8000dc6:	d2a9      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dcc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	e7a3      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd4:	4645      	mov	r5, r8
 8000dd6:	e7ea      	b.n	8000dae <__udivmoddi4+0x282>
 8000dd8:	462b      	mov	r3, r5
 8000dda:	e794      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000ddc:	4640      	mov	r0, r8
 8000dde:	e7d1      	b.n	8000d84 <__udivmoddi4+0x258>
 8000de0:	46d0      	mov	r8, sl
 8000de2:	e77b      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de4:	3d02      	subs	r5, #2
 8000de6:	4462      	add	r2, ip
 8000de8:	e732      	b.n	8000c50 <__udivmoddi4+0x124>
 8000dea:	4608      	mov	r0, r1
 8000dec:	e70a      	b.n	8000c04 <__udivmoddi4+0xd8>
 8000dee:	4464      	add	r4, ip
 8000df0:	3802      	subs	r0, #2
 8000df2:	e742      	b.n	8000c7a <__udivmoddi4+0x14e>

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfc:	f000 fb54 	bl	80014a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e00:	f000 f85c 	bl	8000ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e04:	f000 f944 	bl	8001090 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e08:	f000 f8c6 	bl	8000f98 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000e0c:	f000 f916 	bl	800103c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000e10:	4823      	ldr	r0, [pc, #140]	; (8000ea0 <main+0xa8>)
 8000e12:	f000 fc23 	bl	800165c <HAL_ADC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(Adc_Valid == 1)
 8000e16:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <main+0xac>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d133      	bne.n	8000e86 <main+0x8e>
	  {

		  temp = (AdcVal*330.0)/1023.0;
 8000e1e:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <main+0xb0>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fb9e 	bl	8000564 <__aeabi_i2d>
 8000e28:	a319      	add	r3, pc, #100	; (adr r3, 8000e90 <main+0x98>)
 8000e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2e:	f7ff fc03 	bl	8000638 <__aeabi_dmul>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	a317      	add	r3, pc, #92	; (adr r3, 8000e98 <main+0xa0>)
 8000e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e40:	f7ff fd24 	bl	800088c <__aeabi_ddiv>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4610      	mov	r0, r2
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f7ff fe06 	bl	8000a5c <__aeabi_d2f>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a16      	ldr	r2, [pc, #88]	; (8000eac <main+0xb4>)
 8000e54:	6013      	str	r3, [r2, #0]
		  sprintf(txbuf,"ADC= %d\n",AdcVal);
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <main+0xb0>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4914      	ldr	r1, [pc, #80]	; (8000eb0 <main+0xb8>)
 8000e5e:	4815      	ldr	r0, [pc, #84]	; (8000eb4 <main+0xbc>)
 8000e60:	f003 f966 	bl	8004130 <siprintf>
		  HAL_UART_Transmit(&huart2,txbuf,strlen(txbuf),HAL_MAX_DELAY);
 8000e64:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <main+0xbc>)
 8000e66:	f7ff f9d3 	bl	8000210 <strlen>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	4910      	ldr	r1, [pc, #64]	; (8000eb4 <main+0xbc>)
 8000e74:	4810      	ldr	r0, [pc, #64]	; (8000eb8 <main+0xc0>)
 8000e76:	f002 f9a9 	bl	80031cc <HAL_UART_Transmit>
		  Adc_Valid=0;
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <main+0xac>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_IT(&hadc1);
 8000e80:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <main+0xa8>)
 8000e82:	f000 fbeb 	bl	800165c <HAL_ADC_Start_IT>
	  }
	  HAL_Delay(3000);
 8000e86:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e8a:	f000 fb7f 	bl	800158c <HAL_Delay>
	  if(Adc_Valid == 1)
 8000e8e:	e7c2      	b.n	8000e16 <main+0x1e>
 8000e90:	00000000 	.word	0x00000000
 8000e94:	4074a000 	.word	0x4074a000
 8000e98:	00000000 	.word	0x00000000
 8000e9c:	408ff800 	.word	0x408ff800
 8000ea0:	20000078 	.word	0x20000078
 8000ea4:	20000134 	.word	0x20000134
 8000ea8:	20000108 	.word	0x20000108
 8000eac:	20000138 	.word	0x20000138
 8000eb0:	08004a90 	.word	0x08004a90
 8000eb4:	2000010c 	.word	0x2000010c
 8000eb8:	200000c0 	.word	0x200000c0

08000ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b094      	sub	sp, #80	; 0x50
 8000ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	2234      	movs	r2, #52	; 0x34
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 f950 	bl	8004170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <SystemClock_Config+0xd4>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	4a29      	ldr	r2, [pc, #164]	; (8000f90 <SystemClock_Config+0xd4>)
 8000eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef0:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <SystemClock_Config+0xd4>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000efc:	2300      	movs	r3, #0
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <SystemClock_Config+0xd8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f08:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <SystemClock_Config+0xd8>)
 8000f0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <SystemClock_Config+0xd8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f20:	2301      	movs	r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f24:	2310      	movs	r3, #16
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f30:	2310      	movs	r3, #16
 8000f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f34:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f42:	2302      	movs	r3, #2
 8000f44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 fe50 	bl	8002bf0 <HAL_RCC_OscConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f56:	f000 f911 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	2102      	movs	r1, #2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 faf0 	bl	800255c <HAL_RCC_ClockConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f82:	f000 f8fb 	bl	800117c <Error_Handler>
  }
}
 8000f86:	bf00      	nop
 8000f88:	3750      	adds	r7, #80	; 0x50
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000

08000f98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fac:	4a21      	ldr	r2, [pc, #132]	; (8001034 <MX_ADC1_Init+0x9c>)
 8000fae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <MX_ADC1_Init+0xa0>)
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_ADC1_Init+0x98>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <MX_ADC1_Init+0x98>)
 8000ffa:	f000 faeb 	bl	80015d4 <HAL_ADC_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001004:	f000 f8ba 	bl	800117c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001008:	230a      	movs	r3, #10
 800100a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800100c:	2301      	movs	r3, #1
 800100e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_ADC1_Init+0x98>)
 800101a:	f000 fd2f 	bl	8001a7c <HAL_ADC_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001024:	f000 f8aa 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000078 	.word	0x20000078
 8001034:	40012000 	.word	0x40012000
 8001038:	0f000001 	.word	0x0f000001

0800103c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <MX_USART2_UART_Init+0x50>)
 8001044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800104c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001074:	f002 f85a 	bl	800312c <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800107e:	f000 f87d 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000c0 	.word	0x200000c0
 800108c:	40004400 	.word	0x40004400

08001090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b24      	ldr	r3, [pc, #144]	; (800113c <MX_GPIO_Init+0xac>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a23      	ldr	r2, [pc, #140]	; (800113c <MX_GPIO_Init+0xac>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <MX_GPIO_Init+0xac>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <MX_GPIO_Init+0xac>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a1c      	ldr	r2, [pc, #112]	; (800113c <MX_GPIO_Init+0xac>)
 80010cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_GPIO_Init+0xac>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_GPIO_Init+0xac>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a15      	ldr	r2, [pc, #84]	; (800113c <MX_GPIO_Init+0xac>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <MX_GPIO_Init+0xac>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_GPIO_Init+0xac>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <MX_GPIO_Init+0xac>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_GPIO_Init+0xac>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001116:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800111c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <MX_GPIO_Init+0xb0>)
 800112e:	f001 f881 	bl	8002234 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40020800 	.word	0x40020800

08001144 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *h)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	if(h == &hadc1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d109      	bne.n	8001168 <HAL_ADC_ConvCpltCallback+0x24>
	{
		AdcVal = HAL_ADC_GetValue(&hadc1);
 8001154:	4806      	ldr	r0, [pc, #24]	; (8001170 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001156:	f000 fc6f 	bl	8001a38 <HAL_ADC_GetValue>
 800115a:	4603      	mov	r3, r0
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <HAL_ADC_ConvCpltCallback+0x30>)
 8001160:	801a      	strh	r2, [r3, #0]
		Adc_Valid =1;
 8001162:	4b05      	ldr	r3, [pc, #20]	; (8001178 <HAL_ADC_ConvCpltCallback+0x34>)
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
	}
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000078 	.word	0x20000078
 8001174:	20000108 	.word	0x20000108
 8001178:	20000134 	.word	0x20000134

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	e7fe      	b.n	8001184 <Error_Handler+0x8>
	...

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_MspInit+0x4c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <HAL_MspInit+0x4c>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <HAL_MspInit+0x4c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_MspInit+0x4c>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <HAL_MspInit+0x4c>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_MspInit+0x4c>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011c6:	2007      	movs	r0, #7
 80011c8:	f000 ff60 	bl	800208c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800

080011d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a28      	ldr	r2, [pc, #160]	; (8001298 <HAL_ADC_MspInit+0xc0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d149      	bne.n	800128e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <HAL_ADC_MspInit+0xc4>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a26      	ldr	r2, [pc, #152]	; (800129c <HAL_ADC_MspInit+0xc4>)
 8001204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b24      	ldr	r3, [pc, #144]	; (800129c <HAL_ADC_MspInit+0xc4>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <HAL_ADC_MspInit+0xc4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a1f      	ldr	r2, [pc, #124]	; (800129c <HAL_ADC_MspInit+0xc4>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <HAL_ADC_MspInit+0xc4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <HAL_ADC_MspInit+0xc4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a18      	ldr	r2, [pc, #96]	; (800129c <HAL_ADC_MspInit+0xc4>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_ADC_MspInit+0xc4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800124e:	2301      	movs	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001252:	2303      	movs	r3, #3
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	480f      	ldr	r0, [pc, #60]	; (80012a0 <HAL_ADC_MspInit+0xc8>)
 8001262:	f000 ffe7 	bl	8002234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001266:	2301      	movs	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126a:	2303      	movs	r3, #3
 800126c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	480a      	ldr	r0, [pc, #40]	; (80012a4 <HAL_ADC_MspInit+0xcc>)
 800127a:	f000 ffdb 	bl	8002234 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2012      	movs	r0, #18
 8001284:	f000 ff0d 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001288:	2012      	movs	r0, #18
 800128a:	f000 ff26 	bl	80020da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800128e:	bf00      	nop
 8001290:	3728      	adds	r7, #40	; 0x28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40012000 	.word	0x40012000
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020800 	.word	0x40020800
 80012a4:	40020000 	.word	0x40020000

080012a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1d      	ldr	r2, [pc, #116]	; (800133c <HAL_UART_MspInit+0x94>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d133      	bne.n	8001332 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_UART_MspInit+0x98>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_UART_MspInit+0x98>)
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_UART_MspInit+0x98>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_UART_MspInit+0x98>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a14      	ldr	r2, [pc, #80]	; (8001340 <HAL_UART_MspInit+0x98>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_UART_MspInit+0x98>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8001302:	230c      	movs	r3, #12
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001312:	2307      	movs	r3, #7
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <HAL_UART_MspInit+0x9c>)
 800131e:	f000 ff89 	bl	8002234 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2026      	movs	r0, #38	; 0x26
 8001328:	f000 febb 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800132c:	2026      	movs	r0, #38	; 0x26
 800132e:	f000 fed4 	bl	80020da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40004400 	.word	0x40004400
 8001340:	40023800 	.word	0x40023800
 8001344:	40020000 	.word	0x40020000

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800134c:	e7fe      	b.n	800134c <NMI_Handler+0x4>

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001394:	f000 f8da 	bl	800154c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <ADC_IRQHandler+0x10>)
 80013a2:	f000 fa39 	bl	8001818 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000078 	.word	0x20000078

080013b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <USART2_IRQHandler+0x10>)
 80013b6:	f001 ff95 	bl	80032e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200000c0 	.word	0x200000c0

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	; (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f002 fec4 	bl	8004180 <__errno>
 80013f8:	4603      	mov	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20020000 	.word	0x20020000
 8001424:	00000400 	.word	0x00000400
 8001428:	2000013c 	.word	0x2000013c
 800142c:	20000290 	.word	0x20000290

08001430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <SystemInit+0x20>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <SystemInit+0x20>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800148c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001458:	f7ff ffea 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800145e:	490d      	ldr	r1, [pc, #52]	; (8001494 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001474:	4c0a      	ldr	r4, [pc, #40]	; (80014a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001482:	f002 fe83 	bl	800418c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001486:	f7ff fcb7 	bl	8000df8 <main>
  bx  lr    
 800148a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800148c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001494:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001498:	08004af8 	.word	0x08004af8
  ldr r2, =_sbss
 800149c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014a0:	2000028c 	.word	0x2000028c

080014a4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <CAN1_RX0_IRQHandler>
	...

080014a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <HAL_Init+0x40>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <HAL_Init+0x40>)
 80014b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_Init+0x40>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <HAL_Init+0x40>)
 80014be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_Init+0x40>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_Init+0x40>)
 80014ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d0:	2003      	movs	r0, #3
 80014d2:	f000 fddb 	bl	800208c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 f808 	bl	80014ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014dc:	f7ff fe54 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023c00 	.word	0x40023c00

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_InitTick+0x54>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_InitTick+0x58>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	fbb3 f3f1 	udiv	r3, r3, r1
 8001506:	fbb2 f3f3 	udiv	r3, r2, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fdf3 	bl	80020f6 <HAL_SYSTICK_Config>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e00e      	b.n	8001538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d80a      	bhi.n	8001536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001520:	2200      	movs	r2, #0
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f000 fdbb 	bl	80020a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800152c:	4a06      	ldr	r2, [pc, #24]	; (8001548 <HAL_InitTick+0x5c>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e000      	b.n	8001538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000000 	.word	0x20000000
 8001544:	20000008 	.word	0x20000008
 8001548:	20000004 	.word	0x20000004

0800154c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_IncTick+0x20>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_IncTick+0x24>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_IncTick+0x24>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000008 	.word	0x20000008
 8001570:	20000140 	.word	0x20000140

08001574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <HAL_GetTick+0x14>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000140 	.word	0x20000140

0800158c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001594:	f7ff ffee 	bl	8001574 <HAL_GetTick>
 8001598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a4:	d005      	beq.n	80015b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <HAL_Delay+0x44>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015b2:	bf00      	nop
 80015b4:	f7ff ffde 	bl	8001574 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d8f7      	bhi.n	80015b4 <HAL_Delay+0x28>
  {
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000008 	.word	0x20000008

080015d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e033      	b.n	8001652 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fdf0 	bl	80011d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 0310 	and.w	r3, r3, #16
 800160e:	2b00      	cmp	r3, #0
 8001610:	d118      	bne.n	8001644 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800161a:	f023 0302 	bic.w	r3, r3, #2
 800161e:	f043 0202 	orr.w	r2, r3, #2
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 fb5a 	bl	8001ce0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f023 0303 	bic.w	r3, r3, #3
 800163a:	f043 0201 	orr.w	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	641a      	str	r2, [r3, #64]	; 0x40
 8001642:	e001      	b.n	8001648 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800166e:	2b01      	cmp	r3, #1
 8001670:	d101      	bne.n	8001676 <HAL_ADC_Start_IT+0x1a>
 8001672:	2302      	movs	r3, #2
 8001674:	e0bd      	b.n	80017f2 <HAL_ADC_Start_IT+0x196>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b01      	cmp	r3, #1
 800168a:	d018      	beq.n	80016be <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800169c:	4b58      	ldr	r3, [pc, #352]	; (8001800 <HAL_ADC_Start_IT+0x1a4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a58      	ldr	r2, [pc, #352]	; (8001804 <HAL_ADC_Start_IT+0x1a8>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	0c9a      	lsrs	r2, r3, #18
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80016b0:	e002      	b.n	80016b8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f9      	bne.n	80016b2 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f040 8085 	bne.w	80017d8 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800170c:	d106      	bne.n	800171c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f023 0206 	bic.w	r2, r3, #6
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	645a      	str	r2, [r3, #68]	; 0x44
 800171a:	e002      	b.n	8001722 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800172a:	4b37      	ldr	r3, [pc, #220]	; (8001808 <HAL_ADC_Start_IT+0x1ac>)
 800172c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001736:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001746:	f043 0320 	orr.w	r3, r3, #32
 800174a:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	2b00      	cmp	r3, #0
 8001756:	d12a      	bne.n	80017ae <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a2b      	ldr	r2, [pc, #172]	; (800180c <HAL_ADC_Start_IT+0x1b0>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d015      	beq.n	800178e <HAL_ADC_Start_IT+0x132>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a2a      	ldr	r2, [pc, #168]	; (8001810 <HAL_ADC_Start_IT+0x1b4>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d105      	bne.n	8001778 <HAL_ADC_Start_IT+0x11c>
 800176c:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_ADC_Start_IT+0x1ac>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00a      	beq.n	800178e <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a25      	ldr	r2, [pc, #148]	; (8001814 <HAL_ADC_Start_IT+0x1b8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d136      	bne.n	80017f0 <HAL_ADC_Start_IT+0x194>
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <HAL_ADC_Start_IT+0x1ac>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	2b00      	cmp	r3, #0
 800178c:	d130      	bne.n	80017f0 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d129      	bne.n	80017f0 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	e020      	b.n	80017f0 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a16      	ldr	r2, [pc, #88]	; (800180c <HAL_ADC_Start_IT+0x1b0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d11b      	bne.n	80017f0 <HAL_ADC_Start_IT+0x194>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d114      	bne.n	80017f0 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	e00b      	b.n	80017f0 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f043 0210 	orr.w	r2, r3, #16
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e8:	f043 0201 	orr.w	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000000 	.word	0x20000000
 8001804:	431bde83 	.word	0x431bde83
 8001808:	40012300 	.word	0x40012300
 800180c:	40012000 	.word	0x40012000
 8001810:	40012100 	.word	0x40012100
 8001814:	40012200 	.word	0x40012200

08001818 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	f003 0320 	and.w	r3, r3, #32
 8001846:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d049      	beq.n	80018e2 <HAL_ADC_IRQHandler+0xca>
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d046      	beq.n	80018e2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	2b00      	cmp	r3, #0
 800185e:	d105      	bne.n	800186c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d12b      	bne.n	80018d2 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800187e:	2b00      	cmp	r3, #0
 8001880:	d127      	bne.n	80018d2 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800189a:	2b00      	cmp	r3, #0
 800189c:	d119      	bne.n	80018d2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0220 	bic.w	r2, r2, #32
 80018ac:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d105      	bne.n	80018d2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f043 0201 	orr.w	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff fc36 	bl	8001144 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f06f 0212 	mvn.w	r2, #18
 80018e0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d057      	beq.n	80019a8 <HAL_ADC_IRQHandler+0x190>
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d054      	beq.n	80019a8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	2b00      	cmp	r3, #0
 8001908:	d105      	bne.n	8001916 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d139      	bne.n	8001998 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800192e:	2b00      	cmp	r3, #0
 8001930:	d006      	beq.n	8001940 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800193c:	2b00      	cmp	r3, #0
 800193e:	d12b      	bne.n	8001998 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800194a:	2b00      	cmp	r3, #0
 800194c:	d124      	bne.n	8001998 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001958:	2b00      	cmp	r3, #0
 800195a:	d11d      	bne.n	8001998 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001960:	2b00      	cmp	r3, #0
 8001962:	d119      	bne.n	8001998 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001972:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	f043 0201 	orr.w	r2, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 fa9d 	bl	8001ed8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f06f 020c 	mvn.w	r2, #12
 80019a6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d017      	beq.n	80019ee <HAL_ADC_IRQHandler+0x1d6>
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d014      	beq.n	80019ee <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d10d      	bne.n	80019ee <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f837 	bl	8001a52 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f06f 0201 	mvn.w	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019fc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d015      	beq.n	8001a30 <HAL_ADC_IRQHandler+0x218>
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d012      	beq.n	8001a30 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f043 0202 	orr.w	r2, r3, #2
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f06f 0220 	mvn.w	r2, #32
 8001a1e:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f820 	bl	8001a66 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f06f 0220 	mvn.w	r2, #32
 8001a2e:	601a      	str	r2, [r3, #0]
  }
}
 8001a30:	bf00      	nop
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x1c>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e113      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x244>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b09      	cmp	r3, #9
 8001aa6:	d925      	bls.n	8001af4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68d9      	ldr	r1, [r3, #12]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	3b1e      	subs	r3, #30
 8001abe:	2207      	movs	r2, #7
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43da      	mvns	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	400a      	ands	r2, r1
 8001acc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68d9      	ldr	r1, [r3, #12]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4403      	add	r3, r0
 8001ae6:	3b1e      	subs	r3, #30
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	e022      	b.n	8001b3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6919      	ldr	r1, [r3, #16]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	2207      	movs	r2, #7
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	400a      	ands	r2, r1
 8001b16:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6919      	ldr	r1, [r3, #16]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4403      	add	r3, r0
 8001b30:	409a      	lsls	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d824      	bhi.n	8001b8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	3b05      	subs	r3, #5
 8001b54:	221f      	movs	r2, #31
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	400a      	ands	r2, r1
 8001b62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	4618      	mov	r0, r3
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b05      	subs	r3, #5
 8001b7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	635a      	str	r2, [r3, #52]	; 0x34
 8001b8a:	e04c      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b0c      	cmp	r3, #12
 8001b92:	d824      	bhi.n	8001bde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3b23      	subs	r3, #35	; 0x23
 8001ba6:	221f      	movs	r2, #31
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43da      	mvns	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	3b23      	subs	r3, #35	; 0x23
 8001bd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
 8001bdc:	e023      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	3b41      	subs	r3, #65	; 0x41
 8001bf0:	221f      	movs	r2, #31
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	3b41      	subs	r3, #65	; 0x41
 8001c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c26:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <HAL_ADC_ConfigChannel+0x250>)
 8001c28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a28      	ldr	r2, [pc, #160]	; (8001cd0 <HAL_ADC_ConfigChannel+0x254>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d10f      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x1d8>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b12      	cmp	r3, #18
 8001c3a:	d10b      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <HAL_ADC_ConfigChannel+0x254>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d12b      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x23a>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <HAL_ADC_ConfigChannel+0x258>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d003      	beq.n	8001c70 <HAL_ADC_ConfigChannel+0x1f4>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b11      	cmp	r3, #17
 8001c6e:	d122      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a11      	ldr	r2, [pc, #68]	; (8001cd4 <HAL_ADC_ConfigChannel+0x258>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d111      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_ADC_ConfigChannel+0x25c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <HAL_ADC_ConfigChannel+0x260>)
 8001c98:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9c:	0c9a      	lsrs	r2, r3, #18
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ca8:	e002      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f9      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40012300 	.word	0x40012300
 8001cd0:	40012000 	.word	0x40012000
 8001cd4:	10000012 	.word	0x10000012
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	431bde83 	.word	0x431bde83

08001ce0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ce8:	4b79      	ldr	r3, [pc, #484]	; (8001ed0 <ADC_Init+0x1f0>)
 8001cea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	431a      	orrs	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6859      	ldr	r1, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	021a      	lsls	r2, r3, #8
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6899      	ldr	r1, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	4a58      	ldr	r2, [pc, #352]	; (8001ed4 <ADC_Init+0x1f4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d022      	beq.n	8001dbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6899      	ldr	r1, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001da8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6899      	ldr	r1, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	e00f      	b.n	8001dde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ddc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0202 	bic.w	r2, r2, #2
 8001dec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6899      	ldr	r1, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7e1b      	ldrb	r3, [r3, #24]
 8001df8:	005a      	lsls	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01b      	beq.n	8001e44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e1a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6859      	ldr	r1, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	3b01      	subs	r3, #1
 8001e38:	035a      	lsls	r2, r3, #13
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	e007      	b.n	8001e54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e52:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	051a      	lsls	r2, r3, #20
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6899      	ldr	r1, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e96:	025a      	lsls	r2, r3, #9
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6899      	ldr	r1, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	029a      	lsls	r2, r3, #10
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	609a      	str	r2, [r3, #8]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	40012300 	.word	0x40012300
 8001ed4:	0f000001 	.word	0x0f000001

08001ed8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0b      	blt.n	8001f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4907      	ldr	r1, [pc, #28]	; (8001f88 <__NVIC_EnableIRQ+0x38>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	; (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
         );
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002058:	d301      	bcc.n	800205e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205a:	2301      	movs	r3, #1
 800205c:	e00f      	b.n	800207e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <SysTick_Config+0x40>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002066:	210f      	movs	r1, #15
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f7ff ff8e 	bl	8001f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <SysTick_Config+0x40>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <SysTick_Config+0x40>)
 8002078:	2207      	movs	r2, #7
 800207a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	e000e010 	.word	0xe000e010

0800208c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff29 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b4:	f7ff ff3e 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 80020b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	6978      	ldr	r0, [r7, #20]
 80020c0:	f7ff ff8e 	bl	8001fe0 <NVIC_EncodePriority>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff5d 	bl	8001f8c <__NVIC_SetPriority>
}
 80020d2:	bf00      	nop
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff31 	bl	8001f50 <__NVIC_EnableIRQ>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ffa2 	bl	8002048 <SysTick_Config>
 8002104:	4603      	mov	r3, r0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff fa2a 	bl	8001574 <HAL_GetTick>
 8002120:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d008      	beq.n	8002140 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2280      	movs	r2, #128	; 0x80
 8002132:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e052      	b.n	80021e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0216 	bic.w	r2, r2, #22
 800214e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800215e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	2b00      	cmp	r3, #0
 8002166:	d103      	bne.n	8002170 <HAL_DMA_Abort+0x62>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0208 	bic.w	r2, r2, #8
 800217e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002190:	e013      	b.n	80021ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002192:	f7ff f9ef 	bl	8001574 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b05      	cmp	r3, #5
 800219e:	d90c      	bls.n	80021ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2203      	movs	r2, #3
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e015      	b.n	80021e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1e4      	bne.n	8002192 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	223f      	movs	r2, #63	; 0x3f
 80021ce:	409a      	lsls	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d004      	beq.n	800220c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2280      	movs	r2, #128	; 0x80
 8002206:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e00c      	b.n	8002226 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2205      	movs	r2, #5
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	e165      	b.n	800251c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002250:	2201      	movs	r2, #1
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	429a      	cmp	r2, r3
 800226a:	f040 8154 	bne.w	8002516 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b01      	cmp	r3, #1
 8002278:	d005      	beq.n	8002286 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002282:	2b02      	cmp	r3, #2
 8002284:	d130      	bne.n	80022e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	2203      	movs	r2, #3
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022bc:	2201      	movs	r2, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 0201 	and.w	r2, r3, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d017      	beq.n	8002324 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d123      	bne.n	8002378 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	08da      	lsrs	r2, r3, #3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3208      	adds	r2, #8
 8002338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	220f      	movs	r2, #15
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	08da      	lsrs	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3208      	adds	r2, #8
 8002372:	69b9      	ldr	r1, [r7, #24]
 8002374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0203 	and.w	r2, r3, #3
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80ae 	beq.w	8002516 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	4b5d      	ldr	r3, [pc, #372]	; (8002534 <HAL_GPIO_Init+0x300>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	4a5c      	ldr	r2, [pc, #368]	; (8002534 <HAL_GPIO_Init+0x300>)
 80023c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ca:	4b5a      	ldr	r3, [pc, #360]	; (8002534 <HAL_GPIO_Init+0x300>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023d6:	4a58      	ldr	r2, [pc, #352]	; (8002538 <HAL_GPIO_Init+0x304>)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	3302      	adds	r3, #2
 80023de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	220f      	movs	r2, #15
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4f      	ldr	r2, [pc, #316]	; (800253c <HAL_GPIO_Init+0x308>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d025      	beq.n	800244e <HAL_GPIO_Init+0x21a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4e      	ldr	r2, [pc, #312]	; (8002540 <HAL_GPIO_Init+0x30c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d01f      	beq.n	800244a <HAL_GPIO_Init+0x216>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4d      	ldr	r2, [pc, #308]	; (8002544 <HAL_GPIO_Init+0x310>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d019      	beq.n	8002446 <HAL_GPIO_Init+0x212>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4c      	ldr	r2, [pc, #304]	; (8002548 <HAL_GPIO_Init+0x314>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <HAL_GPIO_Init+0x20e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4b      	ldr	r2, [pc, #300]	; (800254c <HAL_GPIO_Init+0x318>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00d      	beq.n	800243e <HAL_GPIO_Init+0x20a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4a      	ldr	r2, [pc, #296]	; (8002550 <HAL_GPIO_Init+0x31c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d007      	beq.n	800243a <HAL_GPIO_Init+0x206>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a49      	ldr	r2, [pc, #292]	; (8002554 <HAL_GPIO_Init+0x320>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d101      	bne.n	8002436 <HAL_GPIO_Init+0x202>
 8002432:	2306      	movs	r3, #6
 8002434:	e00c      	b.n	8002450 <HAL_GPIO_Init+0x21c>
 8002436:	2307      	movs	r3, #7
 8002438:	e00a      	b.n	8002450 <HAL_GPIO_Init+0x21c>
 800243a:	2305      	movs	r3, #5
 800243c:	e008      	b.n	8002450 <HAL_GPIO_Init+0x21c>
 800243e:	2304      	movs	r3, #4
 8002440:	e006      	b.n	8002450 <HAL_GPIO_Init+0x21c>
 8002442:	2303      	movs	r3, #3
 8002444:	e004      	b.n	8002450 <HAL_GPIO_Init+0x21c>
 8002446:	2302      	movs	r3, #2
 8002448:	e002      	b.n	8002450 <HAL_GPIO_Init+0x21c>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_GPIO_Init+0x21c>
 800244e:	2300      	movs	r3, #0
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	f002 0203 	and.w	r2, r2, #3
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	4093      	lsls	r3, r2
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002460:	4935      	ldr	r1, [pc, #212]	; (8002538 <HAL_GPIO_Init+0x304>)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	3302      	adds	r3, #2
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246e:	4b3a      	ldr	r3, [pc, #232]	; (8002558 <HAL_GPIO_Init+0x324>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002492:	4a31      	ldr	r2, [pc, #196]	; (8002558 <HAL_GPIO_Init+0x324>)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002498:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <HAL_GPIO_Init+0x324>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024bc:	4a26      	ldr	r2, [pc, #152]	; (8002558 <HAL_GPIO_Init+0x324>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c2:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_GPIO_Init+0x324>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e6:	4a1c      	ldr	r2, [pc, #112]	; (8002558 <HAL_GPIO_Init+0x324>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ec:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <HAL_GPIO_Init+0x324>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002510:	4a11      	ldr	r2, [pc, #68]	; (8002558 <HAL_GPIO_Init+0x324>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3301      	adds	r3, #1
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b0f      	cmp	r3, #15
 8002520:	f67f ae96 	bls.w	8002250 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3724      	adds	r7, #36	; 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	40013800 	.word	0x40013800
 800253c:	40020000 	.word	0x40020000
 8002540:	40020400 	.word	0x40020400
 8002544:	40020800 	.word	0x40020800
 8002548:	40020c00 	.word	0x40020c00
 800254c:	40021000 	.word	0x40021000
 8002550:	40021400 	.word	0x40021400
 8002554:	40021800 	.word	0x40021800
 8002558:	40013c00 	.word	0x40013c00

0800255c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0cc      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b68      	ldr	r3, [pc, #416]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d90c      	bls.n	8002598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b65      	ldr	r3, [pc, #404]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b63      	ldr	r3, [pc, #396]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0b8      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b0:	4b59      	ldr	r3, [pc, #356]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a58      	ldr	r2, [pc, #352]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c8:	4b53      	ldr	r3, [pc, #332]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a52      	ldr	r2, [pc, #328]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	4b50      	ldr	r3, [pc, #320]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	494d      	ldr	r1, [pc, #308]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d044      	beq.n	800267c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d119      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e07f      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d003      	beq.n	800261a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002616:	2b03      	cmp	r3, #3
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261a:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e06f      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	4b3b      	ldr	r3, [pc, #236]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e067      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263a:	4b37      	ldr	r3, [pc, #220]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f023 0203 	bic.w	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4934      	ldr	r1, [pc, #208]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	4313      	orrs	r3, r2
 800264a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800264c:	f7fe ff92 	bl	8001574 <HAL_GetTick>
 8002650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	e00a      	b.n	800266a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002654:	f7fe ff8e 	bl	8001574 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e04f      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 020c 	and.w	r2, r3, #12
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	429a      	cmp	r2, r3
 800267a:	d1eb      	bne.n	8002654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800267c:	4b25      	ldr	r3, [pc, #148]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d20c      	bcs.n	80026a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b22      	ldr	r3, [pc, #136]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e032      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4916      	ldr	r1, [pc, #88]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	490e      	ldr	r1, [pc, #56]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026e2:	f000 f855 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 80026e6:	4602      	mov	r2, r0
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	490a      	ldr	r1, [pc, #40]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	5ccb      	ldrb	r3, [r1, r3]
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	4a09      	ldr	r2, [pc, #36]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe fef2 	bl	80014ec <HAL_InitTick>

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023c00 	.word	0x40023c00
 8002718:	40023800 	.word	0x40023800
 800271c:	08004a9c 	.word	0x08004a9c
 8002720:	20000000 	.word	0x20000000
 8002724:	20000004 	.word	0x20000004

08002728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_RCC_GetHCLKFreq+0x14>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000000 	.word	0x20000000

08002740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002744:	f7ff fff0 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	0a9b      	lsrs	r3, r3, #10
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4903      	ldr	r1, [pc, #12]	; (8002764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40023800 	.word	0x40023800
 8002764:	08004aac 	.word	0x08004aac

08002768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800276c:	f7ff ffdc 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	0b5b      	lsrs	r3, r3, #13
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	4903      	ldr	r1, [pc, #12]	; (800278c <HAL_RCC_GetPCLK2Freq+0x24>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002784:	4618      	mov	r0, r3
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40023800 	.word	0x40023800
 800278c:	08004aac 	.word	0x08004aac

08002790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002794:	b0ae      	sub	sp, #184	; 0xb8
 8002796:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027b6:	4bcb      	ldr	r3, [pc, #812]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b0c      	cmp	r3, #12
 80027c0:	f200 8206 	bhi.w	8002bd0 <HAL_RCC_GetSysClockFreq+0x440>
 80027c4:	a201      	add	r2, pc, #4	; (adr r2, 80027cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80027c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ca:	bf00      	nop
 80027cc:	08002801 	.word	0x08002801
 80027d0:	08002bd1 	.word	0x08002bd1
 80027d4:	08002bd1 	.word	0x08002bd1
 80027d8:	08002bd1 	.word	0x08002bd1
 80027dc:	08002809 	.word	0x08002809
 80027e0:	08002bd1 	.word	0x08002bd1
 80027e4:	08002bd1 	.word	0x08002bd1
 80027e8:	08002bd1 	.word	0x08002bd1
 80027ec:	08002811 	.word	0x08002811
 80027f0:	08002bd1 	.word	0x08002bd1
 80027f4:	08002bd1 	.word	0x08002bd1
 80027f8:	08002bd1 	.word	0x08002bd1
 80027fc:	08002a01 	.word	0x08002a01
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002800:	4bb9      	ldr	r3, [pc, #740]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002806:	e1e7      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002808:	4bb8      	ldr	r3, [pc, #736]	; (8002aec <HAL_RCC_GetSysClockFreq+0x35c>)
 800280a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800280e:	e1e3      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002810:	4bb4      	ldr	r3, [pc, #720]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800281c:	4bb1      	ldr	r3, [pc, #708]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d071      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002828:	4bae      	ldr	r3, [pc, #696]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	099b      	lsrs	r3, r3, #6
 800282e:	2200      	movs	r2, #0
 8002830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002834:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800283c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002840:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002844:	2300      	movs	r3, #0
 8002846:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800284a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800284e:	4622      	mov	r2, r4
 8002850:	462b      	mov	r3, r5
 8002852:	f04f 0000 	mov.w	r0, #0
 8002856:	f04f 0100 	mov.w	r1, #0
 800285a:	0159      	lsls	r1, r3, #5
 800285c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002860:	0150      	lsls	r0, r2, #5
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4621      	mov	r1, r4
 8002868:	1a51      	subs	r1, r2, r1
 800286a:	6439      	str	r1, [r7, #64]	; 0x40
 800286c:	4629      	mov	r1, r5
 800286e:	eb63 0301 	sbc.w	r3, r3, r1
 8002872:	647b      	str	r3, [r7, #68]	; 0x44
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002880:	4649      	mov	r1, r9
 8002882:	018b      	lsls	r3, r1, #6
 8002884:	4641      	mov	r1, r8
 8002886:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800288a:	4641      	mov	r1, r8
 800288c:	018a      	lsls	r2, r1, #6
 800288e:	4641      	mov	r1, r8
 8002890:	1a51      	subs	r1, r2, r1
 8002892:	63b9      	str	r1, [r7, #56]	; 0x38
 8002894:	4649      	mov	r1, r9
 8002896:	eb63 0301 	sbc.w	r3, r3, r1
 800289a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80028a8:	4649      	mov	r1, r9
 80028aa:	00cb      	lsls	r3, r1, #3
 80028ac:	4641      	mov	r1, r8
 80028ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028b2:	4641      	mov	r1, r8
 80028b4:	00ca      	lsls	r2, r1, #3
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	4603      	mov	r3, r0
 80028bc:	4622      	mov	r2, r4
 80028be:	189b      	adds	r3, r3, r2
 80028c0:	633b      	str	r3, [r7, #48]	; 0x30
 80028c2:	462b      	mov	r3, r5
 80028c4:	460a      	mov	r2, r1
 80028c6:	eb42 0303 	adc.w	r3, r2, r3
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028d8:	4629      	mov	r1, r5
 80028da:	024b      	lsls	r3, r1, #9
 80028dc:	4621      	mov	r1, r4
 80028de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028e2:	4621      	mov	r1, r4
 80028e4:	024a      	lsls	r2, r1, #9
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028ee:	2200      	movs	r2, #0
 80028f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80028fc:	f7fe f8fe 	bl	8000afc <__aeabi_uldivmod>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4613      	mov	r3, r2
 8002906:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800290a:	e067      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290c:	4b75      	ldr	r3, [pc, #468]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	2200      	movs	r2, #0
 8002914:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002918:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800291c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002924:	67bb      	str	r3, [r7, #120]	; 0x78
 8002926:	2300      	movs	r3, #0
 8002928:	67fb      	str	r3, [r7, #124]	; 0x7c
 800292a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800292e:	4622      	mov	r2, r4
 8002930:	462b      	mov	r3, r5
 8002932:	f04f 0000 	mov.w	r0, #0
 8002936:	f04f 0100 	mov.w	r1, #0
 800293a:	0159      	lsls	r1, r3, #5
 800293c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002940:	0150      	lsls	r0, r2, #5
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4621      	mov	r1, r4
 8002948:	1a51      	subs	r1, r2, r1
 800294a:	62b9      	str	r1, [r7, #40]	; 0x28
 800294c:	4629      	mov	r1, r5
 800294e:	eb63 0301 	sbc.w	r3, r3, r1
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002960:	4649      	mov	r1, r9
 8002962:	018b      	lsls	r3, r1, #6
 8002964:	4641      	mov	r1, r8
 8002966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800296a:	4641      	mov	r1, r8
 800296c:	018a      	lsls	r2, r1, #6
 800296e:	4641      	mov	r1, r8
 8002970:	ebb2 0a01 	subs.w	sl, r2, r1
 8002974:	4649      	mov	r1, r9
 8002976:	eb63 0b01 	sbc.w	fp, r3, r1
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002986:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800298a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800298e:	4692      	mov	sl, r2
 8002990:	469b      	mov	fp, r3
 8002992:	4623      	mov	r3, r4
 8002994:	eb1a 0303 	adds.w	r3, sl, r3
 8002998:	623b      	str	r3, [r7, #32]
 800299a:	462b      	mov	r3, r5
 800299c:	eb4b 0303 	adc.w	r3, fp, r3
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029ae:	4629      	mov	r1, r5
 80029b0:	028b      	lsls	r3, r1, #10
 80029b2:	4621      	mov	r1, r4
 80029b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029b8:	4621      	mov	r1, r4
 80029ba:	028a      	lsls	r2, r1, #10
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029c4:	2200      	movs	r2, #0
 80029c6:	673b      	str	r3, [r7, #112]	; 0x70
 80029c8:	677a      	str	r2, [r7, #116]	; 0x74
 80029ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80029ce:	f7fe f895 	bl	8000afc <__aeabi_uldivmod>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4613      	mov	r3, r2
 80029d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029dc:	4b41      	ldr	r3, [pc, #260]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	3301      	adds	r3, #1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80029ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029fe:	e0eb      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a00:	4b38      	ldr	r3, [pc, #224]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a0c:	4b35      	ldr	r3, [pc, #212]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d06b      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a18:	4b32      	ldr	r3, [pc, #200]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	099b      	lsrs	r3, r3, #6
 8002a1e:	2200      	movs	r2, #0
 8002a20:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2a:	663b      	str	r3, [r7, #96]	; 0x60
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	667b      	str	r3, [r7, #100]	; 0x64
 8002a30:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002a34:	4622      	mov	r2, r4
 8002a36:	462b      	mov	r3, r5
 8002a38:	f04f 0000 	mov.w	r0, #0
 8002a3c:	f04f 0100 	mov.w	r1, #0
 8002a40:	0159      	lsls	r1, r3, #5
 8002a42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a46:	0150      	lsls	r0, r2, #5
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	1a51      	subs	r1, r2, r1
 8002a50:	61b9      	str	r1, [r7, #24]
 8002a52:	4629      	mov	r1, r5
 8002a54:	eb63 0301 	sbc.w	r3, r3, r1
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a66:	4659      	mov	r1, fp
 8002a68:	018b      	lsls	r3, r1, #6
 8002a6a:	4651      	mov	r1, sl
 8002a6c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a70:	4651      	mov	r1, sl
 8002a72:	018a      	lsls	r2, r1, #6
 8002a74:	4651      	mov	r1, sl
 8002a76:	ebb2 0801 	subs.w	r8, r2, r1
 8002a7a:	4659      	mov	r1, fp
 8002a7c:	eb63 0901 	sbc.w	r9, r3, r1
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a94:	4690      	mov	r8, r2
 8002a96:	4699      	mov	r9, r3
 8002a98:	4623      	mov	r3, r4
 8002a9a:	eb18 0303 	adds.w	r3, r8, r3
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	462b      	mov	r3, r5
 8002aa2:	eb49 0303 	adc.w	r3, r9, r3
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	024b      	lsls	r3, r1, #9
 8002ab8:	4621      	mov	r1, r4
 8002aba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002abe:	4621      	mov	r1, r4
 8002ac0:	024a      	lsls	r2, r1, #9
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002aca:	2200      	movs	r2, #0
 8002acc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ace:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ad0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ad4:	f7fe f812 	bl	8000afc <__aeabi_uldivmod>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4613      	mov	r3, r2
 8002ade:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ae2:	e065      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x420>
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	00f42400 	.word	0x00f42400
 8002aec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af0:	4b3d      	ldr	r3, [pc, #244]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	099b      	lsrs	r3, r3, #6
 8002af6:	2200      	movs	r2, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	4611      	mov	r1, r2
 8002afc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b00:	653b      	str	r3, [r7, #80]	; 0x50
 8002b02:	2300      	movs	r3, #0
 8002b04:	657b      	str	r3, [r7, #84]	; 0x54
 8002b06:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002b0a:	4642      	mov	r2, r8
 8002b0c:	464b      	mov	r3, r9
 8002b0e:	f04f 0000 	mov.w	r0, #0
 8002b12:	f04f 0100 	mov.w	r1, #0
 8002b16:	0159      	lsls	r1, r3, #5
 8002b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b1c:	0150      	lsls	r0, r2, #5
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4641      	mov	r1, r8
 8002b24:	1a51      	subs	r1, r2, r1
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	4649      	mov	r1, r9
 8002b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b3c:	4659      	mov	r1, fp
 8002b3e:	018b      	lsls	r3, r1, #6
 8002b40:	4651      	mov	r1, sl
 8002b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b46:	4651      	mov	r1, sl
 8002b48:	018a      	lsls	r2, r1, #6
 8002b4a:	4651      	mov	r1, sl
 8002b4c:	1a54      	subs	r4, r2, r1
 8002b4e:	4659      	mov	r1, fp
 8002b50:	eb63 0501 	sbc.w	r5, r3, r1
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	00eb      	lsls	r3, r5, #3
 8002b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b62:	00e2      	lsls	r2, r4, #3
 8002b64:	4614      	mov	r4, r2
 8002b66:	461d      	mov	r5, r3
 8002b68:	4643      	mov	r3, r8
 8002b6a:	18e3      	adds	r3, r4, r3
 8002b6c:	603b      	str	r3, [r7, #0]
 8002b6e:	464b      	mov	r3, r9
 8002b70:	eb45 0303 	adc.w	r3, r5, r3
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b82:	4629      	mov	r1, r5
 8002b84:	028b      	lsls	r3, r1, #10
 8002b86:	4621      	mov	r1, r4
 8002b88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	028a      	lsls	r2, r1, #10
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b98:	2200      	movs	r2, #0
 8002b9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b9c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002b9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ba2:	f7fd ffab 	bl	8000afc <__aeabi_uldivmod>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4613      	mov	r3, r2
 8002bac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	0f1b      	lsrs	r3, r3, #28
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002bbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bce:	e003      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_RCC_GetSysClockFreq+0x45c>)
 8002bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	37b8      	adds	r7, #184	; 0xb8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	00f42400 	.word	0x00f42400

08002bf0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e28d      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8083 	beq.w	8002d16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c10:	4b94      	ldr	r3, [pc, #592]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d019      	beq.n	8002c50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c1c:	4b91      	ldr	r3, [pc, #580]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c28:	4b8e      	ldr	r3, [pc, #568]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c34:	d00c      	beq.n	8002c50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c36:	4b8b      	ldr	r3, [pc, #556]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c3e:	2b0c      	cmp	r3, #12
 8002c40:	d112      	bne.n	8002c68 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c42:	4b88      	ldr	r3, [pc, #544]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c4e:	d10b      	bne.n	8002c68 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c50:	4b84      	ldr	r3, [pc, #528]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d05b      	beq.n	8002d14 <HAL_RCC_OscConfig+0x124>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d157      	bne.n	8002d14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e25a      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c70:	d106      	bne.n	8002c80 <HAL_RCC_OscConfig+0x90>
 8002c72:	4b7c      	ldr	r3, [pc, #496]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a7b      	ldr	r2, [pc, #492]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e01d      	b.n	8002cbc <HAL_RCC_OscConfig+0xcc>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0xb4>
 8002c8a:	4b76      	ldr	r3, [pc, #472]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a75      	ldr	r2, [pc, #468]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b73      	ldr	r3, [pc, #460]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a72      	ldr	r2, [pc, #456]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCC_OscConfig+0xcc>
 8002ca4:	4b6f      	ldr	r3, [pc, #444]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a6e      	ldr	r2, [pc, #440]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4b6c      	ldr	r3, [pc, #432]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a6b      	ldr	r2, [pc, #428]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d013      	beq.n	8002cec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fc56 	bl	8001574 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7fe fc52 	bl	8001574 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	; 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e21f      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	4b61      	ldr	r3, [pc, #388]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0xdc>
 8002cea:	e014      	b.n	8002d16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe fc42 	bl	8001574 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf4:	f7fe fc3e 	bl	8001574 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	; 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e20b      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d06:	4b57      	ldr	r3, [pc, #348]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x104>
 8002d12:	e000      	b.n	8002d16 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d06f      	beq.n	8002e02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d22:	4b50      	ldr	r3, [pc, #320]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d017      	beq.n	8002d5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d2e:	4b4d      	ldr	r3, [pc, #308]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d105      	bne.n	8002d46 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d3a:	4b4a      	ldr	r3, [pc, #296]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d46:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	d11c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d52:	4b44      	ldr	r3, [pc, #272]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d116      	bne.n	8002d8c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5e:	4b41      	ldr	r3, [pc, #260]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_RCC_OscConfig+0x186>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d001      	beq.n	8002d76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e1d3      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d76:	4b3b      	ldr	r3, [pc, #236]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4937      	ldr	r1, [pc, #220]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8a:	e03a      	b.n	8002e02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d94:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <HAL_RCC_OscConfig+0x278>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7fe fbeb 	bl	8001574 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da2:	f7fe fbe7 	bl	8001574 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e1b4      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db4:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc0:	4b28      	ldr	r3, [pc, #160]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4925      	ldr	r1, [pc, #148]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]
 8002dd4:	e015      	b.n	8002e02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd6:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <HAL_RCC_OscConfig+0x278>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fbca 	bl	8001574 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de4:	f7fe fbc6 	bl	8001574 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e193      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df6:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d036      	beq.n	8002e7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e16:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <HAL_RCC_OscConfig+0x27c>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7fe fbaa 	bl	8001574 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e24:	f7fe fba6 	bl	8001574 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e173      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x234>
 8002e42:	e01b      	b.n	8002e7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <HAL_RCC_OscConfig+0x27c>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fb93 	bl	8001574 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	e00e      	b.n	8002e70 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e52:	f7fe fb8f 	bl	8001574 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d907      	bls.n	8002e70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e15c      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
 8002e64:	40023800 	.word	0x40023800
 8002e68:	42470000 	.word	0x42470000
 8002e6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e70:	4b8a      	ldr	r3, [pc, #552]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1ea      	bne.n	8002e52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 8097 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8e:	4b83      	ldr	r3, [pc, #524]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10f      	bne.n	8002eba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	4b7f      	ldr	r3, [pc, #508]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	4a7e      	ldr	r2, [pc, #504]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eaa:	4b7c      	ldr	r3, [pc, #496]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eba:	4b79      	ldr	r3, [pc, #484]	; (80030a0 <HAL_RCC_OscConfig+0x4b0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d118      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec6:	4b76      	ldr	r3, [pc, #472]	; (80030a0 <HAL_RCC_OscConfig+0x4b0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a75      	ldr	r2, [pc, #468]	; (80030a0 <HAL_RCC_OscConfig+0x4b0>)
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed2:	f7fe fb4f 	bl	8001574 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eda:	f7fe fb4b 	bl	8001574 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e118      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eec:	4b6c      	ldr	r3, [pc, #432]	; (80030a0 <HAL_RCC_OscConfig+0x4b0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d106      	bne.n	8002f0e <HAL_RCC_OscConfig+0x31e>
 8002f00:	4b66      	ldr	r3, [pc, #408]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	4a65      	ldr	r2, [pc, #404]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0c:	e01c      	b.n	8002f48 <HAL_RCC_OscConfig+0x358>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b05      	cmp	r3, #5
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x340>
 8002f16:	4b61      	ldr	r3, [pc, #388]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1a:	4a60      	ldr	r2, [pc, #384]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f1c:	f043 0304 	orr.w	r3, r3, #4
 8002f20:	6713      	str	r3, [r2, #112]	; 0x70
 8002f22:	4b5e      	ldr	r3, [pc, #376]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	4a5d      	ldr	r2, [pc, #372]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2e:	e00b      	b.n	8002f48 <HAL_RCC_OscConfig+0x358>
 8002f30:	4b5a      	ldr	r3, [pc, #360]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	4a59      	ldr	r2, [pc, #356]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3c:	4b57      	ldr	r3, [pc, #348]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	4a56      	ldr	r2, [pc, #344]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f42:	f023 0304 	bic.w	r3, r3, #4
 8002f46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d015      	beq.n	8002f7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fe fb10 	bl	8001574 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f58:	f7fe fb0c 	bl	8001574 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e0d7      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6e:	4b4b      	ldr	r3, [pc, #300]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0ee      	beq.n	8002f58 <HAL_RCC_OscConfig+0x368>
 8002f7a:	e014      	b.n	8002fa6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7c:	f7fe fafa 	bl	8001574 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f82:	e00a      	b.n	8002f9a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f84:	f7fe faf6 	bl	8001574 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e0c1      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9a:	4b40      	ldr	r3, [pc, #256]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1ee      	bne.n	8002f84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fa6:	7dfb      	ldrb	r3, [r7, #23]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fac:	4b3b      	ldr	r3, [pc, #236]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	4a3a      	ldr	r2, [pc, #232]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80ad 	beq.w	800311c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fc2:	4b36      	ldr	r3, [pc, #216]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d060      	beq.n	8003090 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d145      	bne.n	8003062 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd6:	4b33      	ldr	r3, [pc, #204]	; (80030a4 <HAL_RCC_OscConfig+0x4b4>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe faca 	bl	8001574 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fe fac6 	bl	8001574 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e093      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff6:	4b29      	ldr	r3, [pc, #164]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	019b      	lsls	r3, r3, #6
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	3b01      	subs	r3, #1
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	061b      	lsls	r3, r3, #24
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	071b      	lsls	r3, r3, #28
 800302e:	491b      	ldr	r1, [pc, #108]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8003030:	4313      	orrs	r3, r2
 8003032:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003034:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_RCC_OscConfig+0x4b4>)
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7fe fa9b 	bl	8001574 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003042:	f7fe fa97 	bl	8001574 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e064      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003054:	4b11      	ldr	r3, [pc, #68]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x452>
 8003060:	e05c      	b.n	800311c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003062:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <HAL_RCC_OscConfig+0x4b4>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe fa84 	bl	8001574 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003070:	f7fe fa80 	bl	8001574 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e04d      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_RCC_OscConfig+0x4ac>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x480>
 800308e:	e045      	b.n	800311c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d107      	bne.n	80030a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e040      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
 800309c:	40023800 	.word	0x40023800
 80030a0:	40007000 	.word	0x40007000
 80030a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030a8:	4b1f      	ldr	r3, [pc, #124]	; (8003128 <HAL_RCC_OscConfig+0x538>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d030      	beq.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d129      	bne.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d122      	bne.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030d8:	4013      	ands	r3, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d119      	bne.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	3b01      	subs	r3, #1
 80030f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d10f      	bne.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d107      	bne.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800

0800312c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e042      	b.n	80031c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fe f8a8 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2224      	movs	r2, #36	; 0x24
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800316e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fd69 	bl	8003c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08a      	sub	sp, #40	; 0x28
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	4613      	mov	r3, r2
 80031da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d175      	bne.n	80032d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <HAL_UART_Transmit+0x2c>
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e06e      	b.n	80032da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2221      	movs	r2, #33	; 0x21
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800320a:	f7fe f9b3 	bl	8001574 <HAL_GetTick>
 800320e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	88fa      	ldrh	r2, [r7, #6]
 8003214:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	88fa      	ldrh	r2, [r7, #6]
 800321a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003224:	d108      	bne.n	8003238 <HAL_UART_Transmit+0x6c>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d104      	bne.n	8003238 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	e003      	b.n	8003240 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800323c:	2300      	movs	r3, #0
 800323e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003240:	e02e      	b.n	80032a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2200      	movs	r2, #0
 800324a:	2180      	movs	r1, #128	; 0x80
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fb05 	bl	800385c <UART_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e03a      	b.n	80032da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10b      	bne.n	8003282 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003278:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	3302      	adds	r3, #2
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	e007      	b.n	8003292 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	3301      	adds	r3, #1
 8003290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1cb      	bne.n	8003242 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2200      	movs	r2, #0
 80032b2:	2140      	movs	r1, #64	; 0x40
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 fad1 	bl	800385c <UART_WaitOnFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e006      	b.n	80032da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	e000      	b.n	80032da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
  }
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3720      	adds	r7, #32
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b0ba      	sub	sp, #232	; 0xe8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800330a:	2300      	movs	r3, #0
 800330c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003310:	2300      	movs	r3, #0
 8003312:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10f      	bne.n	800334a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800332a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <HAL_UART_IRQHandler+0x66>
 8003336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fbc2 	bl	8003acc <UART_Receive_IT>
      return;
 8003348:	e25b      	b.n	8003802 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800334a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 80de 	beq.w	8003510 <HAL_UART_IRQHandler+0x22c>
 8003354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d106      	bne.n	800336e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003364:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80d1 	beq.w	8003510 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800336e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <HAL_UART_IRQHandler+0xae>
 800337a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800337e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	f043 0201 	orr.w	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00b      	beq.n	80033b6 <HAL_UART_IRQHandler+0xd2>
 800339e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	f043 0202 	orr.w	r2, r3, #2
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_UART_IRQHandler+0xf6>
 80033c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	f043 0204 	orr.w	r2, r3, #4
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80033da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d011      	beq.n	800340a <HAL_UART_IRQHandler+0x126>
 80033e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d105      	bne.n	80033fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80033f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f043 0208 	orr.w	r2, r3, #8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 81f2 	beq.w	80037f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_UART_IRQHandler+0x14e>
 8003420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fb4d 	bl	8003acc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343c:	2b40      	cmp	r3, #64	; 0x40
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d103      	bne.n	800345e <HAL_UART_IRQHandler+0x17a>
 8003456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800345a:	2b00      	cmp	r3, #0
 800345c:	d04f      	beq.n	80034fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fa55 	bl	800390e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	d141      	bne.n	80034f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3314      	adds	r3, #20
 8003478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003480:	e853 3f00 	ldrex	r3, [r3]
 8003484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800348c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3314      	adds	r3, #20
 800349a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800349e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1d9      	bne.n	8003472 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d013      	beq.n	80034ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ca:	4a7e      	ldr	r2, [pc, #504]	; (80036c4 <HAL_UART_IRQHandler+0x3e0>)
 80034cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe fe8b 	bl	80021ee <HAL_DMA_Abort_IT>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d016      	beq.n	800350c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034e8:	4610      	mov	r0, r2
 80034ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ec:	e00e      	b.n	800350c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f99e 	bl	8003830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f4:	e00a      	b.n	800350c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f99a 	bl	8003830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034fc:	e006      	b.n	800350c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f996 	bl	8003830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800350a:	e175      	b.n	80037f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350c:	bf00      	nop
    return;
 800350e:	e173      	b.n	80037f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	2b01      	cmp	r3, #1
 8003516:	f040 814f 	bne.w	80037b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800351a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800351e:	f003 0310 	and.w	r3, r3, #16
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 8148 	beq.w	80037b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 8141 	beq.w	80037b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60bb      	str	r3, [r7, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003556:	2b40      	cmp	r3, #64	; 0x40
 8003558:	f040 80b6 	bne.w	80036c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003568:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8145 	beq.w	80037fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800357a:	429a      	cmp	r2, r3
 800357c:	f080 813e 	bcs.w	80037fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003586:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003592:	f000 8088 	beq.w	80036a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	330c      	adds	r3, #12
 800359c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035a4:	e853 3f00 	ldrex	r3, [r3]
 80035a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	330c      	adds	r3, #12
 80035be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80035c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80035ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80035d2:	e841 2300 	strex	r3, r2, [r1]
 80035d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80035da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1d9      	bne.n	8003596 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3314      	adds	r3, #20
 80035e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ec:	e853 3f00 	ldrex	r3, [r3]
 80035f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80035f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035f4:	f023 0301 	bic.w	r3, r3, #1
 80035f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3314      	adds	r3, #20
 8003602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003606:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800360a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800360e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003612:	e841 2300 	strex	r3, r2, [r1]
 8003616:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1e1      	bne.n	80035e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3314      	adds	r3, #20
 8003624:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003628:	e853 3f00 	ldrex	r3, [r3]
 800362c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800362e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3314      	adds	r3, #20
 800363e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003642:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003644:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800364a:	e841 2300 	strex	r3, r2, [r1]
 800364e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1e3      	bne.n	800361e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	330c      	adds	r3, #12
 800366a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800366e:	e853 3f00 	ldrex	r3, [r3]
 8003672:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003676:	f023 0310 	bic.w	r3, r3, #16
 800367a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	330c      	adds	r3, #12
 8003684:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003688:	65ba      	str	r2, [r7, #88]	; 0x58
 800368a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800368e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e3      	bne.n	8003664 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fe fd34 	bl	800210e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2202      	movs	r2, #2
 80036aa:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	4619      	mov	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f8c1 	bl	8003844 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036c2:	e09b      	b.n	80037fc <HAL_UART_IRQHandler+0x518>
 80036c4:	080039d5 	.word	0x080039d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 808e 	beq.w	8003800 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80036e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 8089 	beq.w	8003800 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	330c      	adds	r3, #12
 80036f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f8:	e853 3f00 	ldrex	r3, [r3]
 80036fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003700:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003704:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	330c      	adds	r3, #12
 800370e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003712:	647a      	str	r2, [r7, #68]	; 0x44
 8003714:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e3      	bne.n	80036ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3314      	adds	r3, #20
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	623b      	str	r3, [r7, #32]
   return(result);
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3314      	adds	r3, #20
 8003746:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800374a:	633a      	str	r2, [r7, #48]	; 0x30
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e3      	bne.n	8003726 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	330c      	adds	r3, #12
 8003772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	e853 3f00 	ldrex	r3, [r3]
 800377a:	60fb      	str	r3, [r7, #12]
   return(result);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0310 	bic.w	r3, r3, #16
 8003782:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	330c      	adds	r3, #12
 800378c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003790:	61fa      	str	r2, [r7, #28]
 8003792:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	69b9      	ldr	r1, [r7, #24]
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	617b      	str	r3, [r7, #20]
   return(result);
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e3      	bne.n	800376c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037ae:	4619      	mov	r1, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f847 	bl	8003844 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037b6:	e023      	b.n	8003800 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d009      	beq.n	80037d8 <HAL_UART_IRQHandler+0x4f4>
 80037c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f913 	bl	80039fc <UART_Transmit_IT>
    return;
 80037d6:	e014      	b.n	8003802 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00e      	beq.n	8003802 <HAL_UART_IRQHandler+0x51e>
 80037e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f953 	bl	8003a9c <UART_EndTransmit_IT>
    return;
 80037f6:	e004      	b.n	8003802 <HAL_UART_IRQHandler+0x51e>
    return;
 80037f8:	bf00      	nop
 80037fa:	e002      	b.n	8003802 <HAL_UART_IRQHandler+0x51e>
      return;
 80037fc:	bf00      	nop
 80037fe:	e000      	b.n	8003802 <HAL_UART_IRQHandler+0x51e>
      return;
 8003800:	bf00      	nop
  }
}
 8003802:	37e8      	adds	r7, #232	; 0xe8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	4613      	mov	r3, r2
 800386a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386c:	e03b      	b.n	80038e6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d037      	beq.n	80038e6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003876:	f7fd fe7d 	bl	8001574 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	6a3a      	ldr	r2, [r7, #32]
 8003882:	429a      	cmp	r2, r3
 8003884:	d302      	bcc.n	800388c <UART_WaitOnFlagUntilTimeout+0x30>
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e03a      	b.n	8003906 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	d023      	beq.n	80038e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b80      	cmp	r3, #128	; 0x80
 80038a2:	d020      	beq.n	80038e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d01d      	beq.n	80038e6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d116      	bne.n	80038e6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f81d 	bl	800390e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2208      	movs	r2, #8
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e00f      	b.n	8003906 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4013      	ands	r3, r2
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	bf0c      	ite	eq
 80038f6:	2301      	moveq	r3, #1
 80038f8:	2300      	movne	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	461a      	mov	r2, r3
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	429a      	cmp	r2, r3
 8003902:	d0b4      	beq.n	800386e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800390e:	b480      	push	{r7}
 8003910:	b095      	sub	sp, #84	; 0x54
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	330c      	adds	r3, #12
 800391c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800392c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003936:	643a      	str	r2, [r7, #64]	; 0x40
 8003938:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800393c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e5      	bne.n	8003916 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	61fb      	str	r3, [r7, #28]
   return(result);
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	64bb      	str	r3, [r7, #72]	; 0x48
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3314      	adds	r3, #20
 8003968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800396a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e5      	bne.n	800394a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	2b01      	cmp	r3, #1
 8003984:	d119      	bne.n	80039ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	330c      	adds	r3, #12
 800398c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	60bb      	str	r3, [r7, #8]
   return(result);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f023 0310 	bic.w	r3, r3, #16
 800399c:	647b      	str	r3, [r7, #68]	; 0x44
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039a6:	61ba      	str	r2, [r7, #24]
 80039a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6979      	ldr	r1, [r7, #20]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	613b      	str	r3, [r7, #16]
   return(result);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e5      	bne.n	8003986 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039c8:	bf00      	nop
 80039ca:	3754      	adds	r7, #84	; 0x54
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff ff1e 	bl	8003830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b21      	cmp	r3, #33	; 0x21
 8003a0e:	d13e      	bne.n	8003a8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a18:	d114      	bne.n	8003a44 <UART_Transmit_IT+0x48>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d110      	bne.n	8003a44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	1c9a      	adds	r2, r3, #2
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	621a      	str	r2, [r3, #32]
 8003a42:	e008      	b.n	8003a56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	1c59      	adds	r1, r3, #1
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6211      	str	r1, [r2, #32]
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	4619      	mov	r1, r3
 8003a64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10f      	bne.n	8003a8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e000      	b.n	8003a90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff fea3 	bl	8003808 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08c      	sub	sp, #48	; 0x30
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b22      	cmp	r3, #34	; 0x22
 8003ade:	f040 80ae 	bne.w	8003c3e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aea:	d117      	bne.n	8003b1c <UART_Receive_IT+0x50>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d113      	bne.n	8003b1c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	1c9a      	adds	r2, r3, #2
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28
 8003b1a:	e026      	b.n	8003b6a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2e:	d007      	beq.n	8003b40 <UART_Receive_IT+0x74>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <UART_Receive_IT+0x82>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d106      	bne.n	8003b4e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4a:	701a      	strb	r2, [r3, #0]
 8003b4c:	e008      	b.n	8003b60 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	4619      	mov	r1, r3
 8003b78:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d15d      	bne.n	8003c3a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0220 	bic.w	r2, r2, #32
 8003b8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0201 	bic.w	r2, r2, #1
 8003bac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d135      	bne.n	8003c30 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f023 0310 	bic.w	r3, r3, #16
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	623a      	str	r2, [r7, #32]
 8003bec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	69f9      	ldr	r1, [r7, #28]
 8003bf0:	6a3a      	ldr	r2, [r7, #32]
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e5      	bne.n	8003bca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d10a      	bne.n	8003c22 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c26:	4619      	mov	r1, r3
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff fe0b 	bl	8003844 <HAL_UARTEx_RxEventCallback>
 8003c2e:	e002      	b.n	8003c36 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff fdf3 	bl	800381c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e002      	b.n	8003c40 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	e000      	b.n	8003c40 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c3e:	2302      	movs	r3, #2
  }
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3730      	adds	r7, #48	; 0x30
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c4c:	b0c0      	sub	sp, #256	; 0x100
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c64:	68d9      	ldr	r1, [r3, #12]
 8003c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	ea40 0301 	orr.w	r3, r0, r1
 8003c70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ca0:	f021 010c 	bic.w	r1, r1, #12
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc2:	6999      	ldr	r1, [r3, #24]
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	ea40 0301 	orr.w	r3, r0, r1
 8003cce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4b8f      	ldr	r3, [pc, #572]	; (8003f14 <UART_SetConfig+0x2cc>)
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d005      	beq.n	8003ce8 <UART_SetConfig+0xa0>
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	4b8d      	ldr	r3, [pc, #564]	; (8003f18 <UART_SetConfig+0x2d0>)
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d104      	bne.n	8003cf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ce8:	f7fe fd3e 	bl	8002768 <HAL_RCC_GetPCLK2Freq>
 8003cec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cf0:	e003      	b.n	8003cfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cf2:	f7fe fd25 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
 8003cf6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d04:	f040 810c 	bne.w	8003f20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d1a:	4622      	mov	r2, r4
 8003d1c:	462b      	mov	r3, r5
 8003d1e:	1891      	adds	r1, r2, r2
 8003d20:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d22:	415b      	adcs	r3, r3
 8003d24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	eb12 0801 	adds.w	r8, r2, r1
 8003d30:	4629      	mov	r1, r5
 8003d32:	eb43 0901 	adc.w	r9, r3, r1
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d4a:	4690      	mov	r8, r2
 8003d4c:	4699      	mov	r9, r3
 8003d4e:	4623      	mov	r3, r4
 8003d50:	eb18 0303 	adds.w	r3, r8, r3
 8003d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d58:	462b      	mov	r3, r5
 8003d5a:	eb49 0303 	adc.w	r3, r9, r3
 8003d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d76:	460b      	mov	r3, r1
 8003d78:	18db      	adds	r3, r3, r3
 8003d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	eb42 0303 	adc.w	r3, r2, r3
 8003d82:	657b      	str	r3, [r7, #84]	; 0x54
 8003d84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d8c:	f7fc feb6 	bl	8000afc <__aeabi_uldivmod>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4b61      	ldr	r3, [pc, #388]	; (8003f1c <UART_SetConfig+0x2d4>)
 8003d96:	fba3 2302 	umull	r2, r3, r3, r2
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	011c      	lsls	r4, r3, #4
 8003d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003da8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003dac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003db0:	4642      	mov	r2, r8
 8003db2:	464b      	mov	r3, r9
 8003db4:	1891      	adds	r1, r2, r2
 8003db6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003db8:	415b      	adcs	r3, r3
 8003dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	eb12 0a01 	adds.w	sl, r2, r1
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	eb43 0b01 	adc.w	fp, r3, r1
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003de0:	4692      	mov	sl, r2
 8003de2:	469b      	mov	fp, r3
 8003de4:	4643      	mov	r3, r8
 8003de6:	eb1a 0303 	adds.w	r3, sl, r3
 8003dea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dee:	464b      	mov	r3, r9
 8003df0:	eb4b 0303 	adc.w	r3, fp, r3
 8003df4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	18db      	adds	r3, r3, r3
 8003e10:	643b      	str	r3, [r7, #64]	; 0x40
 8003e12:	4613      	mov	r3, r2
 8003e14:	eb42 0303 	adc.w	r3, r2, r3
 8003e18:	647b      	str	r3, [r7, #68]	; 0x44
 8003e1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e22:	f7fc fe6b 	bl	8000afc <__aeabi_uldivmod>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <UART_SetConfig+0x2d4>)
 8003e2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	2264      	movs	r2, #100	; 0x64
 8003e36:	fb02 f303 	mul.w	r3, r2, r3
 8003e3a:	1acb      	subs	r3, r1, r3
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e42:	4b36      	ldr	r3, [pc, #216]	; (8003f1c <UART_SetConfig+0x2d4>)
 8003e44:	fba3 2302 	umull	r2, r3, r3, r2
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e50:	441c      	add	r4, r3
 8003e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e64:	4642      	mov	r2, r8
 8003e66:	464b      	mov	r3, r9
 8003e68:	1891      	adds	r1, r2, r2
 8003e6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e6c:	415b      	adcs	r3, r3
 8003e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e74:	4641      	mov	r1, r8
 8003e76:	1851      	adds	r1, r2, r1
 8003e78:	6339      	str	r1, [r7, #48]	; 0x30
 8003e7a:	4649      	mov	r1, r9
 8003e7c:	414b      	adcs	r3, r1
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e8c:	4659      	mov	r1, fp
 8003e8e:	00cb      	lsls	r3, r1, #3
 8003e90:	4651      	mov	r1, sl
 8003e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e96:	4651      	mov	r1, sl
 8003e98:	00ca      	lsls	r2, r1, #3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4642      	mov	r2, r8
 8003ea2:	189b      	adds	r3, r3, r2
 8003ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ea8:	464b      	mov	r3, r9
 8003eaa:	460a      	mov	r2, r1
 8003eac:	eb42 0303 	adc.w	r3, r2, r3
 8003eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ec0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ec4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ec8:	460b      	mov	r3, r1
 8003eca:	18db      	adds	r3, r3, r3
 8003ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ece:	4613      	mov	r3, r2
 8003ed0:	eb42 0303 	adc.w	r3, r2, r3
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003eda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ede:	f7fc fe0d 	bl	8000afc <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <UART_SetConfig+0x2d4>)
 8003ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	2164      	movs	r1, #100	; 0x64
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	3332      	adds	r3, #50	; 0x32
 8003efa:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <UART_SetConfig+0x2d4>)
 8003efc:	fba2 2303 	umull	r2, r3, r2, r3
 8003f00:	095b      	lsrs	r3, r3, #5
 8003f02:	f003 0207 	and.w	r2, r3, #7
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4422      	add	r2, r4
 8003f0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f10:	e106      	b.n	8004120 <UART_SetConfig+0x4d8>
 8003f12:	bf00      	nop
 8003f14:	40011000 	.word	0x40011000
 8003f18:	40011400 	.word	0x40011400
 8003f1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f24:	2200      	movs	r2, #0
 8003f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f32:	4642      	mov	r2, r8
 8003f34:	464b      	mov	r3, r9
 8003f36:	1891      	adds	r1, r2, r2
 8003f38:	6239      	str	r1, [r7, #32]
 8003f3a:	415b      	adcs	r3, r3
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f42:	4641      	mov	r1, r8
 8003f44:	1854      	adds	r4, r2, r1
 8003f46:	4649      	mov	r1, r9
 8003f48:	eb43 0501 	adc.w	r5, r3, r1
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	00eb      	lsls	r3, r5, #3
 8003f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f5a:	00e2      	lsls	r2, r4, #3
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	461d      	mov	r5, r3
 8003f60:	4643      	mov	r3, r8
 8003f62:	18e3      	adds	r3, r4, r3
 8003f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f68:	464b      	mov	r3, r9
 8003f6a:	eb45 0303 	adc.w	r3, r5, r3
 8003f6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f8e:	4629      	mov	r1, r5
 8003f90:	008b      	lsls	r3, r1, #2
 8003f92:	4621      	mov	r1, r4
 8003f94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f98:	4621      	mov	r1, r4
 8003f9a:	008a      	lsls	r2, r1, #2
 8003f9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fa0:	f7fc fdac 	bl	8000afc <__aeabi_uldivmod>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4b60      	ldr	r3, [pc, #384]	; (800412c <UART_SetConfig+0x4e4>)
 8003faa:	fba3 2302 	umull	r2, r3, r3, r2
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	011c      	lsls	r4, r3, #4
 8003fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	1891      	adds	r1, r2, r2
 8003fca:	61b9      	str	r1, [r7, #24]
 8003fcc:	415b      	adcs	r3, r3
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	1851      	adds	r1, r2, r1
 8003fd8:	6139      	str	r1, [r7, #16]
 8003fda:	4649      	mov	r1, r9
 8003fdc:	414b      	adcs	r3, r1
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fec:	4659      	mov	r1, fp
 8003fee:	00cb      	lsls	r3, r1, #3
 8003ff0:	4651      	mov	r1, sl
 8003ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ff6:	4651      	mov	r1, sl
 8003ff8:	00ca      	lsls	r2, r1, #3
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4603      	mov	r3, r0
 8004000:	4642      	mov	r2, r8
 8004002:	189b      	adds	r3, r3, r2
 8004004:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004008:	464b      	mov	r3, r9
 800400a:	460a      	mov	r2, r1
 800400c:	eb42 0303 	adc.w	r3, r2, r3
 8004010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	67bb      	str	r3, [r7, #120]	; 0x78
 800401e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800402c:	4649      	mov	r1, r9
 800402e:	008b      	lsls	r3, r1, #2
 8004030:	4641      	mov	r1, r8
 8004032:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004036:	4641      	mov	r1, r8
 8004038:	008a      	lsls	r2, r1, #2
 800403a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800403e:	f7fc fd5d 	bl	8000afc <__aeabi_uldivmod>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4611      	mov	r1, r2
 8004048:	4b38      	ldr	r3, [pc, #224]	; (800412c <UART_SetConfig+0x4e4>)
 800404a:	fba3 2301 	umull	r2, r3, r3, r1
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	2264      	movs	r2, #100	; 0x64
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	1acb      	subs	r3, r1, r3
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	3332      	adds	r3, #50	; 0x32
 800405c:	4a33      	ldr	r2, [pc, #204]	; (800412c <UART_SetConfig+0x4e4>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004068:	441c      	add	r4, r3
 800406a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800406e:	2200      	movs	r2, #0
 8004070:	673b      	str	r3, [r7, #112]	; 0x70
 8004072:	677a      	str	r2, [r7, #116]	; 0x74
 8004074:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004078:	4642      	mov	r2, r8
 800407a:	464b      	mov	r3, r9
 800407c:	1891      	adds	r1, r2, r2
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	415b      	adcs	r3, r3
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004088:	4641      	mov	r1, r8
 800408a:	1851      	adds	r1, r2, r1
 800408c:	6039      	str	r1, [r7, #0]
 800408e:	4649      	mov	r1, r9
 8004090:	414b      	adcs	r3, r1
 8004092:	607b      	str	r3, [r7, #4]
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040a0:	4659      	mov	r1, fp
 80040a2:	00cb      	lsls	r3, r1, #3
 80040a4:	4651      	mov	r1, sl
 80040a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040aa:	4651      	mov	r1, sl
 80040ac:	00ca      	lsls	r2, r1, #3
 80040ae:	4610      	mov	r0, r2
 80040b0:	4619      	mov	r1, r3
 80040b2:	4603      	mov	r3, r0
 80040b4:	4642      	mov	r2, r8
 80040b6:	189b      	adds	r3, r3, r2
 80040b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80040ba:	464b      	mov	r3, r9
 80040bc:	460a      	mov	r2, r1
 80040be:	eb42 0303 	adc.w	r3, r2, r3
 80040c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	663b      	str	r3, [r7, #96]	; 0x60
 80040ce:	667a      	str	r2, [r7, #100]	; 0x64
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040dc:	4649      	mov	r1, r9
 80040de:	008b      	lsls	r3, r1, #2
 80040e0:	4641      	mov	r1, r8
 80040e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040e6:	4641      	mov	r1, r8
 80040e8:	008a      	lsls	r2, r1, #2
 80040ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040ee:	f7fc fd05 	bl	8000afc <__aeabi_uldivmod>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <UART_SetConfig+0x4e4>)
 80040f8:	fba3 1302 	umull	r1, r3, r3, r2
 80040fc:	095b      	lsrs	r3, r3, #5
 80040fe:	2164      	movs	r1, #100	; 0x64
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	3332      	adds	r3, #50	; 0x32
 800410a:	4a08      	ldr	r2, [pc, #32]	; (800412c <UART_SetConfig+0x4e4>)
 800410c:	fba2 2303 	umull	r2, r3, r2, r3
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	f003 020f 	and.w	r2, r3, #15
 8004116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4422      	add	r2, r4
 800411e:	609a      	str	r2, [r3, #8]
}
 8004120:	bf00      	nop
 8004122:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004126:	46bd      	mov	sp, r7
 8004128:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412c:	51eb851f 	.word	0x51eb851f

08004130 <siprintf>:
 8004130:	b40e      	push	{r1, r2, r3}
 8004132:	b500      	push	{lr}
 8004134:	b09c      	sub	sp, #112	; 0x70
 8004136:	ab1d      	add	r3, sp, #116	; 0x74
 8004138:	9002      	str	r0, [sp, #8]
 800413a:	9006      	str	r0, [sp, #24]
 800413c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004140:	4809      	ldr	r0, [pc, #36]	; (8004168 <siprintf+0x38>)
 8004142:	9107      	str	r1, [sp, #28]
 8004144:	9104      	str	r1, [sp, #16]
 8004146:	4909      	ldr	r1, [pc, #36]	; (800416c <siprintf+0x3c>)
 8004148:	f853 2b04 	ldr.w	r2, [r3], #4
 800414c:	9105      	str	r1, [sp, #20]
 800414e:	6800      	ldr	r0, [r0, #0]
 8004150:	9301      	str	r3, [sp, #4]
 8004152:	a902      	add	r1, sp, #8
 8004154:	f000 f992 	bl	800447c <_svfiprintf_r>
 8004158:	9b02      	ldr	r3, [sp, #8]
 800415a:	2200      	movs	r2, #0
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	b01c      	add	sp, #112	; 0x70
 8004160:	f85d eb04 	ldr.w	lr, [sp], #4
 8004164:	b003      	add	sp, #12
 8004166:	4770      	bx	lr
 8004168:	20000058 	.word	0x20000058
 800416c:	ffff0208 	.word	0xffff0208

08004170 <memset>:
 8004170:	4402      	add	r2, r0
 8004172:	4603      	mov	r3, r0
 8004174:	4293      	cmp	r3, r2
 8004176:	d100      	bne.n	800417a <memset+0xa>
 8004178:	4770      	bx	lr
 800417a:	f803 1b01 	strb.w	r1, [r3], #1
 800417e:	e7f9      	b.n	8004174 <memset+0x4>

08004180 <__errno>:
 8004180:	4b01      	ldr	r3, [pc, #4]	; (8004188 <__errno+0x8>)
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	20000058 	.word	0x20000058

0800418c <__libc_init_array>:
 800418c:	b570      	push	{r4, r5, r6, lr}
 800418e:	4d0d      	ldr	r5, [pc, #52]	; (80041c4 <__libc_init_array+0x38>)
 8004190:	4c0d      	ldr	r4, [pc, #52]	; (80041c8 <__libc_init_array+0x3c>)
 8004192:	1b64      	subs	r4, r4, r5
 8004194:	10a4      	asrs	r4, r4, #2
 8004196:	2600      	movs	r6, #0
 8004198:	42a6      	cmp	r6, r4
 800419a:	d109      	bne.n	80041b0 <__libc_init_array+0x24>
 800419c:	4d0b      	ldr	r5, [pc, #44]	; (80041cc <__libc_init_array+0x40>)
 800419e:	4c0c      	ldr	r4, [pc, #48]	; (80041d0 <__libc_init_array+0x44>)
 80041a0:	f000 fc6a 	bl	8004a78 <_init>
 80041a4:	1b64      	subs	r4, r4, r5
 80041a6:	10a4      	asrs	r4, r4, #2
 80041a8:	2600      	movs	r6, #0
 80041aa:	42a6      	cmp	r6, r4
 80041ac:	d105      	bne.n	80041ba <__libc_init_array+0x2e>
 80041ae:	bd70      	pop	{r4, r5, r6, pc}
 80041b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b4:	4798      	blx	r3
 80041b6:	3601      	adds	r6, #1
 80041b8:	e7ee      	b.n	8004198 <__libc_init_array+0xc>
 80041ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80041be:	4798      	blx	r3
 80041c0:	3601      	adds	r6, #1
 80041c2:	e7f2      	b.n	80041aa <__libc_init_array+0x1e>
 80041c4:	08004af0 	.word	0x08004af0
 80041c8:	08004af0 	.word	0x08004af0
 80041cc:	08004af0 	.word	0x08004af0
 80041d0:	08004af4 	.word	0x08004af4

080041d4 <__retarget_lock_acquire_recursive>:
 80041d4:	4770      	bx	lr

080041d6 <__retarget_lock_release_recursive>:
 80041d6:	4770      	bx	lr

080041d8 <_free_r>:
 80041d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041da:	2900      	cmp	r1, #0
 80041dc:	d044      	beq.n	8004268 <_free_r+0x90>
 80041de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041e2:	9001      	str	r0, [sp, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f1a1 0404 	sub.w	r4, r1, #4
 80041ea:	bfb8      	it	lt
 80041ec:	18e4      	addlt	r4, r4, r3
 80041ee:	f000 f8df 	bl	80043b0 <__malloc_lock>
 80041f2:	4a1e      	ldr	r2, [pc, #120]	; (800426c <_free_r+0x94>)
 80041f4:	9801      	ldr	r0, [sp, #4]
 80041f6:	6813      	ldr	r3, [r2, #0]
 80041f8:	b933      	cbnz	r3, 8004208 <_free_r+0x30>
 80041fa:	6063      	str	r3, [r4, #4]
 80041fc:	6014      	str	r4, [r2, #0]
 80041fe:	b003      	add	sp, #12
 8004200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004204:	f000 b8da 	b.w	80043bc <__malloc_unlock>
 8004208:	42a3      	cmp	r3, r4
 800420a:	d908      	bls.n	800421e <_free_r+0x46>
 800420c:	6825      	ldr	r5, [r4, #0]
 800420e:	1961      	adds	r1, r4, r5
 8004210:	428b      	cmp	r3, r1
 8004212:	bf01      	itttt	eq
 8004214:	6819      	ldreq	r1, [r3, #0]
 8004216:	685b      	ldreq	r3, [r3, #4]
 8004218:	1949      	addeq	r1, r1, r5
 800421a:	6021      	streq	r1, [r4, #0]
 800421c:	e7ed      	b.n	80041fa <_free_r+0x22>
 800421e:	461a      	mov	r2, r3
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	b10b      	cbz	r3, 8004228 <_free_r+0x50>
 8004224:	42a3      	cmp	r3, r4
 8004226:	d9fa      	bls.n	800421e <_free_r+0x46>
 8004228:	6811      	ldr	r1, [r2, #0]
 800422a:	1855      	adds	r5, r2, r1
 800422c:	42a5      	cmp	r5, r4
 800422e:	d10b      	bne.n	8004248 <_free_r+0x70>
 8004230:	6824      	ldr	r4, [r4, #0]
 8004232:	4421      	add	r1, r4
 8004234:	1854      	adds	r4, r2, r1
 8004236:	42a3      	cmp	r3, r4
 8004238:	6011      	str	r1, [r2, #0]
 800423a:	d1e0      	bne.n	80041fe <_free_r+0x26>
 800423c:	681c      	ldr	r4, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	6053      	str	r3, [r2, #4]
 8004242:	440c      	add	r4, r1
 8004244:	6014      	str	r4, [r2, #0]
 8004246:	e7da      	b.n	80041fe <_free_r+0x26>
 8004248:	d902      	bls.n	8004250 <_free_r+0x78>
 800424a:	230c      	movs	r3, #12
 800424c:	6003      	str	r3, [r0, #0]
 800424e:	e7d6      	b.n	80041fe <_free_r+0x26>
 8004250:	6825      	ldr	r5, [r4, #0]
 8004252:	1961      	adds	r1, r4, r5
 8004254:	428b      	cmp	r3, r1
 8004256:	bf04      	itt	eq
 8004258:	6819      	ldreq	r1, [r3, #0]
 800425a:	685b      	ldreq	r3, [r3, #4]
 800425c:	6063      	str	r3, [r4, #4]
 800425e:	bf04      	itt	eq
 8004260:	1949      	addeq	r1, r1, r5
 8004262:	6021      	streq	r1, [r4, #0]
 8004264:	6054      	str	r4, [r2, #4]
 8004266:	e7ca      	b.n	80041fe <_free_r+0x26>
 8004268:	b003      	add	sp, #12
 800426a:	bd30      	pop	{r4, r5, pc}
 800426c:	20000284 	.word	0x20000284

08004270 <sbrk_aligned>:
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	4e0e      	ldr	r6, [pc, #56]	; (80042ac <sbrk_aligned+0x3c>)
 8004274:	460c      	mov	r4, r1
 8004276:	6831      	ldr	r1, [r6, #0]
 8004278:	4605      	mov	r5, r0
 800427a:	b911      	cbnz	r1, 8004282 <sbrk_aligned+0x12>
 800427c:	f000 fba6 	bl	80049cc <_sbrk_r>
 8004280:	6030      	str	r0, [r6, #0]
 8004282:	4621      	mov	r1, r4
 8004284:	4628      	mov	r0, r5
 8004286:	f000 fba1 	bl	80049cc <_sbrk_r>
 800428a:	1c43      	adds	r3, r0, #1
 800428c:	d00a      	beq.n	80042a4 <sbrk_aligned+0x34>
 800428e:	1cc4      	adds	r4, r0, #3
 8004290:	f024 0403 	bic.w	r4, r4, #3
 8004294:	42a0      	cmp	r0, r4
 8004296:	d007      	beq.n	80042a8 <sbrk_aligned+0x38>
 8004298:	1a21      	subs	r1, r4, r0
 800429a:	4628      	mov	r0, r5
 800429c:	f000 fb96 	bl	80049cc <_sbrk_r>
 80042a0:	3001      	adds	r0, #1
 80042a2:	d101      	bne.n	80042a8 <sbrk_aligned+0x38>
 80042a4:	f04f 34ff 	mov.w	r4, #4294967295
 80042a8:	4620      	mov	r0, r4
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	20000288 	.word	0x20000288

080042b0 <_malloc_r>:
 80042b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042b4:	1ccd      	adds	r5, r1, #3
 80042b6:	f025 0503 	bic.w	r5, r5, #3
 80042ba:	3508      	adds	r5, #8
 80042bc:	2d0c      	cmp	r5, #12
 80042be:	bf38      	it	cc
 80042c0:	250c      	movcc	r5, #12
 80042c2:	2d00      	cmp	r5, #0
 80042c4:	4607      	mov	r7, r0
 80042c6:	db01      	blt.n	80042cc <_malloc_r+0x1c>
 80042c8:	42a9      	cmp	r1, r5
 80042ca:	d905      	bls.n	80042d8 <_malloc_r+0x28>
 80042cc:	230c      	movs	r3, #12
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	2600      	movs	r6, #0
 80042d2:	4630      	mov	r0, r6
 80042d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80043ac <_malloc_r+0xfc>
 80042dc:	f000 f868 	bl	80043b0 <__malloc_lock>
 80042e0:	f8d8 3000 	ldr.w	r3, [r8]
 80042e4:	461c      	mov	r4, r3
 80042e6:	bb5c      	cbnz	r4, 8004340 <_malloc_r+0x90>
 80042e8:	4629      	mov	r1, r5
 80042ea:	4638      	mov	r0, r7
 80042ec:	f7ff ffc0 	bl	8004270 <sbrk_aligned>
 80042f0:	1c43      	adds	r3, r0, #1
 80042f2:	4604      	mov	r4, r0
 80042f4:	d155      	bne.n	80043a2 <_malloc_r+0xf2>
 80042f6:	f8d8 4000 	ldr.w	r4, [r8]
 80042fa:	4626      	mov	r6, r4
 80042fc:	2e00      	cmp	r6, #0
 80042fe:	d145      	bne.n	800438c <_malloc_r+0xdc>
 8004300:	2c00      	cmp	r4, #0
 8004302:	d048      	beq.n	8004396 <_malloc_r+0xe6>
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	4631      	mov	r1, r6
 8004308:	4638      	mov	r0, r7
 800430a:	eb04 0903 	add.w	r9, r4, r3
 800430e:	f000 fb5d 	bl	80049cc <_sbrk_r>
 8004312:	4581      	cmp	r9, r0
 8004314:	d13f      	bne.n	8004396 <_malloc_r+0xe6>
 8004316:	6821      	ldr	r1, [r4, #0]
 8004318:	1a6d      	subs	r5, r5, r1
 800431a:	4629      	mov	r1, r5
 800431c:	4638      	mov	r0, r7
 800431e:	f7ff ffa7 	bl	8004270 <sbrk_aligned>
 8004322:	3001      	adds	r0, #1
 8004324:	d037      	beq.n	8004396 <_malloc_r+0xe6>
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	442b      	add	r3, r5
 800432a:	6023      	str	r3, [r4, #0]
 800432c:	f8d8 3000 	ldr.w	r3, [r8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d038      	beq.n	80043a6 <_malloc_r+0xf6>
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	42a2      	cmp	r2, r4
 8004338:	d12b      	bne.n	8004392 <_malloc_r+0xe2>
 800433a:	2200      	movs	r2, #0
 800433c:	605a      	str	r2, [r3, #4]
 800433e:	e00f      	b.n	8004360 <_malloc_r+0xb0>
 8004340:	6822      	ldr	r2, [r4, #0]
 8004342:	1b52      	subs	r2, r2, r5
 8004344:	d41f      	bmi.n	8004386 <_malloc_r+0xd6>
 8004346:	2a0b      	cmp	r2, #11
 8004348:	d917      	bls.n	800437a <_malloc_r+0xca>
 800434a:	1961      	adds	r1, r4, r5
 800434c:	42a3      	cmp	r3, r4
 800434e:	6025      	str	r5, [r4, #0]
 8004350:	bf18      	it	ne
 8004352:	6059      	strne	r1, [r3, #4]
 8004354:	6863      	ldr	r3, [r4, #4]
 8004356:	bf08      	it	eq
 8004358:	f8c8 1000 	streq.w	r1, [r8]
 800435c:	5162      	str	r2, [r4, r5]
 800435e:	604b      	str	r3, [r1, #4]
 8004360:	4638      	mov	r0, r7
 8004362:	f104 060b 	add.w	r6, r4, #11
 8004366:	f000 f829 	bl	80043bc <__malloc_unlock>
 800436a:	f026 0607 	bic.w	r6, r6, #7
 800436e:	1d23      	adds	r3, r4, #4
 8004370:	1af2      	subs	r2, r6, r3
 8004372:	d0ae      	beq.n	80042d2 <_malloc_r+0x22>
 8004374:	1b9b      	subs	r3, r3, r6
 8004376:	50a3      	str	r3, [r4, r2]
 8004378:	e7ab      	b.n	80042d2 <_malloc_r+0x22>
 800437a:	42a3      	cmp	r3, r4
 800437c:	6862      	ldr	r2, [r4, #4]
 800437e:	d1dd      	bne.n	800433c <_malloc_r+0x8c>
 8004380:	f8c8 2000 	str.w	r2, [r8]
 8004384:	e7ec      	b.n	8004360 <_malloc_r+0xb0>
 8004386:	4623      	mov	r3, r4
 8004388:	6864      	ldr	r4, [r4, #4]
 800438a:	e7ac      	b.n	80042e6 <_malloc_r+0x36>
 800438c:	4634      	mov	r4, r6
 800438e:	6876      	ldr	r6, [r6, #4]
 8004390:	e7b4      	b.n	80042fc <_malloc_r+0x4c>
 8004392:	4613      	mov	r3, r2
 8004394:	e7cc      	b.n	8004330 <_malloc_r+0x80>
 8004396:	230c      	movs	r3, #12
 8004398:	603b      	str	r3, [r7, #0]
 800439a:	4638      	mov	r0, r7
 800439c:	f000 f80e 	bl	80043bc <__malloc_unlock>
 80043a0:	e797      	b.n	80042d2 <_malloc_r+0x22>
 80043a2:	6025      	str	r5, [r4, #0]
 80043a4:	e7dc      	b.n	8004360 <_malloc_r+0xb0>
 80043a6:	605b      	str	r3, [r3, #4]
 80043a8:	deff      	udf	#255	; 0xff
 80043aa:	bf00      	nop
 80043ac:	20000284 	.word	0x20000284

080043b0 <__malloc_lock>:
 80043b0:	4801      	ldr	r0, [pc, #4]	; (80043b8 <__malloc_lock+0x8>)
 80043b2:	f7ff bf0f 	b.w	80041d4 <__retarget_lock_acquire_recursive>
 80043b6:	bf00      	nop
 80043b8:	20000280 	.word	0x20000280

080043bc <__malloc_unlock>:
 80043bc:	4801      	ldr	r0, [pc, #4]	; (80043c4 <__malloc_unlock+0x8>)
 80043be:	f7ff bf0a 	b.w	80041d6 <__retarget_lock_release_recursive>
 80043c2:	bf00      	nop
 80043c4:	20000280 	.word	0x20000280

080043c8 <__ssputs_r>:
 80043c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043cc:	688e      	ldr	r6, [r1, #8]
 80043ce:	461f      	mov	r7, r3
 80043d0:	42be      	cmp	r6, r7
 80043d2:	680b      	ldr	r3, [r1, #0]
 80043d4:	4682      	mov	sl, r0
 80043d6:	460c      	mov	r4, r1
 80043d8:	4690      	mov	r8, r2
 80043da:	d82c      	bhi.n	8004436 <__ssputs_r+0x6e>
 80043dc:	898a      	ldrh	r2, [r1, #12]
 80043de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043e2:	d026      	beq.n	8004432 <__ssputs_r+0x6a>
 80043e4:	6965      	ldr	r5, [r4, #20]
 80043e6:	6909      	ldr	r1, [r1, #16]
 80043e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043ec:	eba3 0901 	sub.w	r9, r3, r1
 80043f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043f4:	1c7b      	adds	r3, r7, #1
 80043f6:	444b      	add	r3, r9
 80043f8:	106d      	asrs	r5, r5, #1
 80043fa:	429d      	cmp	r5, r3
 80043fc:	bf38      	it	cc
 80043fe:	461d      	movcc	r5, r3
 8004400:	0553      	lsls	r3, r2, #21
 8004402:	d527      	bpl.n	8004454 <__ssputs_r+0x8c>
 8004404:	4629      	mov	r1, r5
 8004406:	f7ff ff53 	bl	80042b0 <_malloc_r>
 800440a:	4606      	mov	r6, r0
 800440c:	b360      	cbz	r0, 8004468 <__ssputs_r+0xa0>
 800440e:	6921      	ldr	r1, [r4, #16]
 8004410:	464a      	mov	r2, r9
 8004412:	f000 faeb 	bl	80049ec <memcpy>
 8004416:	89a3      	ldrh	r3, [r4, #12]
 8004418:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800441c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004420:	81a3      	strh	r3, [r4, #12]
 8004422:	6126      	str	r6, [r4, #16]
 8004424:	6165      	str	r5, [r4, #20]
 8004426:	444e      	add	r6, r9
 8004428:	eba5 0509 	sub.w	r5, r5, r9
 800442c:	6026      	str	r6, [r4, #0]
 800442e:	60a5      	str	r5, [r4, #8]
 8004430:	463e      	mov	r6, r7
 8004432:	42be      	cmp	r6, r7
 8004434:	d900      	bls.n	8004438 <__ssputs_r+0x70>
 8004436:	463e      	mov	r6, r7
 8004438:	6820      	ldr	r0, [r4, #0]
 800443a:	4632      	mov	r2, r6
 800443c:	4641      	mov	r1, r8
 800443e:	f000 faab 	bl	8004998 <memmove>
 8004442:	68a3      	ldr	r3, [r4, #8]
 8004444:	1b9b      	subs	r3, r3, r6
 8004446:	60a3      	str	r3, [r4, #8]
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	4433      	add	r3, r6
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	2000      	movs	r0, #0
 8004450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004454:	462a      	mov	r2, r5
 8004456:	f000 fad7 	bl	8004a08 <_realloc_r>
 800445a:	4606      	mov	r6, r0
 800445c:	2800      	cmp	r0, #0
 800445e:	d1e0      	bne.n	8004422 <__ssputs_r+0x5a>
 8004460:	6921      	ldr	r1, [r4, #16]
 8004462:	4650      	mov	r0, sl
 8004464:	f7ff feb8 	bl	80041d8 <_free_r>
 8004468:	230c      	movs	r3, #12
 800446a:	f8ca 3000 	str.w	r3, [sl]
 800446e:	89a3      	ldrh	r3, [r4, #12]
 8004470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004474:	81a3      	strh	r3, [r4, #12]
 8004476:	f04f 30ff 	mov.w	r0, #4294967295
 800447a:	e7e9      	b.n	8004450 <__ssputs_r+0x88>

0800447c <_svfiprintf_r>:
 800447c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004480:	4698      	mov	r8, r3
 8004482:	898b      	ldrh	r3, [r1, #12]
 8004484:	061b      	lsls	r3, r3, #24
 8004486:	b09d      	sub	sp, #116	; 0x74
 8004488:	4607      	mov	r7, r0
 800448a:	460d      	mov	r5, r1
 800448c:	4614      	mov	r4, r2
 800448e:	d50e      	bpl.n	80044ae <_svfiprintf_r+0x32>
 8004490:	690b      	ldr	r3, [r1, #16]
 8004492:	b963      	cbnz	r3, 80044ae <_svfiprintf_r+0x32>
 8004494:	2140      	movs	r1, #64	; 0x40
 8004496:	f7ff ff0b 	bl	80042b0 <_malloc_r>
 800449a:	6028      	str	r0, [r5, #0]
 800449c:	6128      	str	r0, [r5, #16]
 800449e:	b920      	cbnz	r0, 80044aa <_svfiprintf_r+0x2e>
 80044a0:	230c      	movs	r3, #12
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	f04f 30ff 	mov.w	r0, #4294967295
 80044a8:	e0d0      	b.n	800464c <_svfiprintf_r+0x1d0>
 80044aa:	2340      	movs	r3, #64	; 0x40
 80044ac:	616b      	str	r3, [r5, #20]
 80044ae:	2300      	movs	r3, #0
 80044b0:	9309      	str	r3, [sp, #36]	; 0x24
 80044b2:	2320      	movs	r3, #32
 80044b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80044bc:	2330      	movs	r3, #48	; 0x30
 80044be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004664 <_svfiprintf_r+0x1e8>
 80044c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044c6:	f04f 0901 	mov.w	r9, #1
 80044ca:	4623      	mov	r3, r4
 80044cc:	469a      	mov	sl, r3
 80044ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044d2:	b10a      	cbz	r2, 80044d8 <_svfiprintf_r+0x5c>
 80044d4:	2a25      	cmp	r2, #37	; 0x25
 80044d6:	d1f9      	bne.n	80044cc <_svfiprintf_r+0x50>
 80044d8:	ebba 0b04 	subs.w	fp, sl, r4
 80044dc:	d00b      	beq.n	80044f6 <_svfiprintf_r+0x7a>
 80044de:	465b      	mov	r3, fp
 80044e0:	4622      	mov	r2, r4
 80044e2:	4629      	mov	r1, r5
 80044e4:	4638      	mov	r0, r7
 80044e6:	f7ff ff6f 	bl	80043c8 <__ssputs_r>
 80044ea:	3001      	adds	r0, #1
 80044ec:	f000 80a9 	beq.w	8004642 <_svfiprintf_r+0x1c6>
 80044f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044f2:	445a      	add	r2, fp
 80044f4:	9209      	str	r2, [sp, #36]	; 0x24
 80044f6:	f89a 3000 	ldrb.w	r3, [sl]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 80a1 	beq.w	8004642 <_svfiprintf_r+0x1c6>
 8004500:	2300      	movs	r3, #0
 8004502:	f04f 32ff 	mov.w	r2, #4294967295
 8004506:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800450a:	f10a 0a01 	add.w	sl, sl, #1
 800450e:	9304      	str	r3, [sp, #16]
 8004510:	9307      	str	r3, [sp, #28]
 8004512:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004516:	931a      	str	r3, [sp, #104]	; 0x68
 8004518:	4654      	mov	r4, sl
 800451a:	2205      	movs	r2, #5
 800451c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004520:	4850      	ldr	r0, [pc, #320]	; (8004664 <_svfiprintf_r+0x1e8>)
 8004522:	f7fb fe7d 	bl	8000220 <memchr>
 8004526:	9a04      	ldr	r2, [sp, #16]
 8004528:	b9d8      	cbnz	r0, 8004562 <_svfiprintf_r+0xe6>
 800452a:	06d0      	lsls	r0, r2, #27
 800452c:	bf44      	itt	mi
 800452e:	2320      	movmi	r3, #32
 8004530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004534:	0711      	lsls	r1, r2, #28
 8004536:	bf44      	itt	mi
 8004538:	232b      	movmi	r3, #43	; 0x2b
 800453a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800453e:	f89a 3000 	ldrb.w	r3, [sl]
 8004542:	2b2a      	cmp	r3, #42	; 0x2a
 8004544:	d015      	beq.n	8004572 <_svfiprintf_r+0xf6>
 8004546:	9a07      	ldr	r2, [sp, #28]
 8004548:	4654      	mov	r4, sl
 800454a:	2000      	movs	r0, #0
 800454c:	f04f 0c0a 	mov.w	ip, #10
 8004550:	4621      	mov	r1, r4
 8004552:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004556:	3b30      	subs	r3, #48	; 0x30
 8004558:	2b09      	cmp	r3, #9
 800455a:	d94d      	bls.n	80045f8 <_svfiprintf_r+0x17c>
 800455c:	b1b0      	cbz	r0, 800458c <_svfiprintf_r+0x110>
 800455e:	9207      	str	r2, [sp, #28]
 8004560:	e014      	b.n	800458c <_svfiprintf_r+0x110>
 8004562:	eba0 0308 	sub.w	r3, r0, r8
 8004566:	fa09 f303 	lsl.w	r3, r9, r3
 800456a:	4313      	orrs	r3, r2
 800456c:	9304      	str	r3, [sp, #16]
 800456e:	46a2      	mov	sl, r4
 8004570:	e7d2      	b.n	8004518 <_svfiprintf_r+0x9c>
 8004572:	9b03      	ldr	r3, [sp, #12]
 8004574:	1d19      	adds	r1, r3, #4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	9103      	str	r1, [sp, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	bfbb      	ittet	lt
 800457e:	425b      	neglt	r3, r3
 8004580:	f042 0202 	orrlt.w	r2, r2, #2
 8004584:	9307      	strge	r3, [sp, #28]
 8004586:	9307      	strlt	r3, [sp, #28]
 8004588:	bfb8      	it	lt
 800458a:	9204      	strlt	r2, [sp, #16]
 800458c:	7823      	ldrb	r3, [r4, #0]
 800458e:	2b2e      	cmp	r3, #46	; 0x2e
 8004590:	d10c      	bne.n	80045ac <_svfiprintf_r+0x130>
 8004592:	7863      	ldrb	r3, [r4, #1]
 8004594:	2b2a      	cmp	r3, #42	; 0x2a
 8004596:	d134      	bne.n	8004602 <_svfiprintf_r+0x186>
 8004598:	9b03      	ldr	r3, [sp, #12]
 800459a:	1d1a      	adds	r2, r3, #4
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	9203      	str	r2, [sp, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bfb8      	it	lt
 80045a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80045a8:	3402      	adds	r4, #2
 80045aa:	9305      	str	r3, [sp, #20]
 80045ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004674 <_svfiprintf_r+0x1f8>
 80045b0:	7821      	ldrb	r1, [r4, #0]
 80045b2:	2203      	movs	r2, #3
 80045b4:	4650      	mov	r0, sl
 80045b6:	f7fb fe33 	bl	8000220 <memchr>
 80045ba:	b138      	cbz	r0, 80045cc <_svfiprintf_r+0x150>
 80045bc:	9b04      	ldr	r3, [sp, #16]
 80045be:	eba0 000a 	sub.w	r0, r0, sl
 80045c2:	2240      	movs	r2, #64	; 0x40
 80045c4:	4082      	lsls	r2, r0
 80045c6:	4313      	orrs	r3, r2
 80045c8:	3401      	adds	r4, #1
 80045ca:	9304      	str	r3, [sp, #16]
 80045cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045d0:	4825      	ldr	r0, [pc, #148]	; (8004668 <_svfiprintf_r+0x1ec>)
 80045d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045d6:	2206      	movs	r2, #6
 80045d8:	f7fb fe22 	bl	8000220 <memchr>
 80045dc:	2800      	cmp	r0, #0
 80045de:	d038      	beq.n	8004652 <_svfiprintf_r+0x1d6>
 80045e0:	4b22      	ldr	r3, [pc, #136]	; (800466c <_svfiprintf_r+0x1f0>)
 80045e2:	bb1b      	cbnz	r3, 800462c <_svfiprintf_r+0x1b0>
 80045e4:	9b03      	ldr	r3, [sp, #12]
 80045e6:	3307      	adds	r3, #7
 80045e8:	f023 0307 	bic.w	r3, r3, #7
 80045ec:	3308      	adds	r3, #8
 80045ee:	9303      	str	r3, [sp, #12]
 80045f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045f2:	4433      	add	r3, r6
 80045f4:	9309      	str	r3, [sp, #36]	; 0x24
 80045f6:	e768      	b.n	80044ca <_svfiprintf_r+0x4e>
 80045f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80045fc:	460c      	mov	r4, r1
 80045fe:	2001      	movs	r0, #1
 8004600:	e7a6      	b.n	8004550 <_svfiprintf_r+0xd4>
 8004602:	2300      	movs	r3, #0
 8004604:	3401      	adds	r4, #1
 8004606:	9305      	str	r3, [sp, #20]
 8004608:	4619      	mov	r1, r3
 800460a:	f04f 0c0a 	mov.w	ip, #10
 800460e:	4620      	mov	r0, r4
 8004610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004614:	3a30      	subs	r2, #48	; 0x30
 8004616:	2a09      	cmp	r2, #9
 8004618:	d903      	bls.n	8004622 <_svfiprintf_r+0x1a6>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0c6      	beq.n	80045ac <_svfiprintf_r+0x130>
 800461e:	9105      	str	r1, [sp, #20]
 8004620:	e7c4      	b.n	80045ac <_svfiprintf_r+0x130>
 8004622:	fb0c 2101 	mla	r1, ip, r1, r2
 8004626:	4604      	mov	r4, r0
 8004628:	2301      	movs	r3, #1
 800462a:	e7f0      	b.n	800460e <_svfiprintf_r+0x192>
 800462c:	ab03      	add	r3, sp, #12
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	462a      	mov	r2, r5
 8004632:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <_svfiprintf_r+0x1f4>)
 8004634:	a904      	add	r1, sp, #16
 8004636:	4638      	mov	r0, r7
 8004638:	f3af 8000 	nop.w
 800463c:	1c42      	adds	r2, r0, #1
 800463e:	4606      	mov	r6, r0
 8004640:	d1d6      	bne.n	80045f0 <_svfiprintf_r+0x174>
 8004642:	89ab      	ldrh	r3, [r5, #12]
 8004644:	065b      	lsls	r3, r3, #25
 8004646:	f53f af2d 	bmi.w	80044a4 <_svfiprintf_r+0x28>
 800464a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800464c:	b01d      	add	sp, #116	; 0x74
 800464e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004652:	ab03      	add	r3, sp, #12
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	462a      	mov	r2, r5
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <_svfiprintf_r+0x1f4>)
 800465a:	a904      	add	r1, sp, #16
 800465c:	4638      	mov	r0, r7
 800465e:	f000 f879 	bl	8004754 <_printf_i>
 8004662:	e7eb      	b.n	800463c <_svfiprintf_r+0x1c0>
 8004664:	08004ab4 	.word	0x08004ab4
 8004668:	08004abe 	.word	0x08004abe
 800466c:	00000000 	.word	0x00000000
 8004670:	080043c9 	.word	0x080043c9
 8004674:	08004aba 	.word	0x08004aba

08004678 <_printf_common>:
 8004678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800467c:	4616      	mov	r6, r2
 800467e:	4699      	mov	r9, r3
 8004680:	688a      	ldr	r2, [r1, #8]
 8004682:	690b      	ldr	r3, [r1, #16]
 8004684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004688:	4293      	cmp	r3, r2
 800468a:	bfb8      	it	lt
 800468c:	4613      	movlt	r3, r2
 800468e:	6033      	str	r3, [r6, #0]
 8004690:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004694:	4607      	mov	r7, r0
 8004696:	460c      	mov	r4, r1
 8004698:	b10a      	cbz	r2, 800469e <_printf_common+0x26>
 800469a:	3301      	adds	r3, #1
 800469c:	6033      	str	r3, [r6, #0]
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	0699      	lsls	r1, r3, #26
 80046a2:	bf42      	ittt	mi
 80046a4:	6833      	ldrmi	r3, [r6, #0]
 80046a6:	3302      	addmi	r3, #2
 80046a8:	6033      	strmi	r3, [r6, #0]
 80046aa:	6825      	ldr	r5, [r4, #0]
 80046ac:	f015 0506 	ands.w	r5, r5, #6
 80046b0:	d106      	bne.n	80046c0 <_printf_common+0x48>
 80046b2:	f104 0a19 	add.w	sl, r4, #25
 80046b6:	68e3      	ldr	r3, [r4, #12]
 80046b8:	6832      	ldr	r2, [r6, #0]
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	42ab      	cmp	r3, r5
 80046be:	dc26      	bgt.n	800470e <_printf_common+0x96>
 80046c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046c4:	1e13      	subs	r3, r2, #0
 80046c6:	6822      	ldr	r2, [r4, #0]
 80046c8:	bf18      	it	ne
 80046ca:	2301      	movne	r3, #1
 80046cc:	0692      	lsls	r2, r2, #26
 80046ce:	d42b      	bmi.n	8004728 <_printf_common+0xb0>
 80046d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046d4:	4649      	mov	r1, r9
 80046d6:	4638      	mov	r0, r7
 80046d8:	47c0      	blx	r8
 80046da:	3001      	adds	r0, #1
 80046dc:	d01e      	beq.n	800471c <_printf_common+0xa4>
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	6922      	ldr	r2, [r4, #16]
 80046e2:	f003 0306 	and.w	r3, r3, #6
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	bf02      	ittt	eq
 80046ea:	68e5      	ldreq	r5, [r4, #12]
 80046ec:	6833      	ldreq	r3, [r6, #0]
 80046ee:	1aed      	subeq	r5, r5, r3
 80046f0:	68a3      	ldr	r3, [r4, #8]
 80046f2:	bf0c      	ite	eq
 80046f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046f8:	2500      	movne	r5, #0
 80046fa:	4293      	cmp	r3, r2
 80046fc:	bfc4      	itt	gt
 80046fe:	1a9b      	subgt	r3, r3, r2
 8004700:	18ed      	addgt	r5, r5, r3
 8004702:	2600      	movs	r6, #0
 8004704:	341a      	adds	r4, #26
 8004706:	42b5      	cmp	r5, r6
 8004708:	d11a      	bne.n	8004740 <_printf_common+0xc8>
 800470a:	2000      	movs	r0, #0
 800470c:	e008      	b.n	8004720 <_printf_common+0xa8>
 800470e:	2301      	movs	r3, #1
 8004710:	4652      	mov	r2, sl
 8004712:	4649      	mov	r1, r9
 8004714:	4638      	mov	r0, r7
 8004716:	47c0      	blx	r8
 8004718:	3001      	adds	r0, #1
 800471a:	d103      	bne.n	8004724 <_printf_common+0xac>
 800471c:	f04f 30ff 	mov.w	r0, #4294967295
 8004720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004724:	3501      	adds	r5, #1
 8004726:	e7c6      	b.n	80046b6 <_printf_common+0x3e>
 8004728:	18e1      	adds	r1, r4, r3
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	2030      	movs	r0, #48	; 0x30
 800472e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004732:	4422      	add	r2, r4
 8004734:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004738:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800473c:	3302      	adds	r3, #2
 800473e:	e7c7      	b.n	80046d0 <_printf_common+0x58>
 8004740:	2301      	movs	r3, #1
 8004742:	4622      	mov	r2, r4
 8004744:	4649      	mov	r1, r9
 8004746:	4638      	mov	r0, r7
 8004748:	47c0      	blx	r8
 800474a:	3001      	adds	r0, #1
 800474c:	d0e6      	beq.n	800471c <_printf_common+0xa4>
 800474e:	3601      	adds	r6, #1
 8004750:	e7d9      	b.n	8004706 <_printf_common+0x8e>
	...

08004754 <_printf_i>:
 8004754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004758:	7e0f      	ldrb	r7, [r1, #24]
 800475a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800475c:	2f78      	cmp	r7, #120	; 0x78
 800475e:	4691      	mov	r9, r2
 8004760:	4680      	mov	r8, r0
 8004762:	460c      	mov	r4, r1
 8004764:	469a      	mov	sl, r3
 8004766:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800476a:	d807      	bhi.n	800477c <_printf_i+0x28>
 800476c:	2f62      	cmp	r7, #98	; 0x62
 800476e:	d80a      	bhi.n	8004786 <_printf_i+0x32>
 8004770:	2f00      	cmp	r7, #0
 8004772:	f000 80d4 	beq.w	800491e <_printf_i+0x1ca>
 8004776:	2f58      	cmp	r7, #88	; 0x58
 8004778:	f000 80c0 	beq.w	80048fc <_printf_i+0x1a8>
 800477c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004780:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004784:	e03a      	b.n	80047fc <_printf_i+0xa8>
 8004786:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800478a:	2b15      	cmp	r3, #21
 800478c:	d8f6      	bhi.n	800477c <_printf_i+0x28>
 800478e:	a101      	add	r1, pc, #4	; (adr r1, 8004794 <_printf_i+0x40>)
 8004790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004794:	080047ed 	.word	0x080047ed
 8004798:	08004801 	.word	0x08004801
 800479c:	0800477d 	.word	0x0800477d
 80047a0:	0800477d 	.word	0x0800477d
 80047a4:	0800477d 	.word	0x0800477d
 80047a8:	0800477d 	.word	0x0800477d
 80047ac:	08004801 	.word	0x08004801
 80047b0:	0800477d 	.word	0x0800477d
 80047b4:	0800477d 	.word	0x0800477d
 80047b8:	0800477d 	.word	0x0800477d
 80047bc:	0800477d 	.word	0x0800477d
 80047c0:	08004905 	.word	0x08004905
 80047c4:	0800482d 	.word	0x0800482d
 80047c8:	080048bf 	.word	0x080048bf
 80047cc:	0800477d 	.word	0x0800477d
 80047d0:	0800477d 	.word	0x0800477d
 80047d4:	08004927 	.word	0x08004927
 80047d8:	0800477d 	.word	0x0800477d
 80047dc:	0800482d 	.word	0x0800482d
 80047e0:	0800477d 	.word	0x0800477d
 80047e4:	0800477d 	.word	0x0800477d
 80047e8:	080048c7 	.word	0x080048c7
 80047ec:	682b      	ldr	r3, [r5, #0]
 80047ee:	1d1a      	adds	r2, r3, #4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	602a      	str	r2, [r5, #0]
 80047f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047fc:	2301      	movs	r3, #1
 80047fe:	e09f      	b.n	8004940 <_printf_i+0x1ec>
 8004800:	6820      	ldr	r0, [r4, #0]
 8004802:	682b      	ldr	r3, [r5, #0]
 8004804:	0607      	lsls	r7, r0, #24
 8004806:	f103 0104 	add.w	r1, r3, #4
 800480a:	6029      	str	r1, [r5, #0]
 800480c:	d501      	bpl.n	8004812 <_printf_i+0xbe>
 800480e:	681e      	ldr	r6, [r3, #0]
 8004810:	e003      	b.n	800481a <_printf_i+0xc6>
 8004812:	0646      	lsls	r6, r0, #25
 8004814:	d5fb      	bpl.n	800480e <_printf_i+0xba>
 8004816:	f9b3 6000 	ldrsh.w	r6, [r3]
 800481a:	2e00      	cmp	r6, #0
 800481c:	da03      	bge.n	8004826 <_printf_i+0xd2>
 800481e:	232d      	movs	r3, #45	; 0x2d
 8004820:	4276      	negs	r6, r6
 8004822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004826:	485a      	ldr	r0, [pc, #360]	; (8004990 <_printf_i+0x23c>)
 8004828:	230a      	movs	r3, #10
 800482a:	e012      	b.n	8004852 <_printf_i+0xfe>
 800482c:	682b      	ldr	r3, [r5, #0]
 800482e:	6820      	ldr	r0, [r4, #0]
 8004830:	1d19      	adds	r1, r3, #4
 8004832:	6029      	str	r1, [r5, #0]
 8004834:	0605      	lsls	r5, r0, #24
 8004836:	d501      	bpl.n	800483c <_printf_i+0xe8>
 8004838:	681e      	ldr	r6, [r3, #0]
 800483a:	e002      	b.n	8004842 <_printf_i+0xee>
 800483c:	0641      	lsls	r1, r0, #25
 800483e:	d5fb      	bpl.n	8004838 <_printf_i+0xe4>
 8004840:	881e      	ldrh	r6, [r3, #0]
 8004842:	4853      	ldr	r0, [pc, #332]	; (8004990 <_printf_i+0x23c>)
 8004844:	2f6f      	cmp	r7, #111	; 0x6f
 8004846:	bf0c      	ite	eq
 8004848:	2308      	moveq	r3, #8
 800484a:	230a      	movne	r3, #10
 800484c:	2100      	movs	r1, #0
 800484e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004852:	6865      	ldr	r5, [r4, #4]
 8004854:	60a5      	str	r5, [r4, #8]
 8004856:	2d00      	cmp	r5, #0
 8004858:	bfa2      	ittt	ge
 800485a:	6821      	ldrge	r1, [r4, #0]
 800485c:	f021 0104 	bicge.w	r1, r1, #4
 8004860:	6021      	strge	r1, [r4, #0]
 8004862:	b90e      	cbnz	r6, 8004868 <_printf_i+0x114>
 8004864:	2d00      	cmp	r5, #0
 8004866:	d04b      	beq.n	8004900 <_printf_i+0x1ac>
 8004868:	4615      	mov	r5, r2
 800486a:	fbb6 f1f3 	udiv	r1, r6, r3
 800486e:	fb03 6711 	mls	r7, r3, r1, r6
 8004872:	5dc7      	ldrb	r7, [r0, r7]
 8004874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004878:	4637      	mov	r7, r6
 800487a:	42bb      	cmp	r3, r7
 800487c:	460e      	mov	r6, r1
 800487e:	d9f4      	bls.n	800486a <_printf_i+0x116>
 8004880:	2b08      	cmp	r3, #8
 8004882:	d10b      	bne.n	800489c <_printf_i+0x148>
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	07de      	lsls	r6, r3, #31
 8004888:	d508      	bpl.n	800489c <_printf_i+0x148>
 800488a:	6923      	ldr	r3, [r4, #16]
 800488c:	6861      	ldr	r1, [r4, #4]
 800488e:	4299      	cmp	r1, r3
 8004890:	bfde      	ittt	le
 8004892:	2330      	movle	r3, #48	; 0x30
 8004894:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004898:	f105 35ff 	addle.w	r5, r5, #4294967295
 800489c:	1b52      	subs	r2, r2, r5
 800489e:	6122      	str	r2, [r4, #16]
 80048a0:	f8cd a000 	str.w	sl, [sp]
 80048a4:	464b      	mov	r3, r9
 80048a6:	aa03      	add	r2, sp, #12
 80048a8:	4621      	mov	r1, r4
 80048aa:	4640      	mov	r0, r8
 80048ac:	f7ff fee4 	bl	8004678 <_printf_common>
 80048b0:	3001      	adds	r0, #1
 80048b2:	d14a      	bne.n	800494a <_printf_i+0x1f6>
 80048b4:	f04f 30ff 	mov.w	r0, #4294967295
 80048b8:	b004      	add	sp, #16
 80048ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	f043 0320 	orr.w	r3, r3, #32
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	4833      	ldr	r0, [pc, #204]	; (8004994 <_printf_i+0x240>)
 80048c8:	2778      	movs	r7, #120	; 0x78
 80048ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	6829      	ldr	r1, [r5, #0]
 80048d2:	061f      	lsls	r7, r3, #24
 80048d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80048d8:	d402      	bmi.n	80048e0 <_printf_i+0x18c>
 80048da:	065f      	lsls	r7, r3, #25
 80048dc:	bf48      	it	mi
 80048de:	b2b6      	uxthmi	r6, r6
 80048e0:	07df      	lsls	r7, r3, #31
 80048e2:	bf48      	it	mi
 80048e4:	f043 0320 	orrmi.w	r3, r3, #32
 80048e8:	6029      	str	r1, [r5, #0]
 80048ea:	bf48      	it	mi
 80048ec:	6023      	strmi	r3, [r4, #0]
 80048ee:	b91e      	cbnz	r6, 80048f8 <_printf_i+0x1a4>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	f023 0320 	bic.w	r3, r3, #32
 80048f6:	6023      	str	r3, [r4, #0]
 80048f8:	2310      	movs	r3, #16
 80048fa:	e7a7      	b.n	800484c <_printf_i+0xf8>
 80048fc:	4824      	ldr	r0, [pc, #144]	; (8004990 <_printf_i+0x23c>)
 80048fe:	e7e4      	b.n	80048ca <_printf_i+0x176>
 8004900:	4615      	mov	r5, r2
 8004902:	e7bd      	b.n	8004880 <_printf_i+0x12c>
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	6826      	ldr	r6, [r4, #0]
 8004908:	6961      	ldr	r1, [r4, #20]
 800490a:	1d18      	adds	r0, r3, #4
 800490c:	6028      	str	r0, [r5, #0]
 800490e:	0635      	lsls	r5, r6, #24
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	d501      	bpl.n	8004918 <_printf_i+0x1c4>
 8004914:	6019      	str	r1, [r3, #0]
 8004916:	e002      	b.n	800491e <_printf_i+0x1ca>
 8004918:	0670      	lsls	r0, r6, #25
 800491a:	d5fb      	bpl.n	8004914 <_printf_i+0x1c0>
 800491c:	8019      	strh	r1, [r3, #0]
 800491e:	2300      	movs	r3, #0
 8004920:	6123      	str	r3, [r4, #16]
 8004922:	4615      	mov	r5, r2
 8004924:	e7bc      	b.n	80048a0 <_printf_i+0x14c>
 8004926:	682b      	ldr	r3, [r5, #0]
 8004928:	1d1a      	adds	r2, r3, #4
 800492a:	602a      	str	r2, [r5, #0]
 800492c:	681d      	ldr	r5, [r3, #0]
 800492e:	6862      	ldr	r2, [r4, #4]
 8004930:	2100      	movs	r1, #0
 8004932:	4628      	mov	r0, r5
 8004934:	f7fb fc74 	bl	8000220 <memchr>
 8004938:	b108      	cbz	r0, 800493e <_printf_i+0x1ea>
 800493a:	1b40      	subs	r0, r0, r5
 800493c:	6060      	str	r0, [r4, #4]
 800493e:	6863      	ldr	r3, [r4, #4]
 8004940:	6123      	str	r3, [r4, #16]
 8004942:	2300      	movs	r3, #0
 8004944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004948:	e7aa      	b.n	80048a0 <_printf_i+0x14c>
 800494a:	6923      	ldr	r3, [r4, #16]
 800494c:	462a      	mov	r2, r5
 800494e:	4649      	mov	r1, r9
 8004950:	4640      	mov	r0, r8
 8004952:	47d0      	blx	sl
 8004954:	3001      	adds	r0, #1
 8004956:	d0ad      	beq.n	80048b4 <_printf_i+0x160>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	079b      	lsls	r3, r3, #30
 800495c:	d413      	bmi.n	8004986 <_printf_i+0x232>
 800495e:	68e0      	ldr	r0, [r4, #12]
 8004960:	9b03      	ldr	r3, [sp, #12]
 8004962:	4298      	cmp	r0, r3
 8004964:	bfb8      	it	lt
 8004966:	4618      	movlt	r0, r3
 8004968:	e7a6      	b.n	80048b8 <_printf_i+0x164>
 800496a:	2301      	movs	r3, #1
 800496c:	4632      	mov	r2, r6
 800496e:	4649      	mov	r1, r9
 8004970:	4640      	mov	r0, r8
 8004972:	47d0      	blx	sl
 8004974:	3001      	adds	r0, #1
 8004976:	d09d      	beq.n	80048b4 <_printf_i+0x160>
 8004978:	3501      	adds	r5, #1
 800497a:	68e3      	ldr	r3, [r4, #12]
 800497c:	9903      	ldr	r1, [sp, #12]
 800497e:	1a5b      	subs	r3, r3, r1
 8004980:	42ab      	cmp	r3, r5
 8004982:	dcf2      	bgt.n	800496a <_printf_i+0x216>
 8004984:	e7eb      	b.n	800495e <_printf_i+0x20a>
 8004986:	2500      	movs	r5, #0
 8004988:	f104 0619 	add.w	r6, r4, #25
 800498c:	e7f5      	b.n	800497a <_printf_i+0x226>
 800498e:	bf00      	nop
 8004990:	08004ac5 	.word	0x08004ac5
 8004994:	08004ad6 	.word	0x08004ad6

08004998 <memmove>:
 8004998:	4288      	cmp	r0, r1
 800499a:	b510      	push	{r4, lr}
 800499c:	eb01 0402 	add.w	r4, r1, r2
 80049a0:	d902      	bls.n	80049a8 <memmove+0x10>
 80049a2:	4284      	cmp	r4, r0
 80049a4:	4623      	mov	r3, r4
 80049a6:	d807      	bhi.n	80049b8 <memmove+0x20>
 80049a8:	1e43      	subs	r3, r0, #1
 80049aa:	42a1      	cmp	r1, r4
 80049ac:	d008      	beq.n	80049c0 <memmove+0x28>
 80049ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049b6:	e7f8      	b.n	80049aa <memmove+0x12>
 80049b8:	4402      	add	r2, r0
 80049ba:	4601      	mov	r1, r0
 80049bc:	428a      	cmp	r2, r1
 80049be:	d100      	bne.n	80049c2 <memmove+0x2a>
 80049c0:	bd10      	pop	{r4, pc}
 80049c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049ca:	e7f7      	b.n	80049bc <memmove+0x24>

080049cc <_sbrk_r>:
 80049cc:	b538      	push	{r3, r4, r5, lr}
 80049ce:	4d06      	ldr	r5, [pc, #24]	; (80049e8 <_sbrk_r+0x1c>)
 80049d0:	2300      	movs	r3, #0
 80049d2:	4604      	mov	r4, r0
 80049d4:	4608      	mov	r0, r1
 80049d6:	602b      	str	r3, [r5, #0]
 80049d8:	f7fc fcf4 	bl	80013c4 <_sbrk>
 80049dc:	1c43      	adds	r3, r0, #1
 80049de:	d102      	bne.n	80049e6 <_sbrk_r+0x1a>
 80049e0:	682b      	ldr	r3, [r5, #0]
 80049e2:	b103      	cbz	r3, 80049e6 <_sbrk_r+0x1a>
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	bd38      	pop	{r3, r4, r5, pc}
 80049e8:	2000027c 	.word	0x2000027c

080049ec <memcpy>:
 80049ec:	440a      	add	r2, r1
 80049ee:	4291      	cmp	r1, r2
 80049f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80049f4:	d100      	bne.n	80049f8 <memcpy+0xc>
 80049f6:	4770      	bx	lr
 80049f8:	b510      	push	{r4, lr}
 80049fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a02:	4291      	cmp	r1, r2
 8004a04:	d1f9      	bne.n	80049fa <memcpy+0xe>
 8004a06:	bd10      	pop	{r4, pc}

08004a08 <_realloc_r>:
 8004a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0c:	4680      	mov	r8, r0
 8004a0e:	4614      	mov	r4, r2
 8004a10:	460e      	mov	r6, r1
 8004a12:	b921      	cbnz	r1, 8004a1e <_realloc_r+0x16>
 8004a14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a18:	4611      	mov	r1, r2
 8004a1a:	f7ff bc49 	b.w	80042b0 <_malloc_r>
 8004a1e:	b92a      	cbnz	r2, 8004a2c <_realloc_r+0x24>
 8004a20:	f7ff fbda 	bl	80041d8 <_free_r>
 8004a24:	4625      	mov	r5, r4
 8004a26:	4628      	mov	r0, r5
 8004a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a2c:	f000 f81b 	bl	8004a66 <_malloc_usable_size_r>
 8004a30:	4284      	cmp	r4, r0
 8004a32:	4607      	mov	r7, r0
 8004a34:	d802      	bhi.n	8004a3c <_realloc_r+0x34>
 8004a36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a3a:	d812      	bhi.n	8004a62 <_realloc_r+0x5a>
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	4640      	mov	r0, r8
 8004a40:	f7ff fc36 	bl	80042b0 <_malloc_r>
 8004a44:	4605      	mov	r5, r0
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d0ed      	beq.n	8004a26 <_realloc_r+0x1e>
 8004a4a:	42bc      	cmp	r4, r7
 8004a4c:	4622      	mov	r2, r4
 8004a4e:	4631      	mov	r1, r6
 8004a50:	bf28      	it	cs
 8004a52:	463a      	movcs	r2, r7
 8004a54:	f7ff ffca 	bl	80049ec <memcpy>
 8004a58:	4631      	mov	r1, r6
 8004a5a:	4640      	mov	r0, r8
 8004a5c:	f7ff fbbc 	bl	80041d8 <_free_r>
 8004a60:	e7e1      	b.n	8004a26 <_realloc_r+0x1e>
 8004a62:	4635      	mov	r5, r6
 8004a64:	e7df      	b.n	8004a26 <_realloc_r+0x1e>

08004a66 <_malloc_usable_size_r>:
 8004a66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a6a:	1f18      	subs	r0, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bfbc      	itt	lt
 8004a70:	580b      	ldrlt	r3, [r1, r0]
 8004a72:	18c0      	addlt	r0, r0, r3
 8004a74:	4770      	bx	lr
	...

08004a78 <_init>:
 8004a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7a:	bf00      	nop
 8004a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7e:	bc08      	pop	{r3}
 8004a80:	469e      	mov	lr, r3
 8004a82:	4770      	bx	lr

08004a84 <_fini>:
 8004a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a86:	bf00      	nop
 8004a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8a:	bc08      	pop	{r3}
 8004a8c:	469e      	mov	lr, r3
 8004a8e:	4770      	bx	lr
