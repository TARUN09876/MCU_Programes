
free_Rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800415c  0800415c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800415c  0800415c  0001415c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004164  08004164  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004164  08004164  00014164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004168  08004168  00014168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800416c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004204  20000060  080041cc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004264  080041cc  00024264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001389e  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c2a  00000000  00000000  00033971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  000365a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d35  00000000  00000000  00037698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000231f0  00000000  00000000  000383cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013c53  00000000  00000000  0005b5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8f1f  00000000  00000000  0006f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000497c  00000000  00000000  00148130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0014caac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004004 	.word	0x08004004

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08004004 	.word	0x08004004

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000007c 	.word	0x2000007c
 800053c:	2000011c 	.word	0x2000011c

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b0b8      	sub	sp, #224	; 0xe0
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fb79 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f8bd 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f951 	bl	80007f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f925 	bl	80007a0 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LED_01 */
  osThreadDef(LED_01, StartLED_01, osPriorityNormal, 0, 128);
 8000556:	4b4c      	ldr	r3, [pc, #304]	; (8000688 <main+0x148>)
 8000558:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 800055c:	461d      	mov	r5, r3
 800055e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000562:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000566:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_01Handle = osThreadCreate(osThread(LED_01), NULL);
 800056a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f002 fa12 	bl	800299a <osThreadCreate>
 8000576:	4603      	mov	r3, r0
 8000578:	4a44      	ldr	r2, [pc, #272]	; (800068c <main+0x14c>)
 800057a:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_02 */
  osThreadDef(LED_02, StartLED_02, osPriorityNormal, 0, 128);
 800057c:	4b44      	ldr	r3, [pc, #272]	; (8000690 <main+0x150>)
 800057e:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000582:	461d      	mov	r5, r3
 8000584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000588:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_02Handle = osThreadCreate(osThread(LED_02), NULL);
 8000590:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 f9ff 	bl	800299a <osThreadCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a3d      	ldr	r2, [pc, #244]	; (8000694 <main+0x154>)
 80005a0:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_03 */
  osThreadDef(LED_03, StartTask03, osPriorityNormal, 0, 128);
 80005a2:	4b3d      	ldr	r3, [pc, #244]	; (8000698 <main+0x158>)
 80005a4:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_03Handle = osThreadCreate(osThread(LED_03), NULL);
 80005b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 f9ec 	bl	800299a <osThreadCreate>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a35      	ldr	r2, [pc, #212]	; (800069c <main+0x15c>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_04 */
  osThreadDef(LED_04, StartLED_04, osPriorityNormal, 0, 128);
 80005c8:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <main+0x160>)
 80005ca:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_04Handle = osThreadCreate(osThread(LED_04), NULL);
 80005dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 f9d9 	bl	800299a <osThreadCreate>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a2e      	ldr	r2, [pc, #184]	; (80006a4 <main+0x164>)
 80005ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_05 */
  osThreadDef(LED_05, StartLED_05, osPriorityLow, 0, 128);
 80005ee:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <main+0x168>)
 80005f0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005f4:	461d      	mov	r5, r3
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_05Handle = osThreadCreate(osThread(LED_05), NULL);
 8000602:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f002 f9c6 	bl	800299a <osThreadCreate>
 800060e:	4603      	mov	r3, r0
 8000610:	4a26      	ldr	r2, [pc, #152]	; (80006ac <main+0x16c>)
 8000612:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_06 */
  osThreadDef(LED_06, StartLED_06, osPriorityLow, 0, 128);
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <main+0x170>)
 8000616:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_06Handle = osThreadCreate(osThread(LED_06), NULL);
 8000628:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f002 f9b3 	bl	800299a <osThreadCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <main+0x174>)
 8000638:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_07 */
  osThreadDef(LED_07, StartLED_07, osPriorityLow, 0, 128);
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <main+0x178>)
 800063c:	f107 041c 	add.w	r4, r7, #28
 8000640:	461d      	mov	r5, r3
 8000642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000646:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_07Handle = osThreadCreate(osThread(LED_07), NULL);
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f002 f9a0 	bl	800299a <osThreadCreate>
 800065a:	4603      	mov	r3, r0
 800065c:	4a17      	ldr	r2, [pc, #92]	; (80006bc <main+0x17c>)
 800065e:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_08 */
  osThreadDef(LED_08, StartTLED_08, osPriorityLow, 0, 128);
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <main+0x180>)
 8000662:	463c      	mov	r4, r7
 8000664:	461d      	mov	r5, r3
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_08Handle = osThreadCreate(osThread(LED_08), NULL);
 8000672:	463b      	mov	r3, r7
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f002 f98f 	bl	800299a <osThreadCreate>
 800067c:	4603      	mov	r3, r0
 800067e:	4a11      	ldr	r2, [pc, #68]	; (80006c4 <main+0x184>)
 8000680:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000682:	f002 f983 	bl	800298c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000686:	e7fe      	b.n	8000686 <main+0x146>
 8000688:	08004024 	.word	0x08004024
 800068c:	20000364 	.word	0x20000364
 8000690:	08004048 	.word	0x08004048
 8000694:	20000368 	.word	0x20000368
 8000698:	0800406c 	.word	0x0800406c
 800069c:	2000036c 	.word	0x2000036c
 80006a0:	08004090 	.word	0x08004090
 80006a4:	20000370 	.word	0x20000370
 80006a8:	080040b4 	.word	0x080040b4
 80006ac:	20000374 	.word	0x20000374
 80006b0:	080040d8 	.word	0x080040d8
 80006b4:	20000378 	.word	0x20000378
 80006b8:	080040fc 	.word	0x080040fc
 80006bc:	2000037c 	.word	0x2000037c
 80006c0:	08004120 	.word	0x08004120
 80006c4:	20000380 	.word	0x20000380

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	2234      	movs	r2, #52	; 0x34
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fbb8 	bl	8003e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <SystemClock_Config+0xd0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a28      	ldr	r2, [pc, #160]	; (8000798 <SystemClock_Config+0xd0>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SystemClock_Config+0xd0>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000708:	2300      	movs	r3, #0
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemClock_Config+0xd4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemClock_Config+0xd4>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000728:	2301      	movs	r3, #1
 800072a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000730:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800073c:	2304      	movs	r3, #4
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000740:	2332      	movs	r3, #50	; 0x32
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000748:	2302      	movs	r3, #2
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4618      	mov	r0, r3
 8000756:	f001 f8fd 	bl	8001954 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000760:	f000 f91a 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2302      	movs	r3, #2
 800076a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2101      	movs	r1, #1
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fd6b 	bl	800125c <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800078c:	f000 f904 	bl	8000998 <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	; 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_USART2_UART_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d8:	f001 fdfc 	bl	80023d4 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f8d9 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000031c 	.word	0x2000031c
 80007f0:	40004400 	.word	0x40004400

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_GPIO_Init+0x80>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <MX_GPIO_Init+0x80>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_GPIO_Init+0x80>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_GPIO_Init+0x80>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a11      	ldr	r2, [pc, #68]	; (8000874 <MX_GPIO_Init+0x80>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_GPIO_Init+0x80>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 617f 	mov.w	r1, #4080	; 0xff0
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <MX_GPIO_Init+0x84>)
 800084a:	f000 fcd3 	bl	80011f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800084e:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 8000852:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4619      	mov	r1, r3
 8000866:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_GPIO_Init+0x84>)
 8000868:	f000 fb30 	bl	8000ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086c:	bf00      	nop
 800086e:	3720      	adds	r7, #32
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800
 8000878:	40020000 	.word	0x40020000

0800087c <StartLED_01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLED_01 */
void StartLED_01(void const * argument)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4);
 8000884:	2110      	movs	r1, #16
 8000886:	4803      	ldr	r0, [pc, #12]	; (8000894 <StartLED_01+0x18>)
 8000888:	f000 fccd 	bl	8001226 <HAL_GPIO_TogglePin>
    osDelay(100);
 800088c:	2064      	movs	r0, #100	; 0x64
 800088e:	f002 f8d0 	bl	8002a32 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4);
 8000892:	e7f7      	b.n	8000884 <StartLED_01+0x8>
 8000894:	40020000 	.word	0x40020000

08000898 <StartLED_02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_02 */
void StartLED_02(void const * argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80008a0:	2120      	movs	r1, #32
 80008a2:	4803      	ldr	r0, [pc, #12]	; (80008b0 <StartLED_02+0x18>)
 80008a4:	f000 fcbf 	bl	8001226 <HAL_GPIO_TogglePin>
    osDelay(200);
 80008a8:	20c8      	movs	r0, #200	; 0xc8
 80008aa:	f002 f8c2 	bl	8002a32 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80008ae:	e7f7      	b.n	80008a0 <StartLED_02+0x8>
 80008b0:	40020000 	.word	0x40020000

080008b4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
 80008bc:	2140      	movs	r1, #64	; 0x40
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <StartTask03+0x1c>)
 80008c0:	f000 fcb1 	bl	8001226 <HAL_GPIO_TogglePin>
    osDelay(300);
 80008c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008c8:	f002 f8b3 	bl	8002a32 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
 80008cc:	e7f6      	b.n	80008bc <StartTask03+0x8>
 80008ce:	bf00      	nop
 80008d0:	40020000 	.word	0x40020000

080008d4 <StartLED_04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_04 */
void StartLED_04(void const * argument)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_04 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	4804      	ldr	r0, [pc, #16]	; (80008f0 <StartLED_04+0x1c>)
 80008e0:	f000 fca1 	bl	8001226 <HAL_GPIO_TogglePin>
    osDelay(400);
 80008e4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008e8:	f002 f8a3 	bl	8002a32 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
 80008ec:	e7f6      	b.n	80008dc <StartLED_04+0x8>
 80008ee:	bf00      	nop
 80008f0:	40020000 	.word	0x40020000

080008f4 <StartLED_05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_05 */
void StartLED_05(void const * argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_05 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_8);
 80008fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <StartLED_05+0x1c>)
 8000902:	f000 fc90 	bl	8001226 <HAL_GPIO_TogglePin>
   // osDelay(500);
	  HAL_Delay(500);
 8000906:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800090a:	f000 f9d9 	bl	8000cc0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_8);
 800090e:	e7f5      	b.n	80008fc <StartLED_05+0x8>
 8000910:	40020000 	.word	0x40020000

08000914 <StartLED_06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_06 */
void StartLED_06(void const * argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_06 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_9);
 800091c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <StartLED_06+0x1c>)
 8000922:	f000 fc80 	bl	8001226 <HAL_GPIO_TogglePin>
    //osDelay(600);
	  HAL_Delay(600);
 8000926:	f44f 7016 	mov.w	r0, #600	; 0x258
 800092a:	f000 f9c9 	bl	8000cc0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_9);
 800092e:	e7f5      	b.n	800091c <StartLED_06+0x8>
 8000930:	40020000 	.word	0x40020000

08000934 <StartLED_07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_07 */
void StartLED_07(void const * argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_07 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_10);
 800093c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <StartLED_07+0x1c>)
 8000942:	f000 fc70 	bl	8001226 <HAL_GPIO_TogglePin>
   // osDelay(700);
	  HAL_Delay(700);
 8000946:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800094a:	f000 f9b9 	bl	8000cc0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_10);
 800094e:	e7f5      	b.n	800093c <StartLED_07+0x8>
 8000950:	40020000 	.word	0x40020000

08000954 <StartTLED_08>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTLED_08 */
void StartTLED_08(void const * argument)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTLED_08 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_11);
 800095c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000960:	4803      	ldr	r0, [pc, #12]	; (8000970 <StartTLED_08+0x1c>)
 8000962:	f000 fc60 	bl	8001226 <HAL_GPIO_TogglePin>
    //osDelay(800);
	  HAL_Delay(800);
 8000966:	f44f 7048 	mov.w	r0, #800	; 0x320
 800096a:	f000 f9a9 	bl	8000cc0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_11);
 800096e:	e7f5      	b.n	800095c <StartTLED_08+0x8>
 8000970:	40020000 	.word	0x40020000

08000974 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d101      	bne.n	800098a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000986:	f000 f97b 	bl	8000c80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40000400 	.word	0x40000400

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <Error_Handler+0x8>
	...

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_MspInit+0x54>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <HAL_MspInit+0x54>)
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_MspInit+0x54>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <HAL_MspInit+0x54>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_MspInit+0x54>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_MspInit+0x54>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	210f      	movs	r1, #15
 80009e6:	f06f 0001 	mvn.w	r0, #1
 80009ea:	f000 fa45 	bl	8000e78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <HAL_UART_MspInit+0x84>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d12b      	bne.n	8000a76 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a56:	230c      	movs	r3, #12
 8000a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a66:	2307      	movs	r3, #7
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <HAL_UART_MspInit+0x8c>)
 8000a72:	f000 fa2b 	bl	8000ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40004400 	.word	0x40004400
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000

08000a8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	; 0x38
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	4b33      	ldr	r3, [pc, #204]	; (8000b70 <HAL_InitTick+0xe4>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a32      	ldr	r2, [pc, #200]	; (8000b70 <HAL_InitTick+0xe4>)
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <HAL_InitTick+0xe4>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ab8:	f107 0210 	add.w	r2, r7, #16
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fce4 	bl	8001490 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ac8:	6a3b      	ldr	r3, [r7, #32]
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d103      	bne.n	8000ada <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ad2:	f000 fcb5 	bl	8001440 <HAL_RCC_GetPCLK1Freq>
 8000ad6:	6378      	str	r0, [r7, #52]	; 0x34
 8000ad8:	e004      	b.n	8000ae4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ada:	f000 fcb1 	bl	8001440 <HAL_RCC_GetPCLK1Freq>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae6:	4a23      	ldr	r2, [pc, #140]	; (8000b74 <HAL_InitTick+0xe8>)
 8000ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8000aec:	0c9b      	lsrs	r3, r3, #18
 8000aee:	3b01      	subs	r3, #1
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000af2:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_InitTick+0xec>)
 8000af4:	4a21      	ldr	r2, [pc, #132]	; (8000b7c <HAL_InitTick+0xf0>)
 8000af6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <HAL_InitTick+0xec>)
 8000afa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000afe:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <HAL_InitTick+0xec>)
 8000b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b04:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <HAL_InitTick+0xec>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <HAL_InitTick+0xec>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_InitTick+0xec>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000b18:	4817      	ldr	r0, [pc, #92]	; (8000b78 <HAL_InitTick+0xec>)
 8000b1a:	f001 f9b9 	bl	8001e90 <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d11b      	bne.n	8000b64 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000b2c:	4812      	ldr	r0, [pc, #72]	; (8000b78 <HAL_InitTick+0xec>)
 8000b2e:	f001 fa09 	bl	8001f44 <HAL_TIM_Base_Start_IT>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d111      	bne.n	8000b64 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b40:	201d      	movs	r0, #29
 8000b42:	f000 f9b5 	bl	8000eb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0f      	cmp	r3, #15
 8000b4a:	d808      	bhi.n	8000b5e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	201d      	movs	r0, #29
 8000b52:	f000 f991 	bl	8000e78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_InitTick+0xf4>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	e002      	b.n	8000b64 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3738      	adds	r7, #56	; 0x38
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	431bde83 	.word	0x431bde83
 8000b78:	20000384 	.word	0x20000384
 8000b7c:	40000400 	.word	0x40000400
 8000b80:	20000004 	.word	0x20000004

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <TIM3_IRQHandler+0x10>)
 8000bb6:	f001 fa35 	bl	8002024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000384 	.word	0x20000384

08000bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <SystemInit+0x20>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <SystemInit+0x20>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bec:	f7ff ffea 	bl	8000bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bf2:	490d      	ldr	r1, [pc, #52]	; (8000c28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c08:	4c0a      	ldr	r4, [pc, #40]	; (8000c34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f003 f977 	bl	8003f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1a:	f7ff fc91 	bl	8000540 <main>
  bx  lr    
 8000c1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c2c:	0800416c 	.word	0x0800416c
  ldr r2, =_sbss
 8000c30:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c34:	20004264 	.word	0x20004264

08000c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <HAL_Init+0x40>)
 8000c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_Init+0x40>)
 8000c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_Init+0x40>)
 8000c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f8fc 	bl	8000e62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f7ff ff0e 	bl	8000a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f7ff fe98 	bl	80009a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023c00 	.word	0x40023c00

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	200003cc 	.word	0x200003cc

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	200003cc 	.word	0x200003cc

08000cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc8:	f7ff ffee 	bl	8000ca8 <HAL_GetTick>
 8000ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd8:	d005      	beq.n	8000ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_Delay+0x44>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ce6:	bf00      	nop
 8000ce8:	f7ff ffde 	bl	8000ca8 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d8f7      	bhi.n	8000ce8 <HAL_Delay+0x28>
  {
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4907      	ldr	r1, [pc, #28]	; (8000da4 <__NVIC_EnableIRQ+0x38>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ff4c 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8a:	f7ff ff61 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000e8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	68b9      	ldr	r1, [r7, #8]
 8000e94:	6978      	ldr	r0, [r7, #20]
 8000e96:	f7ff ffb1 	bl	8000dfc <NVIC_EncodePriority>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff80 	bl	8000da8 <__NVIC_SetPriority>
}
 8000ea8:	bf00      	nop
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff54 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	e165      	b.n	80011b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	f040 8154 	bne.w	80011ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d005      	beq.n	8000f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d130      	bne.n	8000f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	f003 0201 	and.w	r2, r3, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d017      	beq.n	8000fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d123      	bne.n	8001010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	69b9      	ldr	r1, [r7, #24]
 800100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0203 	and.w	r2, r3, #3
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80ae 	beq.w	80011ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b5d      	ldr	r3, [pc, #372]	; (80011cc <HAL_GPIO_Init+0x300>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a5c      	ldr	r2, [pc, #368]	; (80011cc <HAL_GPIO_Init+0x300>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b5a      	ldr	r3, [pc, #360]	; (80011cc <HAL_GPIO_Init+0x300>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106e:	4a58      	ldr	r2, [pc, #352]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4f      	ldr	r2, [pc, #316]	; (80011d4 <HAL_GPIO_Init+0x308>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d025      	beq.n	80010e6 <HAL_GPIO_Init+0x21a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4e      	ldr	r2, [pc, #312]	; (80011d8 <HAL_GPIO_Init+0x30c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d01f      	beq.n	80010e2 <HAL_GPIO_Init+0x216>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4d      	ldr	r2, [pc, #308]	; (80011dc <HAL_GPIO_Init+0x310>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d019      	beq.n	80010de <HAL_GPIO_Init+0x212>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4c      	ldr	r2, [pc, #304]	; (80011e0 <HAL_GPIO_Init+0x314>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_GPIO_Init+0x20e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4b      	ldr	r2, [pc, #300]	; (80011e4 <HAL_GPIO_Init+0x318>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d00d      	beq.n	80010d6 <HAL_GPIO_Init+0x20a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4a      	ldr	r2, [pc, #296]	; (80011e8 <HAL_GPIO_Init+0x31c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d007      	beq.n	80010d2 <HAL_GPIO_Init+0x206>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a49      	ldr	r2, [pc, #292]	; (80011ec <HAL_GPIO_Init+0x320>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_GPIO_Init+0x202>
 80010ca:	2306      	movs	r3, #6
 80010cc:	e00c      	b.n	80010e8 <HAL_GPIO_Init+0x21c>
 80010ce:	2307      	movs	r3, #7
 80010d0:	e00a      	b.n	80010e8 <HAL_GPIO_Init+0x21c>
 80010d2:	2305      	movs	r3, #5
 80010d4:	e008      	b.n	80010e8 <HAL_GPIO_Init+0x21c>
 80010d6:	2304      	movs	r3, #4
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x21c>
 80010da:	2303      	movs	r3, #3
 80010dc:	e004      	b.n	80010e8 <HAL_GPIO_Init+0x21c>
 80010de:	2302      	movs	r3, #2
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_Init+0x21c>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x21c>
 80010e6:	2300      	movs	r3, #0
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	f002 0203 	and.w	r2, r2, #3
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	4093      	lsls	r3, r2
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f8:	4935      	ldr	r1, [pc, #212]	; (80011d0 <HAL_GPIO_Init+0x304>)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001106:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <HAL_GPIO_Init+0x324>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112a:	4a31      	ldr	r2, [pc, #196]	; (80011f0 <HAL_GPIO_Init+0x324>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001130:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <HAL_GPIO_Init+0x324>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001154:	4a26      	ldr	r2, [pc, #152]	; (80011f0 <HAL_GPIO_Init+0x324>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800115a:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <HAL_GPIO_Init+0x324>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800117e:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <HAL_GPIO_Init+0x324>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <HAL_GPIO_Init+0x324>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a8:	4a11      	ldr	r2, [pc, #68]	; (80011f0 <HAL_GPIO_Init+0x324>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3301      	adds	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b0f      	cmp	r3, #15
 80011b8:	f67f ae96 	bls.w	8000ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40013800 	.word	0x40013800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40021400 	.word	0x40021400
 80011ec:	40021800 	.word	0x40021800
 80011f0:	40013c00 	.word	0x40013c00

080011f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
 8001200:	4613      	mov	r3, r2
 8001202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001204:	787b      	ldrb	r3, [r7, #1]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001210:	e003      	b.n	800121a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	041a      	lsls	r2, r3, #16
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	619a      	str	r2, [r3, #24]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001226:	b480      	push	{r7}
 8001228:	b085      	sub	sp, #20
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001238:	887a      	ldrh	r2, [r7, #2]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4013      	ands	r3, r2
 800123e:	041a      	lsls	r2, r3, #16
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43d9      	mvns	r1, r3
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	400b      	ands	r3, r1
 8001248:	431a      	orrs	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	619a      	str	r2, [r3, #24]
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e0cc      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001270:	4b68      	ldr	r3, [pc, #416]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 030f 	and.w	r3, r3, #15
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d90c      	bls.n	8001298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	4b65      	ldr	r3, [pc, #404]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001286:	4b63      	ldr	r3, [pc, #396]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e0b8      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d020      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b0:	4b59      	ldr	r3, [pc, #356]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	4a58      	ldr	r2, [pc, #352]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c8:	4b53      	ldr	r3, [pc, #332]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4a52      	ldr	r2, [pc, #328]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d4:	4b50      	ldr	r3, [pc, #320]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	494d      	ldr	r1, [pc, #308]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d044      	beq.n	800137c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d107      	bne.n	800130a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d119      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e07f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d003      	beq.n	800131a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001316:	2b03      	cmp	r3, #3
 8001318:	d107      	bne.n	800132a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131a:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e06f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132a:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e067      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133a:	4b37      	ldr	r3, [pc, #220]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f023 0203 	bic.w	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4934      	ldr	r1, [pc, #208]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 8001348:	4313      	orrs	r3, r2
 800134a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800134c:	f7ff fcac 	bl	8000ca8 <HAL_GetTick>
 8001350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001352:	e00a      	b.n	800136a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001354:	f7ff fca8 	bl	8000ca8 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e04f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136a:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 020c 	and.w	r2, r3, #12
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	429a      	cmp	r2, r3
 800137a:	d1eb      	bne.n	8001354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800137c:	4b25      	ldr	r3, [pc, #148]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 030f 	and.w	r3, r3, #15
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d20c      	bcs.n	80013a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e032      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4916      	ldr	r1, [pc, #88]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	490e      	ldr	r1, [pc, #56]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013e2:	f000 f887 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 80013e6:	4602      	mov	r2, r0
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	490a      	ldr	r1, [pc, #40]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	5ccb      	ldrb	r3, [r1, r3]
 80013f6:	fa22 f303 	lsr.w	r3, r2, r3
 80013fa:	4a09      	ldr	r2, [pc, #36]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_RCC_ClockConfig+0x1c8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fb42 	bl	8000a8c <HAL_InitTick>

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023c00 	.word	0x40023c00
 8001418:	40023800 	.word	0x40023800
 800141c:	08004144 	.word	0x08004144
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <HAL_RCC_GetHCLKFreq+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000

08001440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001444:	f7ff fff0 	bl	8001428 <HAL_RCC_GetHCLKFreq>
 8001448:	4602      	mov	r2, r0
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	0a9b      	lsrs	r3, r3, #10
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	4903      	ldr	r1, [pc, #12]	; (8001464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001456:	5ccb      	ldrb	r3, [r1, r3]
 8001458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800145c:	4618      	mov	r0, r3
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	08004154 	.word	0x08004154

08001468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800146c:	f7ff ffdc 	bl	8001428 <HAL_RCC_GetHCLKFreq>
 8001470:	4602      	mov	r2, r0
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	0b5b      	lsrs	r3, r3, #13
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	4903      	ldr	r1, [pc, #12]	; (800148c <HAL_RCC_GetPCLK2Freq+0x24>)
 800147e:	5ccb      	ldrb	r3, [r1, r3]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001484:	4618      	mov	r0, r3
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	08004154 	.word	0x08004154

08001490 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	220f      	movs	r2, #15
 800149e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	08db      	lsrs	r3, r3, #3
 80014ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_RCC_GetClockConfig+0x60>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 020f 	and.w	r2, r3, #15
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014f8:	b0ae      	sub	sp, #184	; 0xb8
 80014fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800151a:	4bcb      	ldr	r3, [pc, #812]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b0c      	cmp	r3, #12
 8001524:	f200 8206 	bhi.w	8001934 <HAL_RCC_GetSysClockFreq+0x440>
 8001528:	a201      	add	r2, pc, #4	; (adr r2, 8001530 <HAL_RCC_GetSysClockFreq+0x3c>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	08001565 	.word	0x08001565
 8001534:	08001935 	.word	0x08001935
 8001538:	08001935 	.word	0x08001935
 800153c:	08001935 	.word	0x08001935
 8001540:	0800156d 	.word	0x0800156d
 8001544:	08001935 	.word	0x08001935
 8001548:	08001935 	.word	0x08001935
 800154c:	08001935 	.word	0x08001935
 8001550:	08001575 	.word	0x08001575
 8001554:	08001935 	.word	0x08001935
 8001558:	08001935 	.word	0x08001935
 800155c:	08001935 	.word	0x08001935
 8001560:	08001765 	.word	0x08001765
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001564:	4bb9      	ldr	r3, [pc, #740]	; (800184c <HAL_RCC_GetSysClockFreq+0x358>)
 8001566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800156a:	e1e7      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800156c:	4bb8      	ldr	r3, [pc, #736]	; (8001850 <HAL_RCC_GetSysClockFreq+0x35c>)
 800156e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001572:	e1e3      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001574:	4bb4      	ldr	r3, [pc, #720]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800157c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001580:	4bb1      	ldr	r3, [pc, #708]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d071      	beq.n	8001670 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800158c:	4bae      	ldr	r3, [pc, #696]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	099b      	lsrs	r3, r3, #6
 8001592:	2200      	movs	r2, #0
 8001594:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001598:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800159c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80015ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80015b2:	4622      	mov	r2, r4
 80015b4:	462b      	mov	r3, r5
 80015b6:	f04f 0000 	mov.w	r0, #0
 80015ba:	f04f 0100 	mov.w	r1, #0
 80015be:	0159      	lsls	r1, r3, #5
 80015c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015c4:	0150      	lsls	r0, r2, #5
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4621      	mov	r1, r4
 80015cc:	1a51      	subs	r1, r2, r1
 80015ce:	6439      	str	r1, [r7, #64]	; 0x40
 80015d0:	4629      	mov	r1, r5
 80015d2:	eb63 0301 	sbc.w	r3, r3, r1
 80015d6:	647b      	str	r3, [r7, #68]	; 0x44
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80015e4:	4649      	mov	r1, r9
 80015e6:	018b      	lsls	r3, r1, #6
 80015e8:	4641      	mov	r1, r8
 80015ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ee:	4641      	mov	r1, r8
 80015f0:	018a      	lsls	r2, r1, #6
 80015f2:	4641      	mov	r1, r8
 80015f4:	1a51      	subs	r1, r2, r1
 80015f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80015f8:	4649      	mov	r1, r9
 80015fa:	eb63 0301 	sbc.w	r3, r3, r1
 80015fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800160c:	4649      	mov	r1, r9
 800160e:	00cb      	lsls	r3, r1, #3
 8001610:	4641      	mov	r1, r8
 8001612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001616:	4641      	mov	r1, r8
 8001618:	00ca      	lsls	r2, r1, #3
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	4603      	mov	r3, r0
 8001620:	4622      	mov	r2, r4
 8001622:	189b      	adds	r3, r3, r2
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
 8001626:	462b      	mov	r3, r5
 8001628:	460a      	mov	r2, r1
 800162a:	eb42 0303 	adc.w	r3, r2, r3
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800163c:	4629      	mov	r1, r5
 800163e:	024b      	lsls	r3, r1, #9
 8001640:	4621      	mov	r1, r4
 8001642:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001646:	4621      	mov	r1, r4
 8001648:	024a      	lsls	r2, r1, #9
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001652:	2200      	movs	r2, #0
 8001654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001658:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800165c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001660:	f7fe fdd6 	bl	8000210 <__aeabi_uldivmod>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4613      	mov	r3, r2
 800166a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800166e:	e067      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001670:	4b75      	ldr	r3, [pc, #468]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	099b      	lsrs	r3, r3, #6
 8001676:	2200      	movs	r2, #0
 8001678:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800167c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001680:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001688:	67bb      	str	r3, [r7, #120]	; 0x78
 800168a:	2300      	movs	r3, #0
 800168c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800168e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001692:	4622      	mov	r2, r4
 8001694:	462b      	mov	r3, r5
 8001696:	f04f 0000 	mov.w	r0, #0
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	0159      	lsls	r1, r3, #5
 80016a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a4:	0150      	lsls	r0, r2, #5
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4621      	mov	r1, r4
 80016ac:	1a51      	subs	r1, r2, r1
 80016ae:	62b9      	str	r1, [r7, #40]	; 0x28
 80016b0:	4629      	mov	r1, r5
 80016b2:	eb63 0301 	sbc.w	r3, r3, r1
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80016c4:	4649      	mov	r1, r9
 80016c6:	018b      	lsls	r3, r1, #6
 80016c8:	4641      	mov	r1, r8
 80016ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ce:	4641      	mov	r1, r8
 80016d0:	018a      	lsls	r2, r1, #6
 80016d2:	4641      	mov	r1, r8
 80016d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80016d8:	4649      	mov	r1, r9
 80016da:	eb63 0b01 	sbc.w	fp, r3, r1
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016f2:	4692      	mov	sl, r2
 80016f4:	469b      	mov	fp, r3
 80016f6:	4623      	mov	r3, r4
 80016f8:	eb1a 0303 	adds.w	r3, sl, r3
 80016fc:	623b      	str	r3, [r7, #32]
 80016fe:	462b      	mov	r3, r5
 8001700:	eb4b 0303 	adc.w	r3, fp, r3
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001712:	4629      	mov	r1, r5
 8001714:	028b      	lsls	r3, r1, #10
 8001716:	4621      	mov	r1, r4
 8001718:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800171c:	4621      	mov	r1, r4
 800171e:	028a      	lsls	r2, r1, #10
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001728:	2200      	movs	r2, #0
 800172a:	673b      	str	r3, [r7, #112]	; 0x70
 800172c:	677a      	str	r2, [r7, #116]	; 0x74
 800172e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001732:	f7fe fd6d 	bl	8000210 <__aeabi_uldivmod>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4613      	mov	r3, r2
 800173c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001740:	4b41      	ldr	r3, [pc, #260]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	0c1b      	lsrs	r3, r3, #16
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	3301      	adds	r3, #1
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001752:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001756:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001762:	e0eb      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001764:	4b38      	ldr	r3, [pc, #224]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800176c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001770:	4b35      	ldr	r3, [pc, #212]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d06b      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177c:	4b32      	ldr	r3, [pc, #200]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	2200      	movs	r2, #0
 8001784:	66bb      	str	r3, [r7, #104]	; 0x68
 8001786:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800178a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800178e:	663b      	str	r3, [r7, #96]	; 0x60
 8001790:	2300      	movs	r3, #0
 8001792:	667b      	str	r3, [r7, #100]	; 0x64
 8001794:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001798:	4622      	mov	r2, r4
 800179a:	462b      	mov	r3, r5
 800179c:	f04f 0000 	mov.w	r0, #0
 80017a0:	f04f 0100 	mov.w	r1, #0
 80017a4:	0159      	lsls	r1, r3, #5
 80017a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017aa:	0150      	lsls	r0, r2, #5
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4621      	mov	r1, r4
 80017b2:	1a51      	subs	r1, r2, r1
 80017b4:	61b9      	str	r1, [r7, #24]
 80017b6:	4629      	mov	r1, r5
 80017b8:	eb63 0301 	sbc.w	r3, r3, r1
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017ca:	4659      	mov	r1, fp
 80017cc:	018b      	lsls	r3, r1, #6
 80017ce:	4651      	mov	r1, sl
 80017d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017d4:	4651      	mov	r1, sl
 80017d6:	018a      	lsls	r2, r1, #6
 80017d8:	4651      	mov	r1, sl
 80017da:	ebb2 0801 	subs.w	r8, r2, r1
 80017de:	4659      	mov	r1, fp
 80017e0:	eb63 0901 	sbc.w	r9, r3, r1
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017f8:	4690      	mov	r8, r2
 80017fa:	4699      	mov	r9, r3
 80017fc:	4623      	mov	r3, r4
 80017fe:	eb18 0303 	adds.w	r3, r8, r3
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	462b      	mov	r3, r5
 8001806:	eb49 0303 	adc.w	r3, r9, r3
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001818:	4629      	mov	r1, r5
 800181a:	024b      	lsls	r3, r1, #9
 800181c:	4621      	mov	r1, r4
 800181e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001822:	4621      	mov	r1, r4
 8001824:	024a      	lsls	r2, r1, #9
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800182e:	2200      	movs	r2, #0
 8001830:	65bb      	str	r3, [r7, #88]	; 0x58
 8001832:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001834:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001838:	f7fe fcea 	bl	8000210 <__aeabi_uldivmod>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4613      	mov	r3, r2
 8001842:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001846:	e065      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x420>
 8001848:	40023800 	.word	0x40023800
 800184c:	00f42400 	.word	0x00f42400
 8001850:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001854:	4b3d      	ldr	r3, [pc, #244]	; (800194c <HAL_RCC_GetSysClockFreq+0x458>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	099b      	lsrs	r3, r3, #6
 800185a:	2200      	movs	r2, #0
 800185c:	4618      	mov	r0, r3
 800185e:	4611      	mov	r1, r2
 8001860:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001864:	653b      	str	r3, [r7, #80]	; 0x50
 8001866:	2300      	movs	r3, #0
 8001868:	657b      	str	r3, [r7, #84]	; 0x54
 800186a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800186e:	4642      	mov	r2, r8
 8001870:	464b      	mov	r3, r9
 8001872:	f04f 0000 	mov.w	r0, #0
 8001876:	f04f 0100 	mov.w	r1, #0
 800187a:	0159      	lsls	r1, r3, #5
 800187c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001880:	0150      	lsls	r0, r2, #5
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4641      	mov	r1, r8
 8001888:	1a51      	subs	r1, r2, r1
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	4649      	mov	r1, r9
 800188e:	eb63 0301 	sbc.w	r3, r3, r1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018a0:	4659      	mov	r1, fp
 80018a2:	018b      	lsls	r3, r1, #6
 80018a4:	4651      	mov	r1, sl
 80018a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018aa:	4651      	mov	r1, sl
 80018ac:	018a      	lsls	r2, r1, #6
 80018ae:	4651      	mov	r1, sl
 80018b0:	1a54      	subs	r4, r2, r1
 80018b2:	4659      	mov	r1, fp
 80018b4:	eb63 0501 	sbc.w	r5, r3, r1
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	00eb      	lsls	r3, r5, #3
 80018c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018c6:	00e2      	lsls	r2, r4, #3
 80018c8:	4614      	mov	r4, r2
 80018ca:	461d      	mov	r5, r3
 80018cc:	4643      	mov	r3, r8
 80018ce:	18e3      	adds	r3, r4, r3
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	464b      	mov	r3, r9
 80018d4:	eb45 0303 	adc.w	r3, r5, r3
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018e6:	4629      	mov	r1, r5
 80018e8:	028b      	lsls	r3, r1, #10
 80018ea:	4621      	mov	r1, r4
 80018ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018f0:	4621      	mov	r1, r4
 80018f2:	028a      	lsls	r2, r1, #10
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018fc:	2200      	movs	r2, #0
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001900:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001902:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001906:	f7fe fc83 	bl	8000210 <__aeabi_uldivmod>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4613      	mov	r3, r2
 8001910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_RCC_GetSysClockFreq+0x458>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	0f1b      	lsrs	r3, r3, #28
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001926:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001932:	e003      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800193a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800193c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001940:	4618      	mov	r0, r3
 8001942:	37b8      	adds	r7, #184	; 0xb8
 8001944:	46bd      	mov	sp, r7
 8001946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	00f42400 	.word	0x00f42400

08001954 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e28d      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 8083 	beq.w	8001a7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001974:	4b94      	ldr	r3, [pc, #592]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b04      	cmp	r3, #4
 800197e:	d019      	beq.n	80019b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001980:	4b91      	ldr	r3, [pc, #580]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001988:	2b08      	cmp	r3, #8
 800198a:	d106      	bne.n	800199a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800198c:	4b8e      	ldr	r3, [pc, #568]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001998:	d00c      	beq.n	80019b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199a:	4b8b      	ldr	r3, [pc, #556]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d112      	bne.n	80019cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a6:	4b88      	ldr	r3, [pc, #544]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b2:	d10b      	bne.n	80019cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	4b84      	ldr	r3, [pc, #528]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d05b      	beq.n	8001a78 <HAL_RCC_OscConfig+0x124>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d157      	bne.n	8001a78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e25a      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d4:	d106      	bne.n	80019e4 <HAL_RCC_OscConfig+0x90>
 80019d6:	4b7c      	ldr	r3, [pc, #496]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a7b      	ldr	r2, [pc, #492]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e01d      	b.n	8001a20 <HAL_RCC_OscConfig+0xcc>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0xb4>
 80019ee:	4b76      	ldr	r3, [pc, #472]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a75      	ldr	r2, [pc, #468]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b73      	ldr	r3, [pc, #460]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a72      	ldr	r2, [pc, #456]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e00b      	b.n	8001a20 <HAL_RCC_OscConfig+0xcc>
 8001a08:	4b6f      	ldr	r3, [pc, #444]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a6e      	ldr	r2, [pc, #440]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b6c      	ldr	r3, [pc, #432]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a6b      	ldr	r2, [pc, #428]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d013      	beq.n	8001a50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f93e 	bl	8000ca8 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a30:	f7ff f93a 	bl	8000ca8 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	; 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e21f      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b61      	ldr	r3, [pc, #388]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0xdc>
 8001a4e:	e014      	b.n	8001a7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f92a 	bl	8000ca8 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff f926 	bl	8000ca8 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e20b      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	4b57      	ldr	r3, [pc, #348]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x104>
 8001a76:	e000      	b.n	8001a7a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d06f      	beq.n	8001b66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a86:	4b50      	ldr	r3, [pc, #320]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d017      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a92:	4b4d      	ldr	r3, [pc, #308]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d105      	bne.n	8001aaa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a9e:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aaa:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	d11c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab6:	4b44      	ldr	r3, [pc, #272]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d116      	bne.n	8001af0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	4b41      	ldr	r3, [pc, #260]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x186>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e1d3      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4937      	ldr	r1, [pc, #220]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	e03a      	b.n	8001b66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af8:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <HAL_RCC_OscConfig+0x278>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afe:	f7ff f8d3 	bl	8000ca8 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b06:	f7ff f8cf 	bl	8000ca8 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e1b4      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4925      	ldr	r1, [pc, #148]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
 8001b38:	e015      	b.n	8001b66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_RCC_OscConfig+0x278>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff f8b2 	bl	8000ca8 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b48:	f7ff f8ae 	bl	8000ca8 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e193      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d036      	beq.n	8001be0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d016      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff f892 	bl	8000ca8 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff f88e 	bl	8000ca8 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e173      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x234>
 8001ba6:	e01b      	b.n	8001be0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bae:	f7ff f87b 	bl	8000ca8 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb4:	e00e      	b.n	8001bd4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb6:	f7ff f877 	bl	8000ca8 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d907      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e15c      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	42470000 	.word	0x42470000
 8001bd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd4:	4b8a      	ldr	r3, [pc, #552]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1ea      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 8097 	beq.w	8001d1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf2:	4b83      	ldr	r3, [pc, #524]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10f      	bne.n	8001c1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	4b7f      	ldr	r3, [pc, #508]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a7e      	ldr	r2, [pc, #504]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b7c      	ldr	r3, [pc, #496]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1e:	4b79      	ldr	r3, [pc, #484]	; (8001e04 <HAL_RCC_OscConfig+0x4b0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d118      	bne.n	8001c5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c2a:	4b76      	ldr	r3, [pc, #472]	; (8001e04 <HAL_RCC_OscConfig+0x4b0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a75      	ldr	r2, [pc, #468]	; (8001e04 <HAL_RCC_OscConfig+0x4b0>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c36:	f7ff f837 	bl	8000ca8 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3e:	f7ff f833 	bl	8000ca8 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e118      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c50:	4b6c      	ldr	r3, [pc, #432]	; (8001e04 <HAL_RCC_OscConfig+0x4b0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d106      	bne.n	8001c72 <HAL_RCC_OscConfig+0x31e>
 8001c64:	4b66      	ldr	r3, [pc, #408]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	4a65      	ldr	r2, [pc, #404]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c70:	e01c      	b.n	8001cac <HAL_RCC_OscConfig+0x358>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x340>
 8001c7a:	4b61      	ldr	r3, [pc, #388]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7e:	4a60      	ldr	r2, [pc, #384]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6713      	str	r3, [r2, #112]	; 0x70
 8001c86:	4b5e      	ldr	r3, [pc, #376]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8a:	4a5d      	ldr	r2, [pc, #372]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6713      	str	r3, [r2, #112]	; 0x70
 8001c92:	e00b      	b.n	8001cac <HAL_RCC_OscConfig+0x358>
 8001c94:	4b5a      	ldr	r3, [pc, #360]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c98:	4a59      	ldr	r2, [pc, #356]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca0:	4b57      	ldr	r3, [pc, #348]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	4a56      	ldr	r2, [pc, #344]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001ca6:	f023 0304 	bic.w	r3, r3, #4
 8001caa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d015      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb4:	f7fe fff8 	bl	8000ca8 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cbc:	f7fe fff4 	bl	8000ca8 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e0d7      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd2:	4b4b      	ldr	r3, [pc, #300]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0ee      	beq.n	8001cbc <HAL_RCC_OscConfig+0x368>
 8001cde:	e014      	b.n	8001d0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7fe ffe2 	bl	8000ca8 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7fe ffde 	bl	8000ca8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0c1      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfe:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1ee      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d105      	bne.n	8001d1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d10:	4b3b      	ldr	r3, [pc, #236]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	4a3a      	ldr	r2, [pc, #232]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80ad 	beq.w	8001e80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d26:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d060      	beq.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d145      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3a:	4b33      	ldr	r3, [pc, #204]	; (8001e08 <HAL_RCC_OscConfig+0x4b4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7fe ffb2 	bl	8000ca8 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d48:	f7fe ffae 	bl	8000ca8 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e093      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5a:	4b29      	ldr	r3, [pc, #164]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69da      	ldr	r2, [r3, #28]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	019b      	lsls	r3, r3, #6
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	085b      	lsrs	r3, r3, #1
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	041b      	lsls	r3, r3, #16
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	061b      	lsls	r3, r3, #24
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	071b      	lsls	r3, r3, #28
 8001d92:	491b      	ldr	r1, [pc, #108]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_RCC_OscConfig+0x4b4>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f7fe ff83 	bl	8000ca8 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da6:	f7fe ff7f 	bl	8000ca8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e064      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x452>
 8001dc4:	e05c      	b.n	8001e80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_RCC_OscConfig+0x4b4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7fe ff6c 	bl	8000ca8 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7fe ff68 	bl	8000ca8 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e04d      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x480>
 8001df2:	e045      	b.n	8001e80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d107      	bne.n	8001e0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e040      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40007000 	.word	0x40007000
 8001e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <HAL_RCC_OscConfig+0x538>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d030      	beq.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d129      	bne.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d122      	bne.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d119      	bne.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	3b01      	subs	r3, #1
 8001e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d10f      	bne.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d107      	bne.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800

08001e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e041      	b.n	8001f26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f839 	bl	8001f2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	f000 f9c0 	bl	8002254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d001      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e04e      	b.n	8001ffa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a23      	ldr	r2, [pc, #140]	; (8002008 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d022      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f86:	d01d      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1f      	ldr	r2, [pc, #124]	; (800200c <HAL_TIM_Base_Start_IT+0xc8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d018      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1c      	ldr	r2, [pc, #112]	; (8002014 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00e      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d009      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a19      	ldr	r2, [pc, #100]	; (800201c <HAL_TIM_Base_Start_IT+0xd8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d004      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a18      	ldr	r2, [pc, #96]	; (8002020 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d111      	bne.n	8001fe8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d010      	beq.n	8001ff8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0201 	orr.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe6:	e007      	b.n	8001ff8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40010000 	.word	0x40010000
 800200c:	40000400 	.word	0x40000400
 8002010:	40000800 	.word	0x40000800
 8002014:	40000c00 	.word	0x40000c00
 8002018:	40010400 	.word	0x40010400
 800201c:	40014000 	.word	0x40014000
 8002020:	40001800 	.word	0x40001800

08002024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d020      	beq.n	8002088 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01b      	beq.n	8002088 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0202 	mvn.w	r2, #2
 8002058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f8d2 	bl	8002218 <HAL_TIM_IC_CaptureCallback>
 8002074:	e005      	b.n	8002082 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8c4 	bl	8002204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f8d5 	bl	800222c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d020      	beq.n	80020d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01b      	beq.n	80020d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0204 	mvn.w	r2, #4
 80020a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2202      	movs	r2, #2
 80020aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8ac 	bl	8002218 <HAL_TIM_IC_CaptureCallback>
 80020c0:	e005      	b.n	80020ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f89e 	bl	8002204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f8af 	bl	800222c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d020      	beq.n	8002120 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01b      	beq.n	8002120 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0208 	mvn.w	r2, #8
 80020f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2204      	movs	r2, #4
 80020f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f886 	bl	8002218 <HAL_TIM_IC_CaptureCallback>
 800210c:	e005      	b.n	800211a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f878 	bl	8002204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f889 	bl	800222c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	2b00      	cmp	r3, #0
 8002128:	d020      	beq.n	800216c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01b      	beq.n	800216c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0210 	mvn.w	r2, #16
 800213c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2208      	movs	r2, #8
 8002142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f860 	bl	8002218 <HAL_TIM_IC_CaptureCallback>
 8002158:	e005      	b.n	8002166 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f852 	bl	8002204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f863 	bl	800222c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00c      	beq.n	8002190 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0201 	mvn.w	r2, #1
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe fbf2 	bl	8000974 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00c      	beq.n	80021b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d007      	beq.n	80021b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f906 	bl	80023c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00c      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f834 	bl	8002240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00c      	beq.n	80021fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0220 	mvn.w	r2, #32
 80021f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f8d8 	bl	80023ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a46      	ldr	r2, [pc, #280]	; (8002380 <TIM_Base_SetConfig+0x12c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d013      	beq.n	8002294 <TIM_Base_SetConfig+0x40>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002272:	d00f      	beq.n	8002294 <TIM_Base_SetConfig+0x40>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a43      	ldr	r2, [pc, #268]	; (8002384 <TIM_Base_SetConfig+0x130>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00b      	beq.n	8002294 <TIM_Base_SetConfig+0x40>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a42      	ldr	r2, [pc, #264]	; (8002388 <TIM_Base_SetConfig+0x134>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d007      	beq.n	8002294 <TIM_Base_SetConfig+0x40>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a41      	ldr	r2, [pc, #260]	; (800238c <TIM_Base_SetConfig+0x138>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d003      	beq.n	8002294 <TIM_Base_SetConfig+0x40>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a40      	ldr	r2, [pc, #256]	; (8002390 <TIM_Base_SetConfig+0x13c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d108      	bne.n	80022a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a35      	ldr	r2, [pc, #212]	; (8002380 <TIM_Base_SetConfig+0x12c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d02b      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b4:	d027      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a32      	ldr	r2, [pc, #200]	; (8002384 <TIM_Base_SetConfig+0x130>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d023      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a31      	ldr	r2, [pc, #196]	; (8002388 <TIM_Base_SetConfig+0x134>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01f      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a30      	ldr	r2, [pc, #192]	; (800238c <TIM_Base_SetConfig+0x138>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01b      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a2f      	ldr	r2, [pc, #188]	; (8002390 <TIM_Base_SetConfig+0x13c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d017      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a2e      	ldr	r2, [pc, #184]	; (8002394 <TIM_Base_SetConfig+0x140>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a2d      	ldr	r2, [pc, #180]	; (8002398 <TIM_Base_SetConfig+0x144>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00f      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a2c      	ldr	r2, [pc, #176]	; (800239c <TIM_Base_SetConfig+0x148>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00b      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a2b      	ldr	r2, [pc, #172]	; (80023a0 <TIM_Base_SetConfig+0x14c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d007      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a2a      	ldr	r2, [pc, #168]	; (80023a4 <TIM_Base_SetConfig+0x150>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d003      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a29      	ldr	r2, [pc, #164]	; (80023a8 <TIM_Base_SetConfig+0x154>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d108      	bne.n	8002318 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800230c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4313      	orrs	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a10      	ldr	r2, [pc, #64]	; (8002380 <TIM_Base_SetConfig+0x12c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d003      	beq.n	800234c <TIM_Base_SetConfig+0xf8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a12      	ldr	r2, [pc, #72]	; (8002390 <TIM_Base_SetConfig+0x13c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d103      	bne.n	8002354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d105      	bne.n	8002372 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f023 0201 	bic.w	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	611a      	str	r2, [r3, #16]
  }
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40010000 	.word	0x40010000
 8002384:	40000400 	.word	0x40000400
 8002388:	40000800 	.word	0x40000800
 800238c:	40000c00 	.word	0x40000c00
 8002390:	40010400 	.word	0x40010400
 8002394:	40014000 	.word	0x40014000
 8002398:	40014400 	.word	0x40014400
 800239c:	40014800 	.word	0x40014800
 80023a0:	40001800 	.word	0x40001800
 80023a4:	40001c00 	.word	0x40001c00
 80023a8:	40002000 	.word	0x40002000

080023ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e042      	b.n	800246c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe fafe 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2224      	movs	r2, #36	; 0x24
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f82b 	bl	8002474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800242c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800243c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800244c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002478:	b0c0      	sub	sp, #256	; 0x100
 800247a:	af00      	add	r7, sp, #0
 800247c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800248c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002490:	68d9      	ldr	r1, [r3, #12]
 8002492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	ea40 0301 	orr.w	r3, r0, r1
 800249c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800249e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80024cc:	f021 010c 	bic.w	r1, r1, #12
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80024da:	430b      	orrs	r3, r1
 80024dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80024ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ee:	6999      	ldr	r1, [r3, #24]
 80024f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	ea40 0301 	orr.w	r3, r0, r1
 80024fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4b8f      	ldr	r3, [pc, #572]	; (8002740 <UART_SetConfig+0x2cc>)
 8002504:	429a      	cmp	r2, r3
 8002506:	d005      	beq.n	8002514 <UART_SetConfig+0xa0>
 8002508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4b8d      	ldr	r3, [pc, #564]	; (8002744 <UART_SetConfig+0x2d0>)
 8002510:	429a      	cmp	r2, r3
 8002512:	d104      	bne.n	800251e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002514:	f7fe ffa8 	bl	8001468 <HAL_RCC_GetPCLK2Freq>
 8002518:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800251c:	e003      	b.n	8002526 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800251e:	f7fe ff8f 	bl	8001440 <HAL_RCC_GetPCLK1Freq>
 8002522:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002530:	f040 810c 	bne.w	800274c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002538:	2200      	movs	r2, #0
 800253a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800253e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002542:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002546:	4622      	mov	r2, r4
 8002548:	462b      	mov	r3, r5
 800254a:	1891      	adds	r1, r2, r2
 800254c:	65b9      	str	r1, [r7, #88]	; 0x58
 800254e:	415b      	adcs	r3, r3
 8002550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002552:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002556:	4621      	mov	r1, r4
 8002558:	eb12 0801 	adds.w	r8, r2, r1
 800255c:	4629      	mov	r1, r5
 800255e:	eb43 0901 	adc.w	r9, r3, r1
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800256e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002576:	4690      	mov	r8, r2
 8002578:	4699      	mov	r9, r3
 800257a:	4623      	mov	r3, r4
 800257c:	eb18 0303 	adds.w	r3, r8, r3
 8002580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002584:	462b      	mov	r3, r5
 8002586:	eb49 0303 	adc.w	r3, r9, r3
 800258a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800258e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800259a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800259e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80025a2:	460b      	mov	r3, r1
 80025a4:	18db      	adds	r3, r3, r3
 80025a6:	653b      	str	r3, [r7, #80]	; 0x50
 80025a8:	4613      	mov	r3, r2
 80025aa:	eb42 0303 	adc.w	r3, r2, r3
 80025ae:	657b      	str	r3, [r7, #84]	; 0x54
 80025b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80025b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80025b8:	f7fd fe2a 	bl	8000210 <__aeabi_uldivmod>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4b61      	ldr	r3, [pc, #388]	; (8002748 <UART_SetConfig+0x2d4>)
 80025c2:	fba3 2302 	umull	r2, r3, r3, r2
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	011c      	lsls	r4, r3, #4
 80025ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025ce:	2200      	movs	r2, #0
 80025d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80025d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80025dc:	4642      	mov	r2, r8
 80025de:	464b      	mov	r3, r9
 80025e0:	1891      	adds	r1, r2, r2
 80025e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80025e4:	415b      	adcs	r3, r3
 80025e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025ec:	4641      	mov	r1, r8
 80025ee:	eb12 0a01 	adds.w	sl, r2, r1
 80025f2:	4649      	mov	r1, r9
 80025f4:	eb43 0b01 	adc.w	fp, r3, r1
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002604:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800260c:	4692      	mov	sl, r2
 800260e:	469b      	mov	fp, r3
 8002610:	4643      	mov	r3, r8
 8002612:	eb1a 0303 	adds.w	r3, sl, r3
 8002616:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800261a:	464b      	mov	r3, r9
 800261c:	eb4b 0303 	adc.w	r3, fp, r3
 8002620:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002630:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002634:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002638:	460b      	mov	r3, r1
 800263a:	18db      	adds	r3, r3, r3
 800263c:	643b      	str	r3, [r7, #64]	; 0x40
 800263e:	4613      	mov	r3, r2
 8002640:	eb42 0303 	adc.w	r3, r2, r3
 8002644:	647b      	str	r3, [r7, #68]	; 0x44
 8002646:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800264a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800264e:	f7fd fddf 	bl	8000210 <__aeabi_uldivmod>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4611      	mov	r1, r2
 8002658:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <UART_SetConfig+0x2d4>)
 800265a:	fba3 2301 	umull	r2, r3, r3, r1
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2264      	movs	r2, #100	; 0x64
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	1acb      	subs	r3, r1, r3
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <UART_SetConfig+0x2d4>)
 8002670:	fba3 2302 	umull	r2, r3, r3, r2
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800267c:	441c      	add	r4, r3
 800267e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002682:	2200      	movs	r2, #0
 8002684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002688:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800268c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002690:	4642      	mov	r2, r8
 8002692:	464b      	mov	r3, r9
 8002694:	1891      	adds	r1, r2, r2
 8002696:	63b9      	str	r1, [r7, #56]	; 0x38
 8002698:	415b      	adcs	r3, r3
 800269a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800269c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026a0:	4641      	mov	r1, r8
 80026a2:	1851      	adds	r1, r2, r1
 80026a4:	6339      	str	r1, [r7, #48]	; 0x30
 80026a6:	4649      	mov	r1, r9
 80026a8:	414b      	adcs	r3, r1
 80026aa:	637b      	str	r3, [r7, #52]	; 0x34
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80026b8:	4659      	mov	r1, fp
 80026ba:	00cb      	lsls	r3, r1, #3
 80026bc:	4651      	mov	r1, sl
 80026be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026c2:	4651      	mov	r1, sl
 80026c4:	00ca      	lsls	r2, r1, #3
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	4603      	mov	r3, r0
 80026cc:	4642      	mov	r2, r8
 80026ce:	189b      	adds	r3, r3, r2
 80026d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026d4:	464b      	mov	r3, r9
 80026d6:	460a      	mov	r2, r1
 80026d8:	eb42 0303 	adc.w	r3, r2, r3
 80026dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80026ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80026f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80026f4:	460b      	mov	r3, r1
 80026f6:	18db      	adds	r3, r3, r3
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026fa:	4613      	mov	r3, r2
 80026fc:	eb42 0303 	adc.w	r3, r2, r3
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002702:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002706:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800270a:	f7fd fd81 	bl	8000210 <__aeabi_uldivmod>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <UART_SetConfig+0x2d4>)
 8002714:	fba3 1302 	umull	r1, r3, r3, r2
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	2164      	movs	r1, #100	; 0x64
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	3332      	adds	r3, #50	; 0x32
 8002726:	4a08      	ldr	r2, [pc, #32]	; (8002748 <UART_SetConfig+0x2d4>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	f003 0207 	and.w	r2, r3, #7
 8002732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4422      	add	r2, r4
 800273a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800273c:	e106      	b.n	800294c <UART_SetConfig+0x4d8>
 800273e:	bf00      	nop
 8002740:	40011000 	.word	0x40011000
 8002744:	40011400 	.word	0x40011400
 8002748:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800274c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002750:	2200      	movs	r2, #0
 8002752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002756:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800275a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800275e:	4642      	mov	r2, r8
 8002760:	464b      	mov	r3, r9
 8002762:	1891      	adds	r1, r2, r2
 8002764:	6239      	str	r1, [r7, #32]
 8002766:	415b      	adcs	r3, r3
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
 800276a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800276e:	4641      	mov	r1, r8
 8002770:	1854      	adds	r4, r2, r1
 8002772:	4649      	mov	r1, r9
 8002774:	eb43 0501 	adc.w	r5, r3, r1
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	00eb      	lsls	r3, r5, #3
 8002782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002786:	00e2      	lsls	r2, r4, #3
 8002788:	4614      	mov	r4, r2
 800278a:	461d      	mov	r5, r3
 800278c:	4643      	mov	r3, r8
 800278e:	18e3      	adds	r3, r4, r3
 8002790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002794:	464b      	mov	r3, r9
 8002796:	eb45 0303 	adc.w	r3, r5, r3
 800279a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800279e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80027ba:	4629      	mov	r1, r5
 80027bc:	008b      	lsls	r3, r1, #2
 80027be:	4621      	mov	r1, r4
 80027c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027c4:	4621      	mov	r1, r4
 80027c6:	008a      	lsls	r2, r1, #2
 80027c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80027cc:	f7fd fd20 	bl	8000210 <__aeabi_uldivmod>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4b60      	ldr	r3, [pc, #384]	; (8002958 <UART_SetConfig+0x4e4>)
 80027d6:	fba3 2302 	umull	r2, r3, r3, r2
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	011c      	lsls	r4, r3, #4
 80027de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80027ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80027f0:	4642      	mov	r2, r8
 80027f2:	464b      	mov	r3, r9
 80027f4:	1891      	adds	r1, r2, r2
 80027f6:	61b9      	str	r1, [r7, #24]
 80027f8:	415b      	adcs	r3, r3
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002800:	4641      	mov	r1, r8
 8002802:	1851      	adds	r1, r2, r1
 8002804:	6139      	str	r1, [r7, #16]
 8002806:	4649      	mov	r1, r9
 8002808:	414b      	adcs	r3, r1
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002818:	4659      	mov	r1, fp
 800281a:	00cb      	lsls	r3, r1, #3
 800281c:	4651      	mov	r1, sl
 800281e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002822:	4651      	mov	r1, sl
 8002824:	00ca      	lsls	r2, r1, #3
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	4603      	mov	r3, r0
 800282c:	4642      	mov	r2, r8
 800282e:	189b      	adds	r3, r3, r2
 8002830:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002834:	464b      	mov	r3, r9
 8002836:	460a      	mov	r2, r1
 8002838:	eb42 0303 	adc.w	r3, r2, r3
 800283c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	67bb      	str	r3, [r7, #120]	; 0x78
 800284a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002858:	4649      	mov	r1, r9
 800285a:	008b      	lsls	r3, r1, #2
 800285c:	4641      	mov	r1, r8
 800285e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002862:	4641      	mov	r1, r8
 8002864:	008a      	lsls	r2, r1, #2
 8002866:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800286a:	f7fd fcd1 	bl	8000210 <__aeabi_uldivmod>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4611      	mov	r1, r2
 8002874:	4b38      	ldr	r3, [pc, #224]	; (8002958 <UART_SetConfig+0x4e4>)
 8002876:	fba3 2301 	umull	r2, r3, r3, r1
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	2264      	movs	r2, #100	; 0x64
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	1acb      	subs	r3, r1, r3
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	3332      	adds	r3, #50	; 0x32
 8002888:	4a33      	ldr	r2, [pc, #204]	; (8002958 <UART_SetConfig+0x4e4>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002894:	441c      	add	r4, r3
 8002896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800289a:	2200      	movs	r2, #0
 800289c:	673b      	str	r3, [r7, #112]	; 0x70
 800289e:	677a      	str	r2, [r7, #116]	; 0x74
 80028a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80028a4:	4642      	mov	r2, r8
 80028a6:	464b      	mov	r3, r9
 80028a8:	1891      	adds	r1, r2, r2
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	415b      	adcs	r3, r3
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028b4:	4641      	mov	r1, r8
 80028b6:	1851      	adds	r1, r2, r1
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	4649      	mov	r1, r9
 80028bc:	414b      	adcs	r3, r1
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028cc:	4659      	mov	r1, fp
 80028ce:	00cb      	lsls	r3, r1, #3
 80028d0:	4651      	mov	r1, sl
 80028d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028d6:	4651      	mov	r1, sl
 80028d8:	00ca      	lsls	r2, r1, #3
 80028da:	4610      	mov	r0, r2
 80028dc:	4619      	mov	r1, r3
 80028de:	4603      	mov	r3, r0
 80028e0:	4642      	mov	r2, r8
 80028e2:	189b      	adds	r3, r3, r2
 80028e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80028e6:	464b      	mov	r3, r9
 80028e8:	460a      	mov	r2, r1
 80028ea:	eb42 0303 	adc.w	r3, r2, r3
 80028ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	663b      	str	r3, [r7, #96]	; 0x60
 80028fa:	667a      	str	r2, [r7, #100]	; 0x64
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002908:	4649      	mov	r1, r9
 800290a:	008b      	lsls	r3, r1, #2
 800290c:	4641      	mov	r1, r8
 800290e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002912:	4641      	mov	r1, r8
 8002914:	008a      	lsls	r2, r1, #2
 8002916:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800291a:	f7fd fc79 	bl	8000210 <__aeabi_uldivmod>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <UART_SetConfig+0x4e4>)
 8002924:	fba3 1302 	umull	r1, r3, r3, r2
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	2164      	movs	r1, #100	; 0x64
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	3332      	adds	r3, #50	; 0x32
 8002936:	4a08      	ldr	r2, [pc, #32]	; (8002958 <UART_SetConfig+0x4e4>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	f003 020f 	and.w	r2, r3, #15
 8002942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4422      	add	r2, r4
 800294a:	609a      	str	r2, [r3, #8]
}
 800294c:	bf00      	nop
 800294e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002952:	46bd      	mov	sp, r7
 8002954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002958:	51eb851f 	.word	0x51eb851f

0800295c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800296a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800296e:	2b84      	cmp	r3, #132	; 0x84
 8002970:	d005      	beq.n	800297e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002972:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4413      	add	r3, r2
 800297a:	3303      	adds	r3, #3
 800297c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800297e:	68fb      	ldr	r3, [r7, #12]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002990:	f000 faf6 	bl	8002f80 <vTaskStartScheduler>
  
  return osOK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	bd80      	pop	{r7, pc}

0800299a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800299a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299c:	b089      	sub	sp, #36	; 0x24
 800299e:	af04      	add	r7, sp, #16
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <osThreadCreate+0x54>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01c      	beq.n	80029ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685c      	ldr	r4, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691e      	ldr	r6, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ffc8 	bl	800295c <makeFreeRtosPriority>
 80029cc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029d6:	9202      	str	r2, [sp, #8]
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	9100      	str	r1, [sp, #0]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	4632      	mov	r2, r6
 80029e0:	4629      	mov	r1, r5
 80029e2:	4620      	mov	r0, r4
 80029e4:	f000 f8ed 	bl	8002bc2 <xTaskCreateStatic>
 80029e8:	4603      	mov	r3, r0
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	e01c      	b.n	8002a28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685c      	ldr	r4, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029fa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff ffaa 	bl	800295c <makeFreeRtosPriority>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	f107 030c 	add.w	r3, r7, #12
 8002a0e:	9301      	str	r3, [sp, #4]
 8002a10:	9200      	str	r2, [sp, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	4632      	mov	r2, r6
 8002a16:	4629      	mov	r1, r5
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f000 f92f 	bl	8002c7c <xTaskCreate>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d001      	beq.n	8002a28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e000      	b.n	8002a2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002a28:	68fb      	ldr	r3, [r7, #12]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <osDelay+0x16>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	e000      	b.n	8002a4a <osDelay+0x18>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fa64 	bl	8002f18 <vTaskDelay>
  
  return osOK;
 8002a50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f103 0208 	add.w	r2, r3, #8
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a72:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f103 0208 	add.w	r2, r3, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f103 0208 	add.w	r2, r3, #8
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	601a      	str	r2, [r3, #0]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b12:	d103      	bne.n	8002b1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	e00c      	b.n	8002b36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3308      	adds	r3, #8
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	e002      	b.n	8002b2a <vListInsert+0x2e>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d2f6      	bcs.n	8002b24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	601a      	str	r2, [r3, #0]
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6892      	ldr	r2, [r2, #8]
 8002b84:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6852      	ldr	r2, [r2, #4]
 8002b8e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d103      	bne.n	8002ba2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	1e5a      	subs	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b08e      	sub	sp, #56	; 0x38
 8002bc6:	af04      	add	r7, sp, #16
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10a      	bne.n	8002bec <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bda:	f383 8811 	msr	BASEPRI, r3
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002be8:	bf00      	nop
 8002bea:	e7fe      	b.n	8002bea <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <xTaskCreateStatic+0x46>
	__asm volatile
 8002bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf6:	f383 8811 	msr	BASEPRI, r3
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	61fb      	str	r3, [r7, #28]
}
 8002c04:	bf00      	nop
 8002c06:	e7fe      	b.n	8002c06 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c08:	23a0      	movs	r3, #160	; 0xa0
 8002c0a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	2ba0      	cmp	r3, #160	; 0xa0
 8002c10:	d00a      	beq.n	8002c28 <xTaskCreateStatic+0x66>
	__asm volatile
 8002c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	61bb      	str	r3, [r7, #24]
}
 8002c24:	bf00      	nop
 8002c26:	e7fe      	b.n	8002c26 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c28:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d01e      	beq.n	8002c6e <xTaskCreateStatic+0xac>
 8002c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d01b      	beq.n	8002c6e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c48:	2300      	movs	r3, #0
 8002c4a:	9303      	str	r3, [sp, #12]
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	9302      	str	r3, [sp, #8]
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f851 	bl	8002d08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c68:	f000 f8ec 	bl	8002e44 <prvAddNewTaskToReadyList>
 8002c6c:	e001      	b.n	8002c72 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c72:	697b      	ldr	r3, [r7, #20]
	}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3728      	adds	r7, #40	; 0x28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08c      	sub	sp, #48	; 0x30
 8002c80:	af04      	add	r7, sp, #16
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fef1 	bl	8003a78 <pvPortMalloc>
 8002c96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00e      	beq.n	8002cbc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c9e:	20a0      	movs	r0, #160	; 0xa0
 8002ca0:	f000 feea 	bl	8003a78 <pvPortMalloc>
 8002ca4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30
 8002cb2:	e005      	b.n	8002cc0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cb4:	6978      	ldr	r0, [r7, #20]
 8002cb6:	f000 ffab 	bl	8003c10 <vPortFree>
 8002cba:	e001      	b.n	8002cc0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d017      	beq.n	8002cf6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cce:	88fa      	ldrh	r2, [r7, #6]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	9303      	str	r3, [sp, #12]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	9302      	str	r3, [sp, #8]
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f80f 	bl	8002d08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cea:	69f8      	ldr	r0, [r7, #28]
 8002cec:	f000 f8aa 	bl	8002e44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	e002      	b.n	8002cfc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
	}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3720      	adds	r7, #32
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d20:	3b01      	subs	r3, #1
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f023 0307 	bic.w	r3, r3, #7
 8002d2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	617b      	str	r3, [r7, #20]
}
 8002d4c:	bf00      	nop
 8002d4e:	e7fe      	b.n	8002d4e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d01f      	beq.n	8002d96 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
 8002d5a:	e012      	b.n	8002d82 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	4413      	add	r3, r2
 8002d62:	7819      	ldrb	r1, [r3, #0]
 8002d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	4413      	add	r3, r2
 8002d6a:	3334      	adds	r3, #52	; 0x34
 8002d6c:	460a      	mov	r2, r1
 8002d6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	4413      	add	r3, r2
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d006      	beq.n	8002d8a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	2b0f      	cmp	r3, #15
 8002d86:	d9e9      	bls.n	8002d5c <prvInitialiseNewTask+0x54>
 8002d88:	e000      	b.n	8002d8c <prvInitialiseNewTask+0x84>
			{
				break;
 8002d8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d94:	e003      	b.n	8002d9e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	2b06      	cmp	r3, #6
 8002da2:	d901      	bls.n	8002da8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002da4:	2306      	movs	r3, #6
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	2200      	movs	r2, #0
 8002db8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fe6b 	bl	8002a9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	3318      	adds	r3, #24
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fe66 	bl	8002a9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	f1c3 0207 	rsb	r2, r3, #7
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	334c      	adds	r3, #76	; 0x4c
 8002df8:	224c      	movs	r2, #76	; 0x4c
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f001 f825 	bl	8003e4c <memset>
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	4a0c      	ldr	r2, [pc, #48]	; (8002e38 <prvInitialiseNewTask+0x130>)
 8002e06:	651a      	str	r2, [r3, #80]	; 0x50
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	4a0c      	ldr	r2, [pc, #48]	; (8002e3c <prvInitialiseNewTask+0x134>)
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	4a0b      	ldr	r2, [pc, #44]	; (8002e40 <prvInitialiseNewTask+0x138>)
 8002e12:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	68f9      	ldr	r1, [r7, #12]
 8002e18:	69b8      	ldr	r0, [r7, #24]
 8002e1a:	f000 fc1f 	bl	800365c <pxPortInitialiseStack>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e30:	bf00      	nop
 8002e32:	3720      	adds	r7, #32
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20004124 	.word	0x20004124
 8002e3c:	2000418c 	.word	0x2000418c
 8002e40:	200041f4 	.word	0x200041f4

08002e44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e4c:	f000 fd32 	bl	80038b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e50:	4b2a      	ldr	r3, [pc, #168]	; (8002efc <prvAddNewTaskToReadyList+0xb8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3301      	adds	r3, #1
 8002e56:	4a29      	ldr	r2, [pc, #164]	; (8002efc <prvAddNewTaskToReadyList+0xb8>)
 8002e58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e5a:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <prvAddNewTaskToReadyList+0xbc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e62:	4a27      	ldr	r2, [pc, #156]	; (8002f00 <prvAddNewTaskToReadyList+0xbc>)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e68:	4b24      	ldr	r3, [pc, #144]	; (8002efc <prvAddNewTaskToReadyList+0xb8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d110      	bne.n	8002e92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e70:	f000 facc 	bl	800340c <prvInitialiseTaskLists>
 8002e74:	e00d      	b.n	8002e92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e76:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <prvAddNewTaskToReadyList+0xc0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <prvAddNewTaskToReadyList+0xbc>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d802      	bhi.n	8002e92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e8c:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <prvAddNewTaskToReadyList+0xbc>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e92:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <prvAddNewTaskToReadyList+0xc4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3301      	adds	r3, #1
 8002e98:	4a1b      	ldr	r2, [pc, #108]	; (8002f08 <prvAddNewTaskToReadyList+0xc4>)
 8002e9a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <prvAddNewTaskToReadyList+0xc8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <prvAddNewTaskToReadyList+0xc8>)
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <prvAddNewTaskToReadyList+0xcc>)
 8002ebc:	441a      	add	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f7ff fdf5 	bl	8002ab4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002eca:	f000 fd23 	bl	8003914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ece:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <prvAddNewTaskToReadyList+0xc0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00e      	beq.n	8002ef4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <prvAddNewTaskToReadyList+0xbc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d207      	bcs.n	8002ef4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <prvAddNewTaskToReadyList+0xd0>)
 8002ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	200004d0 	.word	0x200004d0
 8002f00:	200003d0 	.word	0x200003d0
 8002f04:	200004dc 	.word	0x200004dc
 8002f08:	200004ec 	.word	0x200004ec
 8002f0c:	200004d8 	.word	0x200004d8
 8002f10:	200003d4 	.word	0x200003d4
 8002f14:	e000ed04 	.word	0xe000ed04

08002f18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d017      	beq.n	8002f5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f2a:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <vTaskDelay+0x60>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <vTaskDelay+0x30>
	__asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	60bb      	str	r3, [r7, #8]
}
 8002f44:	bf00      	nop
 8002f46:	e7fe      	b.n	8002f46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f48:	f000 f884 	bl	8003054 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fb1e 	bl	8003590 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f54:	f000 f88c 	bl	8003070 <xTaskResumeAll>
 8002f58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d107      	bne.n	8002f70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <vTaskDelay+0x64>)
 8002f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f70:	bf00      	nop
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	200004f8 	.word	0x200004f8
 8002f7c:	e000ed04 	.word	0xe000ed04

08002f80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	; 0x28
 8002f84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f8e:	463a      	mov	r2, r7
 8002f90:	1d39      	adds	r1, r7, #4
 8002f92:	f107 0308 	add.w	r3, r7, #8
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd fab8 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f9c:	6839      	ldr	r1, [r7, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	9202      	str	r2, [sp, #8]
 8002fa4:	9301      	str	r3, [sp, #4]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	2300      	movs	r3, #0
 8002fac:	460a      	mov	r2, r1
 8002fae:	4921      	ldr	r1, [pc, #132]	; (8003034 <vTaskStartScheduler+0xb4>)
 8002fb0:	4821      	ldr	r0, [pc, #132]	; (8003038 <vTaskStartScheduler+0xb8>)
 8002fb2:	f7ff fe06 	bl	8002bc2 <xTaskCreateStatic>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	4a20      	ldr	r2, [pc, #128]	; (800303c <vTaskStartScheduler+0xbc>)
 8002fba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	; (800303c <vTaskStartScheduler+0xbc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e001      	b.n	8002fce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d11b      	bne.n	800300c <vTaskStartScheduler+0x8c>
	__asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	613b      	str	r3, [r7, #16]
}
 8002fe6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002fe8:	4b15      	ldr	r3, [pc, #84]	; (8003040 <vTaskStartScheduler+0xc0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	334c      	adds	r3, #76	; 0x4c
 8002fee:	4a15      	ldr	r2, [pc, #84]	; (8003044 <vTaskStartScheduler+0xc4>)
 8002ff0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002ff2:	4b15      	ldr	r3, [pc, #84]	; (8003048 <vTaskStartScheduler+0xc8>)
 8002ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002ffa:	4b14      	ldr	r3, [pc, #80]	; (800304c <vTaskStartScheduler+0xcc>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003000:	4b13      	ldr	r3, [pc, #76]	; (8003050 <vTaskStartScheduler+0xd0>)
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003006:	f000 fbb3 	bl	8003770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800300a:	e00e      	b.n	800302a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003012:	d10a      	bne.n	800302a <vTaskStartScheduler+0xaa>
	__asm volatile
 8003014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	60fb      	str	r3, [r7, #12]
}
 8003026:	bf00      	nop
 8003028:	e7fe      	b.n	8003028 <vTaskStartScheduler+0xa8>
}
 800302a:	bf00      	nop
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	0800413c 	.word	0x0800413c
 8003038:	080033dd 	.word	0x080033dd
 800303c:	200004f4 	.word	0x200004f4
 8003040:	200003d0 	.word	0x200003d0
 8003044:	2000005c 	.word	0x2000005c
 8003048:	200004f0 	.word	0x200004f0
 800304c:	200004dc 	.word	0x200004dc
 8003050:	200004d4 	.word	0x200004d4

08003054 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <vTaskSuspendAll+0x18>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	4a03      	ldr	r2, [pc, #12]	; (800306c <vTaskSuspendAll+0x18>)
 8003060:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	200004f8 	.word	0x200004f8

08003070 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800307e:	4b41      	ldr	r3, [pc, #260]	; (8003184 <xTaskResumeAll+0x114>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <xTaskResumeAll+0x2c>
	__asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	603b      	str	r3, [r7, #0]
}
 8003098:	bf00      	nop
 800309a:	e7fe      	b.n	800309a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800309c:	f000 fc0a 	bl	80038b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030a0:	4b38      	ldr	r3, [pc, #224]	; (8003184 <xTaskResumeAll+0x114>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	4a37      	ldr	r2, [pc, #220]	; (8003184 <xTaskResumeAll+0x114>)
 80030a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030aa:	4b36      	ldr	r3, [pc, #216]	; (8003184 <xTaskResumeAll+0x114>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d161      	bne.n	8003176 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030b2:	4b35      	ldr	r3, [pc, #212]	; (8003188 <xTaskResumeAll+0x118>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d05d      	beq.n	8003176 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030ba:	e02e      	b.n	800311a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030bc:	4b33      	ldr	r3, [pc, #204]	; (800318c <xTaskResumeAll+0x11c>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3318      	adds	r3, #24
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fd50 	bl	8002b6e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3304      	adds	r3, #4
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fd4b 	bl	8002b6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	2201      	movs	r2, #1
 80030de:	409a      	lsls	r2, r3
 80030e0:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <xTaskResumeAll+0x120>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	4a2a      	ldr	r2, [pc, #168]	; (8003190 <xTaskResumeAll+0x120>)
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4a27      	ldr	r2, [pc, #156]	; (8003194 <xTaskResumeAll+0x124>)
 80030f8:	441a      	add	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3304      	adds	r3, #4
 80030fe:	4619      	mov	r1, r3
 8003100:	4610      	mov	r0, r2
 8003102:	f7ff fcd7 	bl	8002ab4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310a:	4b23      	ldr	r3, [pc, #140]	; (8003198 <xTaskResumeAll+0x128>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	429a      	cmp	r2, r3
 8003112:	d302      	bcc.n	800311a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003114:	4b21      	ldr	r3, [pc, #132]	; (800319c <xTaskResumeAll+0x12c>)
 8003116:	2201      	movs	r2, #1
 8003118:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800311a:	4b1c      	ldr	r3, [pc, #112]	; (800318c <xTaskResumeAll+0x11c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1cc      	bne.n	80030bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003128:	f000 fa12 	bl	8003550 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800312c:	4b1c      	ldr	r3, [pc, #112]	; (80031a0 <xTaskResumeAll+0x130>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d010      	beq.n	800315a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003138:	f000 f836 	bl	80031a8 <xTaskIncrementTick>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003142:	4b16      	ldr	r3, [pc, #88]	; (800319c <xTaskResumeAll+0x12c>)
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f1      	bne.n	8003138 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <xTaskResumeAll+0x130>)
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800315a:	4b10      	ldr	r3, [pc, #64]	; (800319c <xTaskResumeAll+0x12c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d009      	beq.n	8003176 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003162:	2301      	movs	r3, #1
 8003164:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <xTaskResumeAll+0x134>)
 8003168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003176:	f000 fbcd 	bl	8003914 <vPortExitCritical>

	return xAlreadyYielded;
 800317a:	68bb      	ldr	r3, [r7, #8]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	200004f8 	.word	0x200004f8
 8003188:	200004d0 	.word	0x200004d0
 800318c:	20000490 	.word	0x20000490
 8003190:	200004d8 	.word	0x200004d8
 8003194:	200003d4 	.word	0x200003d4
 8003198:	200003d0 	.word	0x200003d0
 800319c:	200004e4 	.word	0x200004e4
 80031a0:	200004e0 	.word	0x200004e0
 80031a4:	e000ed04 	.word	0xe000ed04

080031a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031b2:	4b4e      	ldr	r3, [pc, #312]	; (80032ec <xTaskIncrementTick+0x144>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f040 808e 	bne.w	80032d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031bc:	4b4c      	ldr	r3, [pc, #304]	; (80032f0 <xTaskIncrementTick+0x148>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3301      	adds	r3, #1
 80031c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031c4:	4a4a      	ldr	r2, [pc, #296]	; (80032f0 <xTaskIncrementTick+0x148>)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d120      	bne.n	8003212 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80031d0:	4b48      	ldr	r3, [pc, #288]	; (80032f4 <xTaskIncrementTick+0x14c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	603b      	str	r3, [r7, #0]
}
 80031ec:	bf00      	nop
 80031ee:	e7fe      	b.n	80031ee <xTaskIncrementTick+0x46>
 80031f0:	4b40      	ldr	r3, [pc, #256]	; (80032f4 <xTaskIncrementTick+0x14c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	4b40      	ldr	r3, [pc, #256]	; (80032f8 <xTaskIncrementTick+0x150>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a3e      	ldr	r2, [pc, #248]	; (80032f4 <xTaskIncrementTick+0x14c>)
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	4a3e      	ldr	r2, [pc, #248]	; (80032f8 <xTaskIncrementTick+0x150>)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4b3d      	ldr	r3, [pc, #244]	; (80032fc <xTaskIncrementTick+0x154>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3301      	adds	r3, #1
 800320a:	4a3c      	ldr	r2, [pc, #240]	; (80032fc <xTaskIncrementTick+0x154>)
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	f000 f99f 	bl	8003550 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003212:	4b3b      	ldr	r3, [pc, #236]	; (8003300 <xTaskIncrementTick+0x158>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	429a      	cmp	r2, r3
 800321a:	d348      	bcc.n	80032ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800321c:	4b35      	ldr	r3, [pc, #212]	; (80032f4 <xTaskIncrementTick+0x14c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d104      	bne.n	8003230 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003226:	4b36      	ldr	r3, [pc, #216]	; (8003300 <xTaskIncrementTick+0x158>)
 8003228:	f04f 32ff 	mov.w	r2, #4294967295
 800322c:	601a      	str	r2, [r3, #0]
					break;
 800322e:	e03e      	b.n	80032ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003230:	4b30      	ldr	r3, [pc, #192]	; (80032f4 <xTaskIncrementTick+0x14c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	d203      	bcs.n	8003250 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003248:	4a2d      	ldr	r2, [pc, #180]	; (8003300 <xTaskIncrementTick+0x158>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800324e:	e02e      	b.n	80032ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	3304      	adds	r3, #4
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fc8a 	bl	8002b6e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	2b00      	cmp	r3, #0
 8003260:	d004      	beq.n	800326c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	3318      	adds	r3, #24
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fc81 	bl	8002b6e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	2201      	movs	r2, #1
 8003272:	409a      	lsls	r2, r3
 8003274:	4b23      	ldr	r3, [pc, #140]	; (8003304 <xTaskIncrementTick+0x15c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4313      	orrs	r3, r2
 800327a:	4a22      	ldr	r2, [pc, #136]	; (8003304 <xTaskIncrementTick+0x15c>)
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <xTaskIncrementTick+0x160>)
 800328c:	441a      	add	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	3304      	adds	r3, #4
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f7ff fc0d 	bl	8002ab4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <xTaskIncrementTick+0x164>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d3b9      	bcc.n	800321c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80032a8:	2301      	movs	r3, #1
 80032aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032ac:	e7b6      	b.n	800321c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032ae:	4b17      	ldr	r3, [pc, #92]	; (800330c <xTaskIncrementTick+0x164>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b4:	4914      	ldr	r1, [pc, #80]	; (8003308 <xTaskIncrementTick+0x160>)
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d901      	bls.n	80032ca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80032c6:	2301      	movs	r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <xTaskIncrementTick+0x168>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80032d2:	2301      	movs	r3, #1
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	e004      	b.n	80032e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80032d8:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <xTaskIncrementTick+0x16c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3301      	adds	r3, #1
 80032de:	4a0d      	ldr	r2, [pc, #52]	; (8003314 <xTaskIncrementTick+0x16c>)
 80032e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80032e2:	697b      	ldr	r3, [r7, #20]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	200004f8 	.word	0x200004f8
 80032f0:	200004d4 	.word	0x200004d4
 80032f4:	20000488 	.word	0x20000488
 80032f8:	2000048c 	.word	0x2000048c
 80032fc:	200004e8 	.word	0x200004e8
 8003300:	200004f0 	.word	0x200004f0
 8003304:	200004d8 	.word	0x200004d8
 8003308:	200003d4 	.word	0x200003d4
 800330c:	200003d0 	.word	0x200003d0
 8003310:	200004e4 	.word	0x200004e4
 8003314:	200004e0 	.word	0x200004e0

08003318 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800331e:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <vTaskSwitchContext+0xac>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003326:	4b28      	ldr	r3, [pc, #160]	; (80033c8 <vTaskSwitchContext+0xb0>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800332c:	e044      	b.n	80033b8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800332e:	4b26      	ldr	r3, [pc, #152]	; (80033c8 <vTaskSwitchContext+0xb0>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003334:	4b25      	ldr	r3, [pc, #148]	; (80033cc <vTaskSwitchContext+0xb4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	fab3 f383 	clz	r3, r3
 8003340:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003342:	7afb      	ldrb	r3, [r7, #11]
 8003344:	f1c3 031f 	rsb	r3, r3, #31
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	4921      	ldr	r1, [pc, #132]	; (80033d0 <vTaskSwitchContext+0xb8>)
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <vTaskSwitchContext+0x5c>
	__asm volatile
 800335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	607b      	str	r3, [r7, #4]
}
 8003370:	bf00      	nop
 8003372:	e7fe      	b.n	8003372 <vTaskSwitchContext+0x5a>
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <vTaskSwitchContext+0xb8>)
 8003380:	4413      	add	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	3308      	adds	r3, #8
 8003396:	429a      	cmp	r2, r3
 8003398:	d104      	bne.n	80033a4 <vTaskSwitchContext+0x8c>
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	605a      	str	r2, [r3, #4]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <vTaskSwitchContext+0xbc>)
 80033ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <vTaskSwitchContext+0xbc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	334c      	adds	r3, #76	; 0x4c
 80033b4:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <vTaskSwitchContext+0xc0>)
 80033b6:	6013      	str	r3, [r2, #0]
}
 80033b8:	bf00      	nop
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	200004f8 	.word	0x200004f8
 80033c8:	200004e4 	.word	0x200004e4
 80033cc:	200004d8 	.word	0x200004d8
 80033d0:	200003d4 	.word	0x200003d4
 80033d4:	200003d0 	.word	0x200003d0
 80033d8:	2000005c 	.word	0x2000005c

080033dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80033e4:	f000 f852 	bl	800348c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <prvIdleTask+0x28>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d9f9      	bls.n	80033e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <prvIdleTask+0x2c>)
 80033f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003400:	e7f0      	b.n	80033e4 <prvIdleTask+0x8>
 8003402:	bf00      	nop
 8003404:	200003d4 	.word	0x200003d4
 8003408:	e000ed04 	.word	0xe000ed04

0800340c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003412:	2300      	movs	r3, #0
 8003414:	607b      	str	r3, [r7, #4]
 8003416:	e00c      	b.n	8003432 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4a12      	ldr	r2, [pc, #72]	; (800346c <prvInitialiseTaskLists+0x60>)
 8003424:	4413      	add	r3, r2
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fb17 	bl	8002a5a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3301      	adds	r3, #1
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b06      	cmp	r3, #6
 8003436:	d9ef      	bls.n	8003418 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003438:	480d      	ldr	r0, [pc, #52]	; (8003470 <prvInitialiseTaskLists+0x64>)
 800343a:	f7ff fb0e 	bl	8002a5a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800343e:	480d      	ldr	r0, [pc, #52]	; (8003474 <prvInitialiseTaskLists+0x68>)
 8003440:	f7ff fb0b 	bl	8002a5a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003444:	480c      	ldr	r0, [pc, #48]	; (8003478 <prvInitialiseTaskLists+0x6c>)
 8003446:	f7ff fb08 	bl	8002a5a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800344a:	480c      	ldr	r0, [pc, #48]	; (800347c <prvInitialiseTaskLists+0x70>)
 800344c:	f7ff fb05 	bl	8002a5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003450:	480b      	ldr	r0, [pc, #44]	; (8003480 <prvInitialiseTaskLists+0x74>)
 8003452:	f7ff fb02 	bl	8002a5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003456:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <prvInitialiseTaskLists+0x78>)
 8003458:	4a05      	ldr	r2, [pc, #20]	; (8003470 <prvInitialiseTaskLists+0x64>)
 800345a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <prvInitialiseTaskLists+0x7c>)
 800345e:	4a05      	ldr	r2, [pc, #20]	; (8003474 <prvInitialiseTaskLists+0x68>)
 8003460:	601a      	str	r2, [r3, #0]
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	200003d4 	.word	0x200003d4
 8003470:	20000460 	.word	0x20000460
 8003474:	20000474 	.word	0x20000474
 8003478:	20000490 	.word	0x20000490
 800347c:	200004a4 	.word	0x200004a4
 8003480:	200004bc 	.word	0x200004bc
 8003484:	20000488 	.word	0x20000488
 8003488:	2000048c 	.word	0x2000048c

0800348c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003492:	e019      	b.n	80034c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003494:	f000 fa0e 	bl	80038b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003498:	4b10      	ldr	r3, [pc, #64]	; (80034dc <prvCheckTasksWaitingTermination+0x50>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3304      	adds	r3, #4
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff fb62 	bl	8002b6e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80034aa:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <prvCheckTasksWaitingTermination+0x54>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	4a0b      	ldr	r2, [pc, #44]	; (80034e0 <prvCheckTasksWaitingTermination+0x54>)
 80034b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <prvCheckTasksWaitingTermination+0x58>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	4a0a      	ldr	r2, [pc, #40]	; (80034e4 <prvCheckTasksWaitingTermination+0x58>)
 80034bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80034be:	f000 fa29 	bl	8003914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f810 	bl	80034e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034c8:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <prvCheckTasksWaitingTermination+0x58>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e1      	bne.n	8003494 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	200004a4 	.word	0x200004a4
 80034e0:	200004d0 	.word	0x200004d0
 80034e4:	200004b8 	.word	0x200004b8

080034e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	334c      	adds	r3, #76	; 0x4c
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fcb1 	bl	8003e5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003500:	2b00      	cmp	r3, #0
 8003502:	d108      	bne.n	8003516 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fb81 	bl	8003c10 <vPortFree>
				vPortFree( pxTCB );
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fb7e 	bl	8003c10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003514:	e018      	b.n	8003548 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800351c:	2b01      	cmp	r3, #1
 800351e:	d103      	bne.n	8003528 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fb75 	bl	8003c10 <vPortFree>
	}
 8003526:	e00f      	b.n	8003548 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800352e:	2b02      	cmp	r3, #2
 8003530:	d00a      	beq.n	8003548 <prvDeleteTCB+0x60>
	__asm volatile
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	60fb      	str	r3, [r7, #12]
}
 8003544:	bf00      	nop
 8003546:	e7fe      	b.n	8003546 <prvDeleteTCB+0x5e>
	}
 8003548:	bf00      	nop
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003556:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <prvResetNextTaskUnblockTime+0x38>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d104      	bne.n	800356a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003560:	4b0a      	ldr	r3, [pc, #40]	; (800358c <prvResetNextTaskUnblockTime+0x3c>)
 8003562:	f04f 32ff 	mov.w	r2, #4294967295
 8003566:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003568:	e008      	b.n	800357c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <prvResetNextTaskUnblockTime+0x38>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4a04      	ldr	r2, [pc, #16]	; (800358c <prvResetNextTaskUnblockTime+0x3c>)
 800357a:	6013      	str	r3, [r2, #0]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	20000488 	.word	0x20000488
 800358c:	200004f0 	.word	0x200004f0

08003590 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800359a:	4b29      	ldr	r3, [pc, #164]	; (8003640 <prvAddCurrentTaskToDelayedList+0xb0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035a0:	4b28      	ldr	r3, [pc, #160]	; (8003644 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3304      	adds	r3, #4
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fae1 	bl	8002b6e <uxListRemove>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10b      	bne.n	80035ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80035b2:	4b24      	ldr	r3, [pc, #144]	; (8003644 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	2201      	movs	r2, #1
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43da      	mvns	r2, r3
 80035c0:	4b21      	ldr	r3, [pc, #132]	; (8003648 <prvAddCurrentTaskToDelayedList+0xb8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4013      	ands	r3, r2
 80035c6:	4a20      	ldr	r2, [pc, #128]	; (8003648 <prvAddCurrentTaskToDelayedList+0xb8>)
 80035c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d10a      	bne.n	80035e8 <prvAddCurrentTaskToDelayedList+0x58>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035d8:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3304      	adds	r3, #4
 80035de:	4619      	mov	r1, r3
 80035e0:	481a      	ldr	r0, [pc, #104]	; (800364c <prvAddCurrentTaskToDelayedList+0xbc>)
 80035e2:	f7ff fa67 	bl	8002ab4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80035e6:	e026      	b.n	8003636 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4413      	add	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d209      	bcs.n	8003614 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003600:	4b13      	ldr	r3, [pc, #76]	; (8003650 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3304      	adds	r3, #4
 800360a:	4619      	mov	r1, r3
 800360c:	4610      	mov	r0, r2
 800360e:	f7ff fa75 	bl	8002afc <vListInsert>
}
 8003612:	e010      	b.n	8003636 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003614:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <prvAddCurrentTaskToDelayedList+0xb4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3304      	adds	r3, #4
 800361e:	4619      	mov	r1, r3
 8003620:	4610      	mov	r0, r2
 8003622:	f7ff fa6b 	bl	8002afc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003626:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	429a      	cmp	r2, r3
 800362e:	d202      	bcs.n	8003636 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003630:	4a09      	ldr	r2, [pc, #36]	; (8003658 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	6013      	str	r3, [r2, #0]
}
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	200004d4 	.word	0x200004d4
 8003644:	200003d0 	.word	0x200003d0
 8003648:	200004d8 	.word	0x200004d8
 800364c:	200004bc 	.word	0x200004bc
 8003650:	2000048c 	.word	0x2000048c
 8003654:	20000488 	.word	0x20000488
 8003658:	200004f0 	.word	0x200004f0

0800365c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3b04      	subs	r3, #4
 800366c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	3b04      	subs	r3, #4
 800367a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f023 0201 	bic.w	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3b04      	subs	r3, #4
 800368a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800368c:	4a0c      	ldr	r2, [pc, #48]	; (80036c0 <pxPortInitialiseStack+0x64>)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3b14      	subs	r3, #20
 8003696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3b04      	subs	r3, #4
 80036a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f06f 0202 	mvn.w	r2, #2
 80036aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	3b20      	subs	r3, #32
 80036b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80036b2:	68fb      	ldr	r3, [r7, #12]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	080036c5 	.word	0x080036c5

080036c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80036ce:	4b12      	ldr	r3, [pc, #72]	; (8003718 <prvTaskExitError+0x54>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d00a      	beq.n	80036ee <prvTaskExitError+0x2a>
	__asm volatile
 80036d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	60fb      	str	r3, [r7, #12]
}
 80036ea:	bf00      	nop
 80036ec:	e7fe      	b.n	80036ec <prvTaskExitError+0x28>
	__asm volatile
 80036ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	60bb      	str	r3, [r7, #8]
}
 8003700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003702:	bf00      	nop
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0fc      	beq.n	8003704 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800370a:	bf00      	nop
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	2000000c 	.word	0x2000000c
 800371c:	00000000 	.word	0x00000000

08003720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003720:	4b07      	ldr	r3, [pc, #28]	; (8003740 <pxCurrentTCBConst2>)
 8003722:	6819      	ldr	r1, [r3, #0]
 8003724:	6808      	ldr	r0, [r1, #0]
 8003726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372a:	f380 8809 	msr	PSP, r0
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f04f 0000 	mov.w	r0, #0
 8003736:	f380 8811 	msr	BASEPRI, r0
 800373a:	4770      	bx	lr
 800373c:	f3af 8000 	nop.w

08003740 <pxCurrentTCBConst2>:
 8003740:	200003d0 	.word	0x200003d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop

08003748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003748:	4808      	ldr	r0, [pc, #32]	; (800376c <prvPortStartFirstTask+0x24>)
 800374a:	6800      	ldr	r0, [r0, #0]
 800374c:	6800      	ldr	r0, [r0, #0]
 800374e:	f380 8808 	msr	MSP, r0
 8003752:	f04f 0000 	mov.w	r0, #0
 8003756:	f380 8814 	msr	CONTROL, r0
 800375a:	b662      	cpsie	i
 800375c:	b661      	cpsie	f
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	df00      	svc	0
 8003768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800376a:	bf00      	nop
 800376c:	e000ed08 	.word	0xe000ed08

08003770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003776:	4b46      	ldr	r3, [pc, #280]	; (8003890 <xPortStartScheduler+0x120>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a46      	ldr	r2, [pc, #280]	; (8003894 <xPortStartScheduler+0x124>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d10a      	bne.n	8003796 <xPortStartScheduler+0x26>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	613b      	str	r3, [r7, #16]
}
 8003792:	bf00      	nop
 8003794:	e7fe      	b.n	8003794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003796:	4b3e      	ldr	r3, [pc, #248]	; (8003890 <xPortStartScheduler+0x120>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a3f      	ldr	r2, [pc, #252]	; (8003898 <xPortStartScheduler+0x128>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d10a      	bne.n	80037b6 <xPortStartScheduler+0x46>
	__asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	60fb      	str	r3, [r7, #12]
}
 80037b2:	bf00      	nop
 80037b4:	e7fe      	b.n	80037b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80037b6:	4b39      	ldr	r3, [pc, #228]	; (800389c <xPortStartScheduler+0x12c>)
 80037b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	22ff      	movs	r2, #255	; 0xff
 80037c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	4b31      	ldr	r3, [pc, #196]	; (80038a0 <xPortStartScheduler+0x130>)
 80037dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80037de:	4b31      	ldr	r3, [pc, #196]	; (80038a4 <xPortStartScheduler+0x134>)
 80037e0:	2207      	movs	r2, #7
 80037e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037e4:	e009      	b.n	80037fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80037e6:	4b2f      	ldr	r3, [pc, #188]	; (80038a4 <xPortStartScheduler+0x134>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	4a2d      	ldr	r2, [pc, #180]	; (80038a4 <xPortStartScheduler+0x134>)
 80037ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b80      	cmp	r3, #128	; 0x80
 8003804:	d0ef      	beq.n	80037e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003806:	4b27      	ldr	r3, [pc, #156]	; (80038a4 <xPortStartScheduler+0x134>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f1c3 0307 	rsb	r3, r3, #7
 800380e:	2b04      	cmp	r3, #4
 8003810:	d00a      	beq.n	8003828 <xPortStartScheduler+0xb8>
	__asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	60bb      	str	r3, [r7, #8]
}
 8003824:	bf00      	nop
 8003826:	e7fe      	b.n	8003826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003828:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <xPortStartScheduler+0x134>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <xPortStartScheduler+0x134>)
 8003830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003832:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <xPortStartScheduler+0x134>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800383a:	4a1a      	ldr	r2, [pc, #104]	; (80038a4 <xPortStartScheduler+0x134>)
 800383c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003846:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <xPortStartScheduler+0x138>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a17      	ldr	r2, [pc, #92]	; (80038a8 <xPortStartScheduler+0x138>)
 800384c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003852:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <xPortStartScheduler+0x138>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <xPortStartScheduler+0x138>)
 8003858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800385c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800385e:	f000 f8dd 	bl	8003a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003862:	4b12      	ldr	r3, [pc, #72]	; (80038ac <xPortStartScheduler+0x13c>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003868:	f000 f8fc 	bl	8003a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800386c:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <xPortStartScheduler+0x140>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0f      	ldr	r2, [pc, #60]	; (80038b0 <xPortStartScheduler+0x140>)
 8003872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003878:	f7ff ff66 	bl	8003748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800387c:	f7ff fd4c 	bl	8003318 <vTaskSwitchContext>
	prvTaskExitError();
 8003880:	f7ff ff20 	bl	80036c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	e000ed00 	.word	0xe000ed00
 8003894:	410fc271 	.word	0x410fc271
 8003898:	410fc270 	.word	0x410fc270
 800389c:	e000e400 	.word	0xe000e400
 80038a0:	200004fc 	.word	0x200004fc
 80038a4:	20000500 	.word	0x20000500
 80038a8:	e000ed20 	.word	0xe000ed20
 80038ac:	2000000c 	.word	0x2000000c
 80038b0:	e000ef34 	.word	0xe000ef34

080038b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
	__asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	607b      	str	r3, [r7, #4]
}
 80038cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80038ce:	4b0f      	ldr	r3, [pc, #60]	; (800390c <vPortEnterCritical+0x58>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3301      	adds	r3, #1
 80038d4:	4a0d      	ldr	r2, [pc, #52]	; (800390c <vPortEnterCritical+0x58>)
 80038d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80038d8:	4b0c      	ldr	r3, [pc, #48]	; (800390c <vPortEnterCritical+0x58>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d10f      	bne.n	8003900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <vPortEnterCritical+0x5c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <vPortEnterCritical+0x4c>
	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	603b      	str	r3, [r7, #0]
}
 80038fc:	bf00      	nop
 80038fe:	e7fe      	b.n	80038fe <vPortEnterCritical+0x4a>
	}
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	2000000c 	.word	0x2000000c
 8003910:	e000ed04 	.word	0xe000ed04

08003914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <vPortExitCritical+0x50>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <vPortExitCritical+0x24>
	__asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	607b      	str	r3, [r7, #4]
}
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003938:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <vPortExitCritical+0x50>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3b01      	subs	r3, #1
 800393e:	4a09      	ldr	r2, [pc, #36]	; (8003964 <vPortExitCritical+0x50>)
 8003940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <vPortExitCritical+0x50>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d105      	bne.n	8003956 <vPortExitCritical+0x42>
 800394a:	2300      	movs	r3, #0
 800394c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	2000000c 	.word	0x2000000c
	...

08003970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003970:	f3ef 8009 	mrs	r0, PSP
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <pxCurrentTCBConst>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	f01e 0f10 	tst.w	lr, #16
 8003980:	bf08      	it	eq
 8003982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800398a:	6010      	str	r0, [r2, #0]
 800398c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003994:	f380 8811 	msr	BASEPRI, r0
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f7ff fcba 	bl	8003318 <vTaskSwitchContext>
 80039a4:	f04f 0000 	mov.w	r0, #0
 80039a8:	f380 8811 	msr	BASEPRI, r0
 80039ac:	bc09      	pop	{r0, r3}
 80039ae:	6819      	ldr	r1, [r3, #0]
 80039b0:	6808      	ldr	r0, [r1, #0]
 80039b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b6:	f01e 0f10 	tst.w	lr, #16
 80039ba:	bf08      	it	eq
 80039bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80039c0:	f380 8809 	msr	PSP, r0
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	f3af 8000 	nop.w

080039d0 <pxCurrentTCBConst>:
 80039d0:	200003d0 	.word	0x200003d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80039d4:	bf00      	nop
 80039d6:	bf00      	nop

080039d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
	__asm volatile
 80039de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	607b      	str	r3, [r7, #4]
}
 80039f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80039f2:	f7ff fbd9 	bl	80031a8 <xTaskIncrementTick>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <SysTick_Handler+0x40>)
 80039fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	2300      	movs	r3, #0
 8003a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	f383 8811 	msr	BASEPRI, r3
}
 8003a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	e000ed04 	.word	0xe000ed04

08003a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <vPortSetupTimerInterrupt+0x34>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a26:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <vPortSetupTimerInterrupt+0x38>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <vPortSetupTimerInterrupt+0x3c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <vPortSetupTimerInterrupt+0x40>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	099b      	lsrs	r3, r3, #6
 8003a38:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <vPortSetupTimerInterrupt+0x44>)
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a3e:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <vPortSetupTimerInterrupt+0x34>)
 8003a40:	2207      	movs	r2, #7
 8003a42:	601a      	str	r2, [r3, #0]
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	e000e010 	.word	0xe000e010
 8003a54:	e000e018 	.word	0xe000e018
 8003a58:	20000000 	.word	0x20000000
 8003a5c:	10624dd3 	.word	0x10624dd3
 8003a60:	e000e014 	.word	0xe000e014

08003a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003a74 <vPortEnableVFP+0x10>
 8003a68:	6801      	ldr	r1, [r0, #0]
 8003a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a6e:	6001      	str	r1, [r0, #0]
 8003a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003a72:	bf00      	nop
 8003a74:	e000ed88 	.word	0xe000ed88

08003a78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	; 0x28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003a84:	f7ff fae6 	bl	8003054 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003a88:	4b5b      	ldr	r3, [pc, #364]	; (8003bf8 <pvPortMalloc+0x180>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003a90:	f000 f920 	bl	8003cd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a94:	4b59      	ldr	r3, [pc, #356]	; (8003bfc <pvPortMalloc+0x184>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f040 8093 	bne.w	8003bc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01d      	beq.n	8003ae4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d014      	beq.n	8003ae4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f023 0307 	bic.w	r3, r3, #7
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <pvPortMalloc+0x6c>
	__asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	617b      	str	r3, [r7, #20]
}
 8003ae0:	bf00      	nop
 8003ae2:	e7fe      	b.n	8003ae2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d06e      	beq.n	8003bc8 <pvPortMalloc+0x150>
 8003aea:	4b45      	ldr	r3, [pc, #276]	; (8003c00 <pvPortMalloc+0x188>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d869      	bhi.n	8003bc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003af4:	4b43      	ldr	r3, [pc, #268]	; (8003c04 <pvPortMalloc+0x18c>)
 8003af6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003af8:	4b42      	ldr	r3, [pc, #264]	; (8003c04 <pvPortMalloc+0x18c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003afe:	e004      	b.n	8003b0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d903      	bls.n	8003b1c <pvPortMalloc+0xa4>
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f1      	bne.n	8003b00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003b1c:	4b36      	ldr	r3, [pc, #216]	; (8003bf8 <pvPortMalloc+0x180>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d050      	beq.n	8003bc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2208      	movs	r2, #8
 8003b2c:	4413      	add	r3, r2
 8003b2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	1ad2      	subs	r2, r2, r3
 8003b40:	2308      	movs	r3, #8
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d91f      	bls.n	8003b88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <pvPortMalloc+0xf8>
	__asm volatile
 8003b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	613b      	str	r3, [r7, #16]
}
 8003b6c:	bf00      	nop
 8003b6e:	e7fe      	b.n	8003b6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	1ad2      	subs	r2, r2, r3
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b82:	69b8      	ldr	r0, [r7, #24]
 8003b84:	f000 f908 	bl	8003d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b88:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <pvPortMalloc+0x188>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <pvPortMalloc+0x188>)
 8003b94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b96:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <pvPortMalloc+0x188>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <pvPortMalloc+0x190>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d203      	bcs.n	8003baa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ba2:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <pvPortMalloc+0x188>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a18      	ldr	r2, [pc, #96]	; (8003c08 <pvPortMalloc+0x190>)
 8003ba8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <pvPortMalloc+0x184>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003bbe:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <pvPortMalloc+0x194>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	4a11      	ldr	r2, [pc, #68]	; (8003c0c <pvPortMalloc+0x194>)
 8003bc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003bc8:	f7ff fa52 	bl	8003070 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <pvPortMalloc+0x174>
	__asm volatile
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	60fb      	str	r3, [r7, #12]
}
 8003be8:	bf00      	nop
 8003bea:	e7fe      	b.n	8003bea <pvPortMalloc+0x172>
	return pvReturn;
 8003bec:	69fb      	ldr	r3, [r7, #28]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3728      	adds	r7, #40	; 0x28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	2000410c 	.word	0x2000410c
 8003bfc:	20004120 	.word	0x20004120
 8003c00:	20004110 	.word	0x20004110
 8003c04:	20004104 	.word	0x20004104
 8003c08:	20004114 	.word	0x20004114
 8003c0c:	20004118 	.word	0x20004118

08003c10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d04d      	beq.n	8003cbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003c22:	2308      	movs	r3, #8
 8003c24:	425b      	negs	r3, r3
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4413      	add	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <vPortFree+0xb8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <vPortFree+0x44>
	__asm volatile
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	60fb      	str	r3, [r7, #12]
}
 8003c50:	bf00      	nop
 8003c52:	e7fe      	b.n	8003c52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <vPortFree+0x62>
	__asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	60bb      	str	r3, [r7, #8]
}
 8003c6e:	bf00      	nop
 8003c70:	e7fe      	b.n	8003c70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <vPortFree+0xb8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d01e      	beq.n	8003cbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d11a      	bne.n	8003cbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <vPortFree+0xb8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	43db      	mvns	r3, r3
 8003c92:	401a      	ands	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003c98:	f7ff f9dc 	bl	8003054 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <vPortFree+0xbc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	4a09      	ldr	r2, [pc, #36]	; (8003ccc <vPortFree+0xbc>)
 8003ca8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003caa:	6938      	ldr	r0, [r7, #16]
 8003cac:	f000 f874 	bl	8003d98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003cb0:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <vPortFree+0xc0>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	4a06      	ldr	r2, [pc, #24]	; (8003cd0 <vPortFree+0xc0>)
 8003cb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003cba:	f7ff f9d9 	bl	8003070 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003cbe:	bf00      	nop
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20004120 	.word	0x20004120
 8003ccc:	20004110 	.word	0x20004110
 8003cd0:	2000411c 	.word	0x2000411c

08003cd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003cda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003cde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ce0:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <prvHeapInit+0xac>)
 8003ce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00c      	beq.n	8003d08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	3307      	adds	r3, #7
 8003cf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0307 	bic.w	r3, r3, #7
 8003cfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <prvHeapInit+0xac>)
 8003d04:	4413      	add	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d0c:	4a1d      	ldr	r2, [pc, #116]	; (8003d84 <prvHeapInit+0xb0>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d12:	4b1c      	ldr	r3, [pc, #112]	; (8003d84 <prvHeapInit+0xb0>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003d20:	2208      	movs	r2, #8
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0307 	bic.w	r3, r3, #7
 8003d2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4a15      	ldr	r2, [pc, #84]	; (8003d88 <prvHeapInit+0xb4>)
 8003d34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003d36:	4b14      	ldr	r3, [pc, #80]	; (8003d88 <prvHeapInit+0xb4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003d3e:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <prvHeapInit+0xb4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	1ad2      	subs	r2, r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d54:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <prvHeapInit+0xb4>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <prvHeapInit+0xb8>)
 8003d62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	4a09      	ldr	r2, [pc, #36]	; (8003d90 <prvHeapInit+0xbc>)
 8003d6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <prvHeapInit+0xc0>)
 8003d6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d72:	601a      	str	r2, [r3, #0]
}
 8003d74:	bf00      	nop
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	20000504 	.word	0x20000504
 8003d84:	20004104 	.word	0x20004104
 8003d88:	2000410c 	.word	0x2000410c
 8003d8c:	20004114 	.word	0x20004114
 8003d90:	20004110 	.word	0x20004110
 8003d94:	20004120 	.word	0x20004120

08003d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003da0:	4b28      	ldr	r3, [pc, #160]	; (8003e44 <prvInsertBlockIntoFreeList+0xac>)
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	e002      	b.n	8003dac <prvInsertBlockIntoFreeList+0x14>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d8f7      	bhi.n	8003da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d108      	bne.n	8003dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	441a      	add	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	441a      	add	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d118      	bne.n	8003e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <prvInsertBlockIntoFreeList+0xb0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d00d      	beq.n	8003e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	441a      	add	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	e008      	b.n	8003e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e16:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <prvInsertBlockIntoFreeList+0xb0>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	e003      	b.n	8003e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d002      	beq.n	8003e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	20004104 	.word	0x20004104
 8003e48:	2000410c 	.word	0x2000410c

08003e4c <memset>:
 8003e4c:	4402      	add	r2, r0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d100      	bne.n	8003e56 <memset+0xa>
 8003e54:	4770      	bx	lr
 8003e56:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5a:	e7f9      	b.n	8003e50 <memset+0x4>

08003e5c <_reclaim_reent>:
 8003e5c:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <_reclaim_reent+0xa8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4283      	cmp	r3, r0
 8003e62:	b570      	push	{r4, r5, r6, lr}
 8003e64:	4604      	mov	r4, r0
 8003e66:	d04b      	beq.n	8003f00 <_reclaim_reent+0xa4>
 8003e68:	69c3      	ldr	r3, [r0, #28]
 8003e6a:	b143      	cbz	r3, 8003e7e <_reclaim_reent+0x22>
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d144      	bne.n	8003efc <_reclaim_reent+0xa0>
 8003e72:	69e3      	ldr	r3, [r4, #28]
 8003e74:	6819      	ldr	r1, [r3, #0]
 8003e76:	b111      	cbz	r1, 8003e7e <_reclaim_reent+0x22>
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f000 f86b 	bl	8003f54 <_free_r>
 8003e7e:	6961      	ldr	r1, [r4, #20]
 8003e80:	b111      	cbz	r1, 8003e88 <_reclaim_reent+0x2c>
 8003e82:	4620      	mov	r0, r4
 8003e84:	f000 f866 	bl	8003f54 <_free_r>
 8003e88:	69e1      	ldr	r1, [r4, #28]
 8003e8a:	b111      	cbz	r1, 8003e92 <_reclaim_reent+0x36>
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f000 f861 	bl	8003f54 <_free_r>
 8003e92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003e94:	b111      	cbz	r1, 8003e9c <_reclaim_reent+0x40>
 8003e96:	4620      	mov	r0, r4
 8003e98:	f000 f85c 	bl	8003f54 <_free_r>
 8003e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e9e:	b111      	cbz	r1, 8003ea6 <_reclaim_reent+0x4a>
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	f000 f857 	bl	8003f54 <_free_r>
 8003ea6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003ea8:	b111      	cbz	r1, 8003eb0 <_reclaim_reent+0x54>
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f000 f852 	bl	8003f54 <_free_r>
 8003eb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003eb2:	b111      	cbz	r1, 8003eba <_reclaim_reent+0x5e>
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f000 f84d 	bl	8003f54 <_free_r>
 8003eba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003ebc:	b111      	cbz	r1, 8003ec4 <_reclaim_reent+0x68>
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f000 f848 	bl	8003f54 <_free_r>
 8003ec4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003ec6:	b111      	cbz	r1, 8003ece <_reclaim_reent+0x72>
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f000 f843 	bl	8003f54 <_free_r>
 8003ece:	6a23      	ldr	r3, [r4, #32]
 8003ed0:	b1b3      	cbz	r3, 8003f00 <_reclaim_reent+0xa4>
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003ed8:	4718      	bx	r3
 8003eda:	5949      	ldr	r1, [r1, r5]
 8003edc:	b941      	cbnz	r1, 8003ef0 <_reclaim_reent+0x94>
 8003ede:	3504      	adds	r5, #4
 8003ee0:	69e3      	ldr	r3, [r4, #28]
 8003ee2:	2d80      	cmp	r5, #128	; 0x80
 8003ee4:	68d9      	ldr	r1, [r3, #12]
 8003ee6:	d1f8      	bne.n	8003eda <_reclaim_reent+0x7e>
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f000 f833 	bl	8003f54 <_free_r>
 8003eee:	e7c0      	b.n	8003e72 <_reclaim_reent+0x16>
 8003ef0:	680e      	ldr	r6, [r1, #0]
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f000 f82e 	bl	8003f54 <_free_r>
 8003ef8:	4631      	mov	r1, r6
 8003efa:	e7ef      	b.n	8003edc <_reclaim_reent+0x80>
 8003efc:	2500      	movs	r5, #0
 8003efe:	e7ef      	b.n	8003ee0 <_reclaim_reent+0x84>
 8003f00:	bd70      	pop	{r4, r5, r6, pc}
 8003f02:	bf00      	nop
 8003f04:	2000005c 	.word	0x2000005c

08003f08 <__libc_init_array>:
 8003f08:	b570      	push	{r4, r5, r6, lr}
 8003f0a:	4d0d      	ldr	r5, [pc, #52]	; (8003f40 <__libc_init_array+0x38>)
 8003f0c:	4c0d      	ldr	r4, [pc, #52]	; (8003f44 <__libc_init_array+0x3c>)
 8003f0e:	1b64      	subs	r4, r4, r5
 8003f10:	10a4      	asrs	r4, r4, #2
 8003f12:	2600      	movs	r6, #0
 8003f14:	42a6      	cmp	r6, r4
 8003f16:	d109      	bne.n	8003f2c <__libc_init_array+0x24>
 8003f18:	4d0b      	ldr	r5, [pc, #44]	; (8003f48 <__libc_init_array+0x40>)
 8003f1a:	4c0c      	ldr	r4, [pc, #48]	; (8003f4c <__libc_init_array+0x44>)
 8003f1c:	f000 f872 	bl	8004004 <_init>
 8003f20:	1b64      	subs	r4, r4, r5
 8003f22:	10a4      	asrs	r4, r4, #2
 8003f24:	2600      	movs	r6, #0
 8003f26:	42a6      	cmp	r6, r4
 8003f28:	d105      	bne.n	8003f36 <__libc_init_array+0x2e>
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}
 8003f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f30:	4798      	blx	r3
 8003f32:	3601      	adds	r6, #1
 8003f34:	e7ee      	b.n	8003f14 <__libc_init_array+0xc>
 8003f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f3a:	4798      	blx	r3
 8003f3c:	3601      	adds	r6, #1
 8003f3e:	e7f2      	b.n	8003f26 <__libc_init_array+0x1e>
 8003f40:	08004164 	.word	0x08004164
 8003f44:	08004164 	.word	0x08004164
 8003f48:	08004164 	.word	0x08004164
 8003f4c:	08004168 	.word	0x08004168

08003f50 <__retarget_lock_acquire_recursive>:
 8003f50:	4770      	bx	lr

08003f52 <__retarget_lock_release_recursive>:
 8003f52:	4770      	bx	lr

08003f54 <_free_r>:
 8003f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f56:	2900      	cmp	r1, #0
 8003f58:	d044      	beq.n	8003fe4 <_free_r+0x90>
 8003f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f5e:	9001      	str	r0, [sp, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f1a1 0404 	sub.w	r4, r1, #4
 8003f66:	bfb8      	it	lt
 8003f68:	18e4      	addlt	r4, r4, r3
 8003f6a:	f000 f83f 	bl	8003fec <__malloc_lock>
 8003f6e:	4a1e      	ldr	r2, [pc, #120]	; (8003fe8 <_free_r+0x94>)
 8003f70:	9801      	ldr	r0, [sp, #4]
 8003f72:	6813      	ldr	r3, [r2, #0]
 8003f74:	b933      	cbnz	r3, 8003f84 <_free_r+0x30>
 8003f76:	6063      	str	r3, [r4, #4]
 8003f78:	6014      	str	r4, [r2, #0]
 8003f7a:	b003      	add	sp, #12
 8003f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f80:	f000 b83a 	b.w	8003ff8 <__malloc_unlock>
 8003f84:	42a3      	cmp	r3, r4
 8003f86:	d908      	bls.n	8003f9a <_free_r+0x46>
 8003f88:	6825      	ldr	r5, [r4, #0]
 8003f8a:	1961      	adds	r1, r4, r5
 8003f8c:	428b      	cmp	r3, r1
 8003f8e:	bf01      	itttt	eq
 8003f90:	6819      	ldreq	r1, [r3, #0]
 8003f92:	685b      	ldreq	r3, [r3, #4]
 8003f94:	1949      	addeq	r1, r1, r5
 8003f96:	6021      	streq	r1, [r4, #0]
 8003f98:	e7ed      	b.n	8003f76 <_free_r+0x22>
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	b10b      	cbz	r3, 8003fa4 <_free_r+0x50>
 8003fa0:	42a3      	cmp	r3, r4
 8003fa2:	d9fa      	bls.n	8003f9a <_free_r+0x46>
 8003fa4:	6811      	ldr	r1, [r2, #0]
 8003fa6:	1855      	adds	r5, r2, r1
 8003fa8:	42a5      	cmp	r5, r4
 8003faa:	d10b      	bne.n	8003fc4 <_free_r+0x70>
 8003fac:	6824      	ldr	r4, [r4, #0]
 8003fae:	4421      	add	r1, r4
 8003fb0:	1854      	adds	r4, r2, r1
 8003fb2:	42a3      	cmp	r3, r4
 8003fb4:	6011      	str	r1, [r2, #0]
 8003fb6:	d1e0      	bne.n	8003f7a <_free_r+0x26>
 8003fb8:	681c      	ldr	r4, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	6053      	str	r3, [r2, #4]
 8003fbe:	440c      	add	r4, r1
 8003fc0:	6014      	str	r4, [r2, #0]
 8003fc2:	e7da      	b.n	8003f7a <_free_r+0x26>
 8003fc4:	d902      	bls.n	8003fcc <_free_r+0x78>
 8003fc6:	230c      	movs	r3, #12
 8003fc8:	6003      	str	r3, [r0, #0]
 8003fca:	e7d6      	b.n	8003f7a <_free_r+0x26>
 8003fcc:	6825      	ldr	r5, [r4, #0]
 8003fce:	1961      	adds	r1, r4, r5
 8003fd0:	428b      	cmp	r3, r1
 8003fd2:	bf04      	itt	eq
 8003fd4:	6819      	ldreq	r1, [r3, #0]
 8003fd6:	685b      	ldreq	r3, [r3, #4]
 8003fd8:	6063      	str	r3, [r4, #4]
 8003fda:	bf04      	itt	eq
 8003fdc:	1949      	addeq	r1, r1, r5
 8003fde:	6021      	streq	r1, [r4, #0]
 8003fe0:	6054      	str	r4, [r2, #4]
 8003fe2:	e7ca      	b.n	8003f7a <_free_r+0x26>
 8003fe4:	b003      	add	sp, #12
 8003fe6:	bd30      	pop	{r4, r5, pc}
 8003fe8:	20004260 	.word	0x20004260

08003fec <__malloc_lock>:
 8003fec:	4801      	ldr	r0, [pc, #4]	; (8003ff4 <__malloc_lock+0x8>)
 8003fee:	f7ff bfaf 	b.w	8003f50 <__retarget_lock_acquire_recursive>
 8003ff2:	bf00      	nop
 8003ff4:	2000425c 	.word	0x2000425c

08003ff8 <__malloc_unlock>:
 8003ff8:	4801      	ldr	r0, [pc, #4]	; (8004000 <__malloc_unlock+0x8>)
 8003ffa:	f7ff bfaa 	b.w	8003f52 <__retarget_lock_release_recursive>
 8003ffe:	bf00      	nop
 8004000:	2000425c 	.word	0x2000425c

08004004 <_init>:
 8004004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004006:	bf00      	nop
 8004008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400a:	bc08      	pop	{r3}
 800400c:	469e      	mov	lr, r3
 800400e:	4770      	bx	lr

08004010 <_fini>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	bf00      	nop
 8004014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004016:	bc08      	pop	{r3}
 8004018:	469e      	mov	lr, r3
 800401a:	4770      	bx	lr
